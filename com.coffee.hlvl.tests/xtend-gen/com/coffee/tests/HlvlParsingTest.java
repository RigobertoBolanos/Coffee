/**
 * generated by Xtext 2.12.0
 */
package com.coffee.tests;

import com.coffee.hlvl.Model;
import com.coffee.tests.HlvlInjectorProvider;
import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * Class to test the correct parsing of HLVL
 * @author Angela Villota
 * @version HLVL V4
 * November 2018
 */
@RunWith(XtextRunner.class)
@InjectWith(HlvlInjectorProvider.class)
@SuppressWarnings("all")
public class HlvlParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  @Extension
  private ParseHelper _parseHelper;
  
  /**
   * Method to test the interpretation of an empty program
   */
  @Test
  public void emptyModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
