grammar org.xtext.PLhlcl with org.eclipse.xtext.common.Terminals

generate pLhlcl "http://www.xtext.org/PLhlcl"

Model:
	'model' name=ID 'variables:' vars+=(VarDeclaration)*  'constraints:'constraints+=(Constraint)*
	;
	
//variable declaration
VarDeclaration:
	(instantiable='instantiable' '['min=Number ',' max=Number ']')? 
	type=VarType name=ID  
	('values:' variants= VariantDeclaration)?
	;
	
//Declaration of variants
VariantDeclaration: 
  VariantsInterval | VariantsEnumeration 
	;

// intervals (only intervals of enumerables)
VariantsInterval:
	(start=Number) ('..') (end=Number)
	;
// enumeration (enumeration of booleans, integers and symbols)
VariantsEnumeration:
	('[') list =  ListOfValues  (']')
	;

//variantsSet:
//		 vars=('(') list +=  ListOfIDs  (')') 
//	values?=  '[' '('   ListOfValues ')' (',' '(' ListOfValues')')+ ']'
//;


Constraint:
	  name=ID ':'  exp= ConsExpression 
;


ConsExpression:
	IDCons|Refinement |Rule |FodaBin |Structural |FodaUN 
;
TerminalExp returns Expression:
	'(' ConsExpression ')' | IDCons
;
IDCons:
	name=ID
;

/**
 * an structural relation defines a parent-children relation including an optional cardinality
 * 
 */
Structural:
	'structural:' parent=ID  'variants:' ('[') group=ListOfIDs (']') ('card:''['min=Number ',' max=Number ']')? 
;
Refinement:
	Assignment | VarRefinement | SetRefinement
;

Assignment:
	var= ID 'is' value= Value
	
;
VarRefinement:
	var=ID 'in' values= VariantDeclaration
;
SetRefinement:
	'vars:' '(' vars=ListOfIDs  ')'  
	'variants'
	'[' '('head= ListOfValues ')'  ( ',' '('tail+= ListOfValues')')+ ']'
;

Rule:
	condition= TerminalExp '-->' consequence= TerminalExp
;

FodaUN:
	var1=[VarDeclaration] 'is' op= UnaryOp
;
FodaBin:
	var1=[VarDeclaration] op= BinOp var2= [VarDeclaration]
;



//syntactic categories


//Values
BoolVal: value=('true'|'false');
Number: value = INT ;

Symbol: value= ID;

Value: Number|NonEnumerableValue;	
//EnumerableValue: Number ;
NonEnumerableValue:BoolVal|Symbol;
VarType:
	 'boolean' |'integer'|'symbolic' ;

ListOfValues:
	values+= Value (',' + values+= Value)*
;

ListOfIDs:
	ids+= ([VarDeclaration]) (',' + ids+= [VarDeclaration])*
;

BinOp:
	 'requires' |'excludes'|'optional' |'mandatory'
;

UnaryOp:
	 'optional' |'mandatory'
;
