/*
 * generated by Xtext 2.12.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PLhlclGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cVariablesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarsVarDeclarationParserRuleCall_3_0 = (RuleCall)cVarsAssignment_3.eContents().get(0);
		private final Keyword cConstraintsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConstraintsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstraintsConstraintParserRuleCall_5_0 = (RuleCall)cConstraintsAssignment_5.eContents().get(0);
		
		//Model:
		//	'model' name=ID 'variables:' vars+=VarDeclaration* 'constraints:' constraints+=Constraint*;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' name=ID 'variables:' vars+=VarDeclaration* 'constraints:' constraints+=Constraint*
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'variables:'
		public Keyword getVariablesKeyword_2() { return cVariablesKeyword_2; }
		
		//vars+=VarDeclaration*
		public Assignment getVarsAssignment_3() { return cVarsAssignment_3; }
		
		//VarDeclaration
		public RuleCall getVarsVarDeclarationParserRuleCall_3_0() { return cVarsVarDeclarationParserRuleCall_3_0; }
		
		//'constraints:'
		public Keyword getConstraintsKeyword_4() { return cConstraintsKeyword_4; }
		
		//constraints+=Constraint*
		public Assignment getConstraintsAssignment_5() { return cConstraintsAssignment_5; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_5_0() { return cConstraintsConstraintParserRuleCall_5_0; }
	}
	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cInstantiableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cInstantiableInstantiableKeyword_0_0_0 = (Keyword)cInstantiableAssignment_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMinAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cMinINTTerminalRuleCall_0_2_0 = (RuleCall)cMinAssignment_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cMaxAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cMaxINTTerminalRuleCall_0_4_0 = (RuleCall)cMaxAssignment_0_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeVarTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValuesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariantsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariantsVariantDeclarationParserRuleCall_3_1_0 = (RuleCall)cVariantsAssignment_3_1.eContents().get(0);
		
		////variable declaration
		//VarDeclaration:
		//	(instantiable='instantiable' '[' min=INT ',' max=INT ']')?
		//	type=VarType name=ID ('values:' variants=VariantDeclaration)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(instantiable='instantiable' '[' min=INT ',' max=INT ']')? type=VarType name=ID ('values:' variants=VariantDeclaration)?
		public Group getGroup() { return cGroup; }
		
		//(instantiable='instantiable' '[' min=INT ',' max=INT ']')?
		public Group getGroup_0() { return cGroup_0; }
		
		//instantiable='instantiable'
		public Assignment getInstantiableAssignment_0_0() { return cInstantiableAssignment_0_0; }
		
		//'instantiable'
		public Keyword getInstantiableInstantiableKeyword_0_0_0() { return cInstantiableInstantiableKeyword_0_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }
		
		//min=INT
		public Assignment getMinAssignment_0_2() { return cMinAssignment_0_2; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_0_2_0() { return cMinINTTerminalRuleCall_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }
		
		//max=INT
		public Assignment getMaxAssignment_0_4() { return cMaxAssignment_0_4; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_0_4_0() { return cMaxINTTerminalRuleCall_0_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_5() { return cRightSquareBracketKeyword_0_5; }
		
		//type=VarType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//VarType
		public RuleCall getTypeVarTypeParserRuleCall_1_0() { return cTypeVarTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('values:' variants=VariantDeclaration)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'values:'
		public Keyword getValuesKeyword_3_0() { return cValuesKeyword_3_0; }
		
		//variants=VariantDeclaration
		public Assignment getVariantsAssignment_3_1() { return cVariantsAssignment_3_1; }
		
		//VariantDeclaration
		public RuleCall getVariantsVariantDeclarationParserRuleCall_3_1_0() { return cVariantsVariantDeclarationParserRuleCall_3_1_0; }
	}
	public class VariantDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.VariantDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariantsIntervalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariantsEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Declaration of variants
		//VariantDeclaration:
		//	VariantsInterval | VariantsEnumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//VariantsInterval | VariantsEnumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariantsInterval
		public RuleCall getVariantsIntervalParserRuleCall_0() { return cVariantsIntervalParserRuleCall_0; }
		
		//VariantsEnumeration
		public RuleCall getVariantsEnumerationParserRuleCall_1() { return cVariantsEnumerationParserRuleCall_1; }
	}
	public class VariantsIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.VariantsInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartNumberParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndNumberParserRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//// intervals (only intervals of enumerables)
		//VariantsInterval:
		//	start=Number '..' end=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//start=Number '..' end=Number
		public Group getGroup() { return cGroup; }
		
		//start=Number
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//Number
		public RuleCall getStartNumberParserRuleCall_0_0() { return cStartNumberParserRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//end=Number
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }
		
		//Number
		public RuleCall getEndNumberParserRuleCall_2_0() { return cEndNumberParserRuleCall_2_0; }
	}
	public class VariantsEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.VariantsEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListListOfValuesParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// enumeration (enumeration of booleans, integers and symbols)
		//VariantsEnumeration:
		//	'[' list=ListOfValues ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' list=ListOfValues ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//list=ListOfValues
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//ListOfValues
		public RuleCall getListListOfValuesParserRuleCall_1_0() { return cListListOfValuesParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpConsExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		////variantsSet:
		////		 vars=('(') list +=  ListOfIDs  (')') 
		////	values?=  '[' '('   ListOfValues ')' (',' '(' ListOfValues')')+ ']'
		////;
		//Constraint:
		//	name=ID ':' exp=ConsExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' exp=ConsExpression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=ConsExpression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//ConsExpression
		public RuleCall getExpConsExpressionParserRuleCall_2_0() { return cExpConsExpressionParserRuleCall_2_0; }
	}
	public class ConsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.ConsExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDConsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefinementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFodaBinParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStructuralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFodaUNParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ConsExpression:
		//	IDCons | Refinement | Rule | FodaBin | Structural | FodaUN;
		@Override public ParserRule getRule() { return rule; }
		
		//IDCons | Refinement | Rule | FodaBin | Structural | FodaUN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDCons
		public RuleCall getIDConsParserRuleCall_0() { return cIDConsParserRuleCall_0; }
		
		//Refinement
		public RuleCall getRefinementParserRuleCall_1() { return cRefinementParserRuleCall_1; }
		
		//Rule
		public RuleCall getRuleParserRuleCall_2() { return cRuleParserRuleCall_2; }
		
		//FodaBin
		public RuleCall getFodaBinParserRuleCall_3() { return cFodaBinParserRuleCall_3; }
		
		//Structural
		public RuleCall getStructuralParserRuleCall_4() { return cStructuralParserRuleCall_4; }
		
		//FodaUN
		public RuleCall getFodaUNParserRuleCall_5() { return cFodaUNParserRuleCall_5; }
	}
	public class TerminalExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.TerminalExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConsExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cIDConsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TerminalExp Expression:
		//	'(' ConsExpression ')' | IDCons;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ConsExpression ')' | IDCons
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' ConsExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//ConsExpression
		public RuleCall getConsExpressionParserRuleCall_0_1() { return cConsExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//IDCons
		public RuleCall getIDConsParserRuleCall_1() { return cIDConsParserRuleCall_1; }
	}
	public class IDConsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.IDCons");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//IDCons:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class StructuralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.Structural");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructuralKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParentIDTerminalRuleCall_1_0 = (RuleCall)cParentAssignment_1.eContents().get(0);
		private final Keyword cVariantsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGroupAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGroupListOfIDsParserRuleCall_4_0 = (RuleCall)cGroupAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCardKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMinAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMinNumberParserRuleCall_6_2_0 = (RuleCall)cMinAssignment_6_2.eContents().get(0);
		private final Keyword cCommaKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cMaxAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cMaxNumberParserRuleCall_6_4_0 = (RuleCall)cMaxAssignment_6_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		
		///**
		// * an structural relation defines a parent-children relation including an optional cardinality
		// * 
		// */ Structural:
		//	'structural:' parent=ID 'variants:' '[' group=ListOfIDs ']' ('card:' '[' min=Number ',' max=Number ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'structural:' parent=ID 'variants:' '[' group=ListOfIDs ']' ('card:' '[' min=Number ',' max=Number ']')?
		public Group getGroup() { return cGroup; }
		
		//'structural:'
		public Keyword getStructuralKeyword_0() { return cStructuralKeyword_0; }
		
		//parent=ID
		public Assignment getParentAssignment_1() { return cParentAssignment_1; }
		
		//ID
		public RuleCall getParentIDTerminalRuleCall_1_0() { return cParentIDTerminalRuleCall_1_0; }
		
		//'variants:'
		public Keyword getVariantsKeyword_2() { return cVariantsKeyword_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//group=ListOfIDs
		public Assignment getGroupAssignment_4() { return cGroupAssignment_4; }
		
		//ListOfIDs
		public RuleCall getGroupListOfIDsParserRuleCall_4_0() { return cGroupListOfIDsParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//('card:' '[' min=Number ',' max=Number ']')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'card:'
		public Keyword getCardKeyword_6_0() { return cCardKeyword_6_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_1() { return cLeftSquareBracketKeyword_6_1; }
		
		//min=Number
		public Assignment getMinAssignment_6_2() { return cMinAssignment_6_2; }
		
		//Number
		public RuleCall getMinNumberParserRuleCall_6_2_0() { return cMinNumberParserRuleCall_6_2_0; }
		
		//','
		public Keyword getCommaKeyword_6_3() { return cCommaKeyword_6_3; }
		
		//max=Number
		public Assignment getMaxAssignment_6_4() { return cMaxAssignment_6_4; }
		
		//Number
		public RuleCall getMaxNumberParserRuleCall_6_4_0() { return cMaxNumberParserRuleCall_6_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_5() { return cRightSquareBracketKeyword_6_5; }
	}
	public class RefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.Refinement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarRefinementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetRefinementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Refinement:
		//	Assignment | VarRefinement | SetRefinement;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment | VarRefinement | SetRefinement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }
		
		//VarRefinement
		public RuleCall getVarRefinementParserRuleCall_1() { return cVarRefinementParserRuleCall_1; }
		
		//SetRefinement
		public RuleCall getSetRefinementParserRuleCall_2() { return cSetRefinementParserRuleCall_2; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIDTerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//	var=ID 'is' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//var=ID 'is' value=Value
		public Group getGroup() { return cGroup; }
		
		//var=ID
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_0_0() { return cVarIDTerminalRuleCall_0_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class VarRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.VarRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIDTerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesVariantDeclarationParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		
		//VarRefinement:
		//	var=ID 'in' values=VariantDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//var=ID 'in' values=VariantDeclaration
		public Group getGroup() { return cGroup; }
		
		//var=ID
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_0_0() { return cVarIDTerminalRuleCall_0_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//values=VariantDeclaration
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//VariantDeclaration
		public RuleCall getValuesVariantDeclarationParserRuleCall_2_0() { return cValuesVariantDeclarationParserRuleCall_2_0; }
	}
	public class SetRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.SetRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarsListOfIDsParserRuleCall_2_0 = (RuleCall)cVarsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cVariantsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cHeadAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cHeadListOfValuesParserRuleCall_7_0 = (RuleCall)cHeadAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cTailAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cTailListOfValuesParserRuleCall_9_2_0 = (RuleCall)cTailAssignment_9_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//SetRefinement:
		//	'vars:' '(' vars=ListOfIDs ')'
		//	'variants'
		//	'[' '(' head=ListOfValues ')' (',' '(' tail+=ListOfValues ')')+ ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'vars:' '(' vars=ListOfIDs ')' 'variants' '[' '(' head=ListOfValues ')' (',' '(' tail+=ListOfValues ')')+ ']'
		public Group getGroup() { return cGroup; }
		
		//'vars:'
		public Keyword getVarsKeyword_0() { return cVarsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//vars=ListOfIDs
		public Assignment getVarsAssignment_2() { return cVarsAssignment_2; }
		
		//ListOfIDs
		public RuleCall getVarsListOfIDsParserRuleCall_2_0() { return cVarsListOfIDsParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'variants'
		public Keyword getVariantsKeyword_4() { return cVariantsKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//head=ListOfValues
		public Assignment getHeadAssignment_7() { return cHeadAssignment_7; }
		
		//ListOfValues
		public RuleCall getHeadListOfValuesParserRuleCall_7_0() { return cHeadListOfValuesParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//(',' '(' tail+=ListOfValues ')')+
		public Group getGroup_9() { return cGroup_9; }
		
		//','
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }
		
		//tail+=ListOfValues
		public Assignment getTailAssignment_9_2() { return cTailAssignment_9_2; }
		
		//ListOfValues
		public RuleCall getTailListOfValuesParserRuleCall_9_2_0() { return cTailListOfValuesParserRuleCall_9_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionTerminalExpParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConsequenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConsequenceTerminalExpParserRuleCall_2_0 = (RuleCall)cConsequenceAssignment_2.eContents().get(0);
		
		//Rule:
		//	condition=TerminalExp '-->' consequence=TerminalExp;
		@Override public ParserRule getRule() { return rule; }
		
		//condition=TerminalExp '-->' consequence=TerminalExp
		public Group getGroup() { return cGroup; }
		
		//condition=TerminalExp
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//TerminalExp
		public RuleCall getConditionTerminalExpParserRuleCall_0_0() { return cConditionTerminalExpParserRuleCall_0_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1; }
		
		//consequence=TerminalExp
		public Assignment getConsequenceAssignment_2() { return cConsequenceAssignment_2; }
		
		//TerminalExp
		public RuleCall getConsequenceTerminalExpParserRuleCall_2_0() { return cConsequenceTerminalExpParserRuleCall_2_0; }
	}
	public class FodaUNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.FodaUN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVar1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVar1VarDeclarationCrossReference_0_0 = (CrossReference)cVar1Assignment_0.eContents().get(0);
		private final RuleCall cVar1VarDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVar1VarDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpUnaryOpParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		
		//FodaUN:
		//	var1=[VarDeclaration] 'is' op=UnaryOp;
		@Override public ParserRule getRule() { return rule; }
		
		//var1=[VarDeclaration] 'is' op=UnaryOp
		public Group getGroup() { return cGroup; }
		
		//var1=[VarDeclaration]
		public Assignment getVar1Assignment_0() { return cVar1Assignment_0; }
		
		//[VarDeclaration]
		public CrossReference getVar1VarDeclarationCrossReference_0_0() { return cVar1VarDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getVar1VarDeclarationIDTerminalRuleCall_0_0_1() { return cVar1VarDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//op=UnaryOp
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//UnaryOp
		public RuleCall getOpUnaryOpParserRuleCall_2_0() { return cOpUnaryOpParserRuleCall_2_0; }
	}
	public class FodaBinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.FodaBin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVar1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVar1VarDeclarationCrossReference_0_0 = (CrossReference)cVar1Assignment_0.eContents().get(0);
		private final RuleCall cVar1VarDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVar1VarDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpBinOpParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cVar2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVar2VarDeclarationCrossReference_2_0 = (CrossReference)cVar2Assignment_2.eContents().get(0);
		private final RuleCall cVar2VarDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cVar2VarDeclarationCrossReference_2_0.eContents().get(1);
		
		//FodaBin:
		//	var1=[VarDeclaration] op=BinOp var2=[VarDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//var1=[VarDeclaration] op=BinOp var2=[VarDeclaration]
		public Group getGroup() { return cGroup; }
		
		//var1=[VarDeclaration]
		public Assignment getVar1Assignment_0() { return cVar1Assignment_0; }
		
		//[VarDeclaration]
		public CrossReference getVar1VarDeclarationCrossReference_0_0() { return cVar1VarDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getVar1VarDeclarationIDTerminalRuleCall_0_0_1() { return cVar1VarDeclarationIDTerminalRuleCall_0_0_1; }
		
		//op=BinOp
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//BinOp
		public RuleCall getOpBinOpParserRuleCall_1_0() { return cOpBinOpParserRuleCall_1_0; }
		
		//var2=[VarDeclaration]
		public Assignment getVar2Assignment_2() { return cVar2Assignment_2; }
		
		//[VarDeclaration]
		public CrossReference getVar2VarDeclarationCrossReference_2_0() { return cVar2VarDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getVar2VarDeclarationIDTerminalRuleCall_2_0_1() { return cVar2VarDeclarationIDTerminalRuleCall_2_0_1; }
	}
	public class BoolValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.BoolVal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		////syntactic categories
		////Values
		//BoolVal:
		//	value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.Number");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Number:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class SymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.Symbol");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Symbol:
		//	value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonEnumerableValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	Number | NonEnumerableValue;
		@Override public ParserRule getRule() { return rule; }
		
		//Number | NonEnumerableValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }
		
		//NonEnumerableValue
		public RuleCall getNonEnumerableValueParserRuleCall_1() { return cNonEnumerableValueParserRuleCall_1; }
	}
	public class NonEnumerableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.NonEnumerableValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolValParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSymbolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////EnumerableValue: Number ;
		//NonEnumerableValue:
		//	BoolVal | Symbol;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolVal | Symbol
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoolVal
		public RuleCall getBoolValParserRuleCall_0() { return cBoolValParserRuleCall_0; }
		
		//Symbol
		public RuleCall getSymbolParserRuleCall_1() { return cSymbolParserRuleCall_1; }
	}
	public class VarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.VarType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSymbolicKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//VarType:
		//	'boolean' | 'integer' | 'symbolic';
		@Override public ParserRule getRule() { return rule; }
		
		//'boolean' | 'integer' | 'symbolic'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'boolean'
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }
		
		//'integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//'symbolic'
		public Keyword getSymbolicKeyword_2() { return cSymbolicKeyword_2; }
	}
	public class ListOfValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.ListOfValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesValueParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//ListOfValues:
		//	values+=Value (','+ values+=Value)*;
		@Override public ParserRule getRule() { return rule; }
		
		//values+=Value (','+ values+=Value)*
		public Group getGroup() { return cGroup; }
		
		//values+=Value
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_0_0() { return cValuesValueParserRuleCall_0_0; }
		
		//(','+ values+=Value)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','+
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//values+=Value
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_1_1_0() { return cValuesValueParserRuleCall_1_1_0; }
	}
	public class ListOfIDsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.ListOfIDs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIdsVarDeclarationCrossReference_0_0 = (CrossReference)cIdsAssignment_0.eContents().get(0);
		private final RuleCall cIdsVarDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cIdsVarDeclarationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cIdsVarDeclarationCrossReference_1_1_0 = (CrossReference)cIdsAssignment_1_1.eContents().get(0);
		private final RuleCall cIdsVarDeclarationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cIdsVarDeclarationCrossReference_1_1_0.eContents().get(1);
		
		//ListOfIDs:
		//	ids+=[VarDeclaration] (','+ ids+=[VarDeclaration])*;
		@Override public ParserRule getRule() { return rule; }
		
		//ids+=[VarDeclaration] (','+ ids+=[VarDeclaration])*
		public Group getGroup() { return cGroup; }
		
		//ids+=[VarDeclaration]
		public Assignment getIdsAssignment_0() { return cIdsAssignment_0; }
		
		//[VarDeclaration]
		public CrossReference getIdsVarDeclarationCrossReference_0_0() { return cIdsVarDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getIdsVarDeclarationIDTerminalRuleCall_0_0_1() { return cIdsVarDeclarationIDTerminalRuleCall_0_0_1; }
		
		//(','+ ids+=[VarDeclaration])*
		public Group getGroup_1() { return cGroup_1; }
		
		//','+
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ids+=[VarDeclaration]
		public Assignment getIdsAssignment_1_1() { return cIdsAssignment_1_1; }
		
		//[VarDeclaration]
		public CrossReference getIdsVarDeclarationCrossReference_1_1_0() { return cIdsVarDeclarationCrossReference_1_1_0; }
		
		//ID
		public RuleCall getIdsVarDeclarationIDTerminalRuleCall_1_1_0_1() { return cIdsVarDeclarationIDTerminalRuleCall_1_1_0_1; }
	}
	public class BinOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.BinOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExcludesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOptionalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMandatoryKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BinOp:
		//	'requires' | 'excludes' | 'optional' | 'mandatory';
		@Override public ParserRule getRule() { return rule; }
		
		//'requires' | 'excludes' | 'optional' | 'mandatory'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'requires'
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }
		
		//'excludes'
		public Keyword getExcludesKeyword_1() { return cExcludesKeyword_1; }
		
		//'optional'
		public Keyword getOptionalKeyword_2() { return cOptionalKeyword_2; }
		
		//'mandatory'
		public Keyword getMandatoryKeyword_3() { return cMandatoryKeyword_3; }
	}
	public class UnaryOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.PLhlcl.UnaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOptionalKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMandatoryKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UnaryOp:
		//	'optional' | 'mandatory';
		@Override public ParserRule getRule() { return rule; }
		
		//'optional' | 'mandatory'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'optional'
		public Keyword getOptionalKeyword_0() { return cOptionalKeyword_0; }
		
		//'mandatory'
		public Keyword getMandatoryKeyword_1() { return cMandatoryKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final VarDeclarationElements pVarDeclaration;
	private final VariantDeclarationElements pVariantDeclaration;
	private final VariantsIntervalElements pVariantsInterval;
	private final VariantsEnumerationElements pVariantsEnumeration;
	private final ConstraintElements pConstraint;
	private final ConsExpressionElements pConsExpression;
	private final TerminalExpElements pTerminalExp;
	private final IDConsElements pIDCons;
	private final StructuralElements pStructural;
	private final RefinementElements pRefinement;
	private final AssignmentElements pAssignment;
	private final VarRefinementElements pVarRefinement;
	private final SetRefinementElements pSetRefinement;
	private final RuleElements pRule;
	private final FodaUNElements pFodaUN;
	private final FodaBinElements pFodaBin;
	private final BoolValElements pBoolVal;
	private final NumberElements pNumber;
	private final SymbolElements pSymbol;
	private final ValueElements pValue;
	private final NonEnumerableValueElements pNonEnumerableValue;
	private final VarTypeElements pVarType;
	private final ListOfValuesElements pListOfValues;
	private final ListOfIDsElements pListOfIDs;
	private final BinOpElements pBinOp;
	private final UnaryOpElements pUnaryOp;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PLhlclGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pVariantDeclaration = new VariantDeclarationElements();
		this.pVariantsInterval = new VariantsIntervalElements();
		this.pVariantsEnumeration = new VariantsEnumerationElements();
		this.pConstraint = new ConstraintElements();
		this.pConsExpression = new ConsExpressionElements();
		this.pTerminalExp = new TerminalExpElements();
		this.pIDCons = new IDConsElements();
		this.pStructural = new StructuralElements();
		this.pRefinement = new RefinementElements();
		this.pAssignment = new AssignmentElements();
		this.pVarRefinement = new VarRefinementElements();
		this.pSetRefinement = new SetRefinementElements();
		this.pRule = new RuleElements();
		this.pFodaUN = new FodaUNElements();
		this.pFodaBin = new FodaBinElements();
		this.pBoolVal = new BoolValElements();
		this.pNumber = new NumberElements();
		this.pSymbol = new SymbolElements();
		this.pValue = new ValueElements();
		this.pNonEnumerableValue = new NonEnumerableValueElements();
		this.pVarType = new VarTypeElements();
		this.pListOfValues = new ListOfValuesElements();
		this.pListOfIDs = new ListOfIDsElements();
		this.pBinOp = new BinOpElements();
		this.pUnaryOp = new UnaryOpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.PLhlcl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'model' name=ID 'variables:' vars+=VarDeclaration* 'constraints:' constraints+=Constraint*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////variable declaration
	//VarDeclaration:
	//	(instantiable='instantiable' '[' min=INT ',' max=INT ']')?
	//	type=VarType name=ID ('values:' variants=VariantDeclaration)?;
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}
	
	////Declaration of variants
	//VariantDeclaration:
	//	VariantsInterval | VariantsEnumeration;
	public VariantDeclarationElements getVariantDeclarationAccess() {
		return pVariantDeclaration;
	}
	
	public ParserRule getVariantDeclarationRule() {
		return getVariantDeclarationAccess().getRule();
	}
	
	//// intervals (only intervals of enumerables)
	//VariantsInterval:
	//	start=Number '..' end=Number;
	public VariantsIntervalElements getVariantsIntervalAccess() {
		return pVariantsInterval;
	}
	
	public ParserRule getVariantsIntervalRule() {
		return getVariantsIntervalAccess().getRule();
	}
	
	//// enumeration (enumeration of booleans, integers and symbols)
	//VariantsEnumeration:
	//	'[' list=ListOfValues ']';
	public VariantsEnumerationElements getVariantsEnumerationAccess() {
		return pVariantsEnumeration;
	}
	
	public ParserRule getVariantsEnumerationRule() {
		return getVariantsEnumerationAccess().getRule();
	}
	
	////variantsSet:
	////		 vars=('(') list +=  ListOfIDs  (')') 
	////	values?=  '[' '('   ListOfValues ')' (',' '(' ListOfValues')')+ ']'
	////;
	//Constraint:
	//	name=ID ':' exp=ConsExpression;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//ConsExpression:
	//	IDCons | Refinement | Rule | FodaBin | Structural | FodaUN;
	public ConsExpressionElements getConsExpressionAccess() {
		return pConsExpression;
	}
	
	public ParserRule getConsExpressionRule() {
		return getConsExpressionAccess().getRule();
	}
	
	//TerminalExp Expression:
	//	'(' ConsExpression ')' | IDCons;
	public TerminalExpElements getTerminalExpAccess() {
		return pTerminalExp;
	}
	
	public ParserRule getTerminalExpRule() {
		return getTerminalExpAccess().getRule();
	}
	
	//IDCons:
	//	name=ID;
	public IDConsElements getIDConsAccess() {
		return pIDCons;
	}
	
	public ParserRule getIDConsRule() {
		return getIDConsAccess().getRule();
	}
	
	///**
	// * an structural relation defines a parent-children relation including an optional cardinality
	// * 
	// */ Structural:
	//	'structural:' parent=ID 'variants:' '[' group=ListOfIDs ']' ('card:' '[' min=Number ',' max=Number ']')?;
	public StructuralElements getStructuralAccess() {
		return pStructural;
	}
	
	public ParserRule getStructuralRule() {
		return getStructuralAccess().getRule();
	}
	
	//Refinement:
	//	Assignment | VarRefinement | SetRefinement;
	public RefinementElements getRefinementAccess() {
		return pRefinement;
	}
	
	public ParserRule getRefinementRule() {
		return getRefinementAccess().getRule();
	}
	
	//Assignment:
	//	var=ID 'is' value=Value;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//VarRefinement:
	//	var=ID 'in' values=VariantDeclaration;
	public VarRefinementElements getVarRefinementAccess() {
		return pVarRefinement;
	}
	
	public ParserRule getVarRefinementRule() {
		return getVarRefinementAccess().getRule();
	}
	
	//SetRefinement:
	//	'vars:' '(' vars=ListOfIDs ')'
	//	'variants'
	//	'[' '(' head=ListOfValues ')' (',' '(' tail+=ListOfValues ')')+ ']';
	public SetRefinementElements getSetRefinementAccess() {
		return pSetRefinement;
	}
	
	public ParserRule getSetRefinementRule() {
		return getSetRefinementAccess().getRule();
	}
	
	//Rule:
	//	condition=TerminalExp '-->' consequence=TerminalExp;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//FodaUN:
	//	var1=[VarDeclaration] 'is' op=UnaryOp;
	public FodaUNElements getFodaUNAccess() {
		return pFodaUN;
	}
	
	public ParserRule getFodaUNRule() {
		return getFodaUNAccess().getRule();
	}
	
	//FodaBin:
	//	var1=[VarDeclaration] op=BinOp var2=[VarDeclaration];
	public FodaBinElements getFodaBinAccess() {
		return pFodaBin;
	}
	
	public ParserRule getFodaBinRule() {
		return getFodaBinAccess().getRule();
	}
	
	////syntactic categories
	////Values
	//BoolVal:
	//	value=('true' | 'false');
	public BoolValElements getBoolValAccess() {
		return pBoolVal;
	}
	
	public ParserRule getBoolValRule() {
		return getBoolValAccess().getRule();
	}
	
	//Number:
	//	value=INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Symbol:
	//	value=ID;
	public SymbolElements getSymbolAccess() {
		return pSymbol;
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}
	
	//Value:
	//	Number | NonEnumerableValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	////EnumerableValue: Number ;
	//NonEnumerableValue:
	//	BoolVal | Symbol;
	public NonEnumerableValueElements getNonEnumerableValueAccess() {
		return pNonEnumerableValue;
	}
	
	public ParserRule getNonEnumerableValueRule() {
		return getNonEnumerableValueAccess().getRule();
	}
	
	//VarType:
	//	'boolean' | 'integer' | 'symbolic';
	public VarTypeElements getVarTypeAccess() {
		return pVarType;
	}
	
	public ParserRule getVarTypeRule() {
		return getVarTypeAccess().getRule();
	}
	
	//ListOfValues:
	//	values+=Value (','+ values+=Value)*;
	public ListOfValuesElements getListOfValuesAccess() {
		return pListOfValues;
	}
	
	public ParserRule getListOfValuesRule() {
		return getListOfValuesAccess().getRule();
	}
	
	//ListOfIDs:
	//	ids+=[VarDeclaration] (','+ ids+=[VarDeclaration])*;
	public ListOfIDsElements getListOfIDsAccess() {
		return pListOfIDs;
	}
	
	public ParserRule getListOfIDsRule() {
		return getListOfIDsAccess().getRule();
	}
	
	//BinOp:
	//	'requires' | 'excludes' | 'optional' | 'mandatory';
	public BinOpElements getBinOpAccess() {
		return pBinOp;
	}
	
	public ParserRule getBinOpRule() {
		return getBinOpAccess().getRule();
	}
	
	//UnaryOp:
	//	'optional' | 'mandatory';
	public UnaryOpElements getUnaryOpAccess() {
		return pUnaryOp;
	}
	
	public ParserRule getUnaryOpRule() {
		return getUnaryOpAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
