package com.coffee.generator.XCSP3

import com.coffee.pLEC.Model
import com.coffee.pLEC.Structural
import com.coffee.pLEC.ConsExpression
import com.coffee.pLEC.Rule
import com.coffee.pLEC.FodaBin
import com.coffee.pLEC.FodaUN
import com.coffee.pLEC.Attributes
import com.coffee.generator.TypeOfProblem
import com.coffee.generator.CodeFactory

//data structure imports

import com.coffee.generator.AbstractGenerator

/**
 * Code generator for parse from the PLEC language to the XML Constraint Satisfaction 
 * Problem specification (XCSP)
 * This class implements the Generator interface
 * @author Angela Villota
 * @version PLEC V3
 * August 2018
 */

class XCSP3Generator extends AbstractGenerator{


	/**
	 * object to obtain the constraints regarding the type of the problem
	 */
	private XCSP3Factory factory;
	
	
	/**
	 * Constructor method 
	 * @param the name of the model
	 */
	new(String name, TypeOfProblem type) {
		super(name, type)
		switch typeOfProblem{
			 case SAT: factory= new SATFactory(type)
			 case CSP: factory= new CSPFactory(type)
			 case COP: factory= new SATFactory(type)
		}
		setFactory(factory)

	}
	
	override parseModel(Model model) {
		'''
		«factory.getHeader» 
		«factory.getVarLabel»
		«putAutogeneratedVars()»
		«parseVariables(model)»
		«factory.getVarLabelClose»
		«factory.getConsLabel»
		«putAutogeneratedCons()»
		«parseConstraints(model)»
		«factory.getConsLabelClose»
		«factory.getStrategy()»
		«factory.getFooter»
		'''
	}
	
	override parseRule(Rule rule) {
		''' '''
	}
	
	override parseAttributes(Attributes exp) {
		''' '''
	}
	
	override putAutogeneratedVars() {
		''' '''
	}
	
	override putAutogeneratedCons() {
		''' '''
	}
	
	override parseConstraint(String id, ConsExpression exp) {
		'''
		<intension id= "«id»" >
			«parseExpression(exp)»
		</intension>
		'''
	}


	
}