/*
 * generated by Xtext 2.12.0
 */
package com.coffee.generator

// autogenerated imports
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext




//Language imports
import com.coffee.pLEC.Model
import com.coffee.generator.THLCL.THLCLGenerator

/**
 * Class autogenerated by xtext and edited to define the code generator
 * for the Product Line Engineering Constraints Language
 * @author Angela Villota
 * @version PLEC V3
 * August 2018
 */
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PLECGenerator extends AbstractGenerator {
	
	/**
	 * Name of the PL model 
	 */
	private String modelName
	private TypeOfProblem typeOfProblem


	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// obtaining the name of the model from the source code
		modelName= modelName(resource.contents.head as Model)
		
		//obtaining the type of problem
		setTypeOfProblem()
		
		//generating an intermediate file with the textual HLCL representation
		fsa.generateFile(modelName+".hlcl", toTHLCL(resource.contents.head as Model))
		
		//generating an intermediate file with the textual XCSP3 representation
		fsa.generateFile(modelName+".xcsp3", toXCSP3(resource.contents.head as Model))
	}
	
	/**
	 * Method to obtain the name of the model
	 * @param modes is of type Model 
	 * @retuns String name with the name of the model
	 */
	def modelName(Model model) {
		var name = model.name.toFirstUpper
		return name
	}
	
	def setTypeOfProblem(){
		'''
		en este metodo se debe identificar el tipo de problema
		el problema es boolean si:
		1. no existen variables instanciables
		2. no existen variables enteras
		3. no existen relaciones estucturales con cardinalidades distintas a: 0..1 y 1..1
		'''
	}
	
	def toTHLCL(Model model) {
		//en este metodo se debe  instanciar el generador de THLCL 
		//se les manda como parámetro el tipo de problema. 
		var THLCLGenerator thlcl= new THLCLGenerator (modelName,  typeOfProblem)
		thlcl.parseModel(model)
		
	}
		def toXCSP3(Model model) '''
		en este metodo se debe identificar el tipo de problema
		luego instanciar el generador de THLCL y el generador de XCSP3
		a ambos objetos se les manda como parámetro el tipo de problema. 
		
	'''
	
}
