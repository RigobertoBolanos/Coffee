package com.coffee.generator.XCSP3;

import com.coffee.generator.AbstractGenerator;
import com.coffee.generator.TypeOfProblem;
import com.coffee.generator.XCSP3.CSPFactory;
import com.coffee.generator.XCSP3.SATFactory;
import com.coffee.generator.XCSP3.XCSP3Factory;
import com.coffee.pLEC.Attributes;
import com.coffee.pLEC.ConsExpression;
import com.coffee.pLEC.Model;
import com.coffee.pLEC.Rule;
import org.eclipse.xtend2.lib.StringConcatenation;

/**
 * Code generator for parse from the PLEC language to the XML Constraint Satisfaction
 * Problem specification (XCSP)
 * This class implements the Generator interface
 * @author Angela Villota
 * @version PLEC V3
 * August 2018
 */
@SuppressWarnings("all")
public class XCSP3Generator extends AbstractGenerator {
  /**
   * object to obtain the constraints regarding the type of the problem
   */
  private XCSP3Factory factory;
  
  /**
   * Constructor method
   * @param the name of the model
   */
  public XCSP3Generator(final String name, final TypeOfProblem type) {
    super(name, type);
    TypeOfProblem _typeOfProblem = this.getTypeOfProblem();
    if (_typeOfProblem != null) {
      switch (_typeOfProblem) {
        case SAT:
          SATFactory _sATFactory = new SATFactory(type);
          this.factory = _sATFactory;
          break;
        case CSP:
          CSPFactory _cSPFactory = new CSPFactory(type);
          this.factory = _cSPFactory;
          break;
        case COP:
          SATFactory _sATFactory_1 = new SATFactory(type);
          this.factory = _sATFactory_1;
          break;
        default:
          break;
      }
    }
    this.setFactory(this.factory);
  }
  
  @Override
  public CharSequence parseModel(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _header = this.factory.getHeader();
    _builder.append(_header);
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    CharSequence _varLabel = this.factory.getVarLabel();
    _builder.append(_varLabel);
    _builder.newLineIfNotEmpty();
    CharSequence _parseVariables = this.parseVariables(model);
    _builder.append(_parseVariables);
    _builder.newLineIfNotEmpty();
    String _varLabelClose = this.factory.getVarLabelClose();
    _builder.append(_varLabelClose);
    _builder.newLineIfNotEmpty();
    CharSequence _consLabel = this.factory.getConsLabel();
    _builder.append(_consLabel);
    _builder.newLineIfNotEmpty();
    CharSequence _putAutogeneratedCons = this.putAutogeneratedCons();
    _builder.append(_putAutogeneratedCons);
    _builder.newLineIfNotEmpty();
    CharSequence _parseConstraints = this.parseConstraints(model);
    _builder.append(_parseConstraints);
    _builder.newLineIfNotEmpty();
    String _consLabelClose = this.factory.getConsLabelClose();
    _builder.append(_consLabelClose);
    _builder.newLineIfNotEmpty();
    CharSequence _strategy = this.factory.getStrategy();
    _builder.append(_strategy);
    _builder.newLineIfNotEmpty();
    String _footer = this.factory.getFooter();
    _builder.append(_footer);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  @Override
  public CharSequence parseRule(final Rule rule) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    return _builder;
  }
  
  @Override
  public CharSequence parseAttributes(final Attributes exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    return _builder;
  }
  
  @Override
  public CharSequence putAutogeneratedCons() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    return _builder;
  }
  
  @Override
  public CharSequence parseConstraint(final String id, final ConsExpression exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<intension id= \"");
    _builder.append(id);
    _builder.append("\" >");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _parseExpression = this.parseExpression(exp);
    _builder.append(_parseExpression, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("</intension>");
    _builder.newLine();
    return _builder;
  }
}
