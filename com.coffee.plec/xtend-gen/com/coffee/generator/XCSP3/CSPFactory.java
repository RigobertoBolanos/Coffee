package com.coffee.generator.XCSP3;

import com.coffee.generator.TypeOfProblem;
import com.coffee.generator.XCSP3.XCSP3Factory;
import com.coffee.pLEC.Structural;
import com.coffee.pLEC.VarDeclaration;
import java.util.ArrayList;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class CSPFactory extends XCSP3Factory {
  /**
   * List with the constraints autogenerated for dealing with feature instances
   */
  private ArrayList<String> clonConstraints;
  
  public CSPFactory(final TypeOfProblem type) {
    super(type);
    ArrayList<String> _arrayList = new ArrayList<String>();
    this.clonConstraints = _arrayList;
  }
  
  @Override
  public CharSequence getVariable(final VarDeclaration variable) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<var id=\"");
    String _name = variable.getName();
    _builder.append(_name);
    _builder.append("\">");
    CharSequence _valuesDeclaration = this.valuesDeclaration(variable, variable.getVariants());
    _builder.append(_valuesDeclaration);
    _builder.append("</var>");
    _builder.newLineIfNotEmpty();
    {
      boolean _not = (!((variable.getMin() == null) && (variable.getMax() == null)));
      if (_not) {
        String _parseCloneVariables = this.parseCloneVariables(variable);
        _builder.append(_parseCloneVariables);
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String parseCloneVariables(final VarDeclaration variable) {
    String _xblockexpression = null;
    {
      String declaration = "";
      String left = "";
      String right = "";
      String sum = "add(";
      for (int i = 1; (i <= variable.getMax().getValue()); i = (i + 1)) {
        {
          String _declaration = declaration;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("<var id= \"");
          String _name = variable.getName();
          String _plus = (_name + Integer.valueOf(i));
          _builder.append(_plus);
          _builder.append("\">\" 0 1 </var>");
          declaration = (_declaration + _builder);
          String _sum = sum;
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append(" ");
          String _name_1 = variable.getName();
          String _plus_1 = (_name_1 + Integer.valueOf(i));
          _builder_1.append(_plus_1, " ");
          _builder_1.append(", ");
          sum = (_sum + _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("imp(");
          String _name_2 = variable.getName();
          String _plus_2 = (_name_2 + Integer.valueOf(i));
          _builder_2.append(_plus_2);
          _builder_2.append(", ");
          String _name_3 = variable.getName();
          _builder_2.append(_name_3);
          _builder_2.append(")");
          String implies = _builder_2.toString();
          this.clonConstraints.add(implies);
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("le(");
      int _value = variable.getMin().getValue();
      _builder.append(_value);
      _builder.append(", ");
      int _length = sum.length();
      int _minus = (_length - 2);
      String _substring = sum.substring(0, _minus);
      _builder.append(_substring);
      _builder.append(")");
      left = _builder.toString();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("ge(");
      int _value_1 = variable.getMax().getValue();
      _builder_1.append(_value_1);
      _builder_1.append(",");
      int _length_1 = sum.length();
      int _minus_1 = (_length_1 - 2);
      String _substring_1 = sum.substring(0, _minus_1);
      _builder_1.append(_substring_1);
      _builder_1.append(")");
      right = _builder_1.toString();
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("imp(");
      String _name = variable.getName();
      _builder_2.append(_name);
      _builder_2.append(", and(");
      _builder_2.append(left);
      _builder_2.append(", ");
      _builder_2.append(right);
      _builder_2.append("))");
      String constraint = _builder_2.toString();
      this.clonConstraints.add(constraint);
      _xblockexpression = declaration;
    }
    return _xblockexpression;
  }
  
  @Override
  public CharSequence getOptional(final VarDeclaration parent, final VarDeclaration child) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ge(");
    String _name = parent.getName();
    _builder.append(_name);
    _builder.append(", ");
    String _name_1 = child.getName();
    _builder.append(_name_1);
    _builder.append(")");
    return _builder;
  }
  
  @Override
  public CharSequence getMandatory(final VarDeclaration parent, final VarDeclaration child) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("eq(");
    String _name = parent.getName();
    _builder.append(_name);
    _builder.append(", ");
    String _name_1 = child.getName();
    _builder.append(_name_1);
    _builder.append(")");
    return _builder;
  }
  
  @Override
  public CharSequence getExcludes(final VarDeclaration left, final VarDeclaration right) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("le(add(");
    String _name = left.getName();
    _builder.append(_name);
    _builder.append(", ");
    String _name_1 = right.getName();
    _builder.append(_name_1);
    _builder.append("), 1) ");
    return _builder;
  }
  
  @Override
  public CharSequence getRequires(final VarDeclaration left, final VarDeclaration right) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("imp(");
    String _name = left.getName();
    _builder.append(_name);
    _builder.append(",gt(");
    String _name_1 = right.getName();
    _builder.append(_name_1);
    _builder.append(",1) )");
    return _builder;
  }
  
  @Override
  public CharSequence getGroupCardinality(final Structural exp, final Map<String, VarDeclaration> parents) {
    String _xblockexpression = null;
    {
      String idsSum = "add(";
      String implies = "";
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("and(");
      String output = _builder.toString();
      EList<VarDeclaration> _ids = exp.getGroup().getIds();
      for (final VarDeclaration child : _ids) {
        {
          String _implies = implies;
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("imp(");
          String _name = child.getName();
          _builder_1.append(_name);
          _builder_1.append(", ");
          String _name_1 = exp.getParent().getName();
          _builder_1.append(_name_1);
          _builder_1.append("),");
          implies = (_implies + _builder_1);
          String _idsSum = idsSum;
          String _name_2 = child.getName();
          String _plus = (_name_2 + ", ");
          idsSum = (_idsSum + _plus);
          parents.put(child.getName(), exp.getParent());
        }
      }
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("le(");
      int _length = idsSum.length();
      int _minus = (_length - 2);
      String _substring = idsSum.substring(0, _minus);
      _builder_1.append(_substring);
      _builder_1.append("), ");
      int _value = exp.getMin().getValue();
      _builder_1.append(_value);
      _builder_1.append(")");
      final String sumLessThan = _builder_1.toString();
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("ge(");
      int _length_1 = idsSum.length();
      int _minus_1 = (_length_1 - 2);
      String _substring_1 = idsSum.substring(0, _minus_1);
      _builder_2.append(_substring_1);
      _builder_2.append("), ");
      int _value_1 = exp.getMax().getValue();
      _builder_2.append(_value_1);
      _builder_2.append(")");
      final String sumGreaterThan = _builder_2.toString();
      String _output = output;
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append(implies);
      _builder_3.append(" imp(ge(");
      String _name = exp.getParent().getName();
      _builder_3.append(_name);
      _builder_3.append(", 1), and(");
      _builder_3.append(sumLessThan);
      _builder_3.append(", ");
      _builder_3.append(sumGreaterThan);
      _builder_3.append(")) )");
      _xblockexpression = output = (_output + _builder_3);
    }
    return _xblockexpression;
  }
}
