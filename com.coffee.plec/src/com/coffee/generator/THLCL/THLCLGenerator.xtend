package com.coffee.generator.THLCL

import com.coffee.pLEC.Model
import com.coffee.pLEC.ConsExpression
import com.coffee.pLEC.Rule
import com.coffee.pLEC.Attributes
import com.coffee.generator.TypeOfProblem
import com.coffee.generator.CodeFactory

//data structure imports
import com.coffee.generator.AbstractGenerator

/**
 * Code generator for parse from the PLEC language to the Textual High Level Constraint
 * Language (THLCL)
 * This class implements the Generator interface
 * @author Angela Villota
 * @version PLEC V3
 * August 2018
 */

class THLCLGenerator extends AbstractGenerator{
	/**
	 * object to obtain the program sentences regarding the type of the problem
	 */
	private CodeFactory factory;
	
	
	/**
	 * Constructor method 
	 * @param the name of the model
	 */
	new(String name, TypeOfProblem type) {
		super(name, type)
		switch typeOfProblem{
			 case SAT: factory= new BooleanFactory()
			 case CSP: factory= new IntegerFactory()
			 case COP: factory= new OptimizationFactory()
		}
		setFactory(factory)
	}

	/**
	 * Method to obtain a sequence of characters containing the 
	 * constraint program in the Textual HLCL language
	 * @param model is an ECORE syntax tree with the program
	 * this syntax tree should be traversed. 
	 */
	override parseModel(Model model) {
		'''
		«factory.getHeader» «modelName»
		«factory.getVarLabel»
		«putAutogeneratedVars()»
		«parseVariables(model)»
		«factory.getConsLabel»
		«putAutogeneratedCons()»
		«parseConstraints(model)»
		«factory.getStrategy()»
		'''
	}
	
	override parseConstraint(String id, ConsExpression exp){
		'''
		«id»: «parseExpression(exp)»
		'''	
	}
	
	/**
	 * @param rule is an expression of type rule
	 */
	override parseRule(Rule rule) {
		'''
		«val left= parseExpression(rule.condition as ConsExpression)»
		«val right= parseExpression (rule.consequence as ConsExpression)»
		(«left») => («right»)
		'''
	}
	
	/**
	 * Falta considerar el caso cuando hay más de un atributo, 
	 * es decir cuando la lista tiene más de un elemento
	 */
	override parseAttributes(Attributes exp) {
		'''
		«val left= exp.var1.name»
		«FOR att : exp.att.ids»
			«left» <=> («att.name» > 0)
		«ENDFOR»
		'''
	}
	
	
	override putAutogeneratedVars() {
		'''
		boolean «modelName»
		'''
	}
	
	override putAutogeneratedCons() {
		'''
		C_«modelName» : «modelName» = 1
		«factory.getClonConstraints()»
		'''
	}
	
}