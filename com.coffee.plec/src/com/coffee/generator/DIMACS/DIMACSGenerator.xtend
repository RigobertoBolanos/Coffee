package com.coffee.generator.DIMACS

import com.coffee.generator.AbstractGenerator
import com.coffee.pLEC.Model
import com.coffee.pLEC.Rule
import com.coffee.pLEC.Attributes
import com.coffee.pLEC.ConsExpression
import com.coffee.generator.TypeOfProblem

/**
 * Code generator for parsing from the PLEC language to the DIMACS format
 * This class implements the Generator interface
 * @author Angela Villota
 * @version PLEC V3
 * September 2018
 */

class DIMACSGenerator extends AbstractGenerator {
	
	/**
	 * object to obtain the constraints regarding the type of the problem
	 */
	private  DIMACSFactory factory;
	
	/**
	 * number of clauses in the problem
	 */
	protected int numClauses
	

	
	/**
	 * Constructor method 
	 * @param the name of the model
	 */
	new(String name, TypeOfProblem type) {
		super(name, type)
		factory = new DIMACSFactory()
		setFactory(factory)
	}
	
	override parseModel(Model model) {
		
		var program=
		'''
		c
		c DIMACS code generated using the Coffee framework
		c
		'''
		parseVariables(model)
		var clauses= parseConstraints(model)
		program= 
		'''
		p cnf «factory.getNumClauses» «factory.getNumVars»
		«clauses» 
		'''
		program
	}
	
	override parseRule(Rule rule) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	override parseAttributes(Attributes exp) {
		throw new UnsupportedOperationException("Error: no attributes should be included")
	}
		
	override putAutogeneratedCons() {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	/**
	 * This method traverses the list of variables to parse each declaration
	 * The declaration is made by the factory 
	 * @param model
	 */
	override parseVariables(Model model) {
		for(variable: model.vars){
			factory.getVariable(variable)
		}
		''''''
	}
	
	override parseConstraint(String id, ConsExpression exp) {
		parseExpression(exp)
	}
	

	
}