/**
 * generated by Xtext 2.12.0
 */
package com.coffee.pLEC.impl;

import com.coffee.pLEC.Assignment;
import com.coffee.pLEC.Attributes;
import com.coffee.pLEC.BoolVal;
import com.coffee.pLEC.ConsExpression;
import com.coffee.pLEC.Constraint;
import com.coffee.pLEC.Expression;
import com.coffee.pLEC.FodaBin;
import com.coffee.pLEC.FodaUN;
import com.coffee.pLEC.IDCons;
import com.coffee.pLEC.ListOfIDs;
import com.coffee.pLEC.ListOfValues;
import com.coffee.pLEC.Model;
import com.coffee.pLEC.NonEnumerableValue;
import com.coffee.pLEC.PLECFactory;
import com.coffee.pLEC.PLECPackage;
import com.coffee.pLEC.Refinement;
import com.coffee.pLEC.RootRefinement;
import com.coffee.pLEC.Rule;
import com.coffee.pLEC.SetRefinement;
import com.coffee.pLEC.Structural;
import com.coffee.pLEC.Symbol;
import com.coffee.pLEC.Value;
import com.coffee.pLEC.VarDeclaration;
import com.coffee.pLEC.VarRefinement;
import com.coffee.pLEC.VariantDeclaration;
import com.coffee.pLEC.VariantsEnumeration;
import com.coffee.pLEC.VariantsInterval;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PLECFactoryImpl extends EFactoryImpl implements PLECFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PLECFactory init()
  {
    try
    {
      PLECFactory thePLECFactory = (PLECFactory)EPackage.Registry.INSTANCE.getEFactory(PLECPackage.eNS_URI);
      if (thePLECFactory != null)
      {
        return thePLECFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PLECFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PLECFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PLECPackage.MODEL: return createModel();
      case PLECPackage.VAR_DECLARATION: return createVarDeclaration();
      case PLECPackage.VARIANT_DECLARATION: return createVariantDeclaration();
      case PLECPackage.VARIANTS_INTERVAL: return createVariantsInterval();
      case PLECPackage.VARIANTS_ENUMERATION: return createVariantsEnumeration();
      case PLECPackage.CONSTRAINT: return createConstraint();
      case PLECPackage.CONS_EXPRESSION: return createConsExpression();
      case PLECPackage.EXPRESSION: return createExpression();
      case PLECPackage.ID_CONS: return createIDCons();
      case PLECPackage.STRUCTURAL: return createStructural();
      case PLECPackage.ATTRIBUTES: return createAttributes();
      case PLECPackage.REFINEMENT: return createRefinement();
      case PLECPackage.ASSIGNMENT: return createAssignment();
      case PLECPackage.VAR_REFINEMENT: return createVarRefinement();
      case PLECPackage.SET_REFINEMENT: return createSetRefinement();
      case PLECPackage.ROOT_REFINEMENT: return createRootRefinement();
      case PLECPackage.RULE: return createRule();
      case PLECPackage.FODA_UN: return createFodaUN();
      case PLECPackage.FODA_BIN: return createFodaBin();
      case PLECPackage.BOOL_VAL: return createBoolVal();
      case PLECPackage.NUMBER: return createNumber();
      case PLECPackage.SYMBOL: return createSymbol();
      case PLECPackage.VALUE: return createValue();
      case PLECPackage.NON_ENUMERABLE_VALUE: return createNonEnumerableValue();
      case PLECPackage.LIST_OF_VALUES: return createListOfValues();
      case PLECPackage.LIST_OF_IDS: return createListOfIDs();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarDeclaration createVarDeclaration()
  {
    VarDeclarationImpl varDeclaration = new VarDeclarationImpl();
    return varDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariantDeclaration createVariantDeclaration()
  {
    VariantDeclarationImpl variantDeclaration = new VariantDeclarationImpl();
    return variantDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariantsInterval createVariantsInterval()
  {
    VariantsIntervalImpl variantsInterval = new VariantsIntervalImpl();
    return variantsInterval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariantsEnumeration createVariantsEnumeration()
  {
    VariantsEnumerationImpl variantsEnumeration = new VariantsEnumerationImpl();
    return variantsEnumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConsExpression createConsExpression()
  {
    ConsExpressionImpl consExpression = new ConsExpressionImpl();
    return consExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IDCons createIDCons()
  {
    IDConsImpl idCons = new IDConsImpl();
    return idCons;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Structural createStructural()
  {
    StructuralImpl structural = new StructuralImpl();
    return structural;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attributes createAttributes()
  {
    AttributesImpl attributes = new AttributesImpl();
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Refinement createRefinement()
  {
    RefinementImpl refinement = new RefinementImpl();
    return refinement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarRefinement createVarRefinement()
  {
    VarRefinementImpl varRefinement = new VarRefinementImpl();
    return varRefinement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetRefinement createSetRefinement()
  {
    SetRefinementImpl setRefinement = new SetRefinementImpl();
    return setRefinement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RootRefinement createRootRefinement()
  {
    RootRefinementImpl rootRefinement = new RootRefinementImpl();
    return rootRefinement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FodaUN createFodaUN()
  {
    FodaUNImpl fodaUN = new FodaUNImpl();
    return fodaUN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FodaBin createFodaBin()
  {
    FodaBinImpl fodaBin = new FodaBinImpl();
    return fodaBin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolVal createBoolVal()
  {
    BoolValImpl boolVal = new BoolValImpl();
    return boolVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public com.coffee.pLEC.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Symbol createSymbol()
  {
    SymbolImpl symbol = new SymbolImpl();
    return symbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NonEnumerableValue createNonEnumerableValue()
  {
    NonEnumerableValueImpl nonEnumerableValue = new NonEnumerableValueImpl();
    return nonEnumerableValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListOfValues createListOfValues()
  {
    ListOfValuesImpl listOfValues = new ListOfValuesImpl();
    return listOfValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListOfIDs createListOfIDs()
  {
    ListOfIDsImpl listOfIDs = new ListOfIDsImpl();
    return listOfIDs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PLECPackage getPLECPackage()
  {
    return (PLECPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PLECPackage getPackage()
  {
    return PLECPackage.eINSTANCE;
  }

} //PLECFactoryImpl
