grammar com.coffee.Hlvl with org.eclipse.xtext.common.Terminals

generate hlvl "http://www.coffee.com/Hlvl"

/**
 * Grammar specification of the HLVL, High Level Variability Language
 * @author Angela Villota
 * @version HLVL V4 
 * Modified in October 4th for including the root constraint
 * Modified on October 9th for fixing the setRefinement
 * Modified on November 16th 2018
 * Modified on January 2019 to include conditional and quantified implies
 * August 2018
 */
Model:
	'model' name=ID 'elements:' elements+=(ElmDeclaration)*  'relations:'relations+=(RelDeclaration)*
	('operations:' operations = Operations )?
	;
	
ElmDeclaration:
	(att= 'att')?
	(dataType=DataType)
	name= ID
	declaration= Declaration 
;

Declaration:
	ConstantDecl |VariableDecl 
;
ConstantDecl:
	{ConstantDecl}('is' value= Value)?
;

VariableDecl:
	{VariableDecl}('variants:' variants= OptionsDeclaration)
;


//Declaration of variants
OptionsDeclaration: 
  Interval | Enumeration 
;

// intervals (only intervals of enumerables)
Interval:
	(start=INT) ('..') (end=INT)
	;
	
// enumeration (enumeration of booleans, integers and symbols)
Enumeration:
	('[') list =  ListOfValues  (']')
;

RelDeclaration:
	  name=ID ':'  exp= Relation 
;

Relation:
	Core | Hierarchy |Pair |VarList|Order |
	MultInstantiation|Expression |Visibility|QImplies|
	ComplexImplies
;

Core:
	{Core}'coreElements' '(' elements=ListOfIDs')'
;

MultInstantiation:
	'instantiable' name=[ElmDeclaration] '['min=Number ',' max=Number ']'
;

Pair:
	operator=('implies'|'mutex') '(' var1=[ElmDeclaration] ',' var2=[ElmDeclaration]')'
;

ComplexImplies:
	'implies' '(' var1=[ElmDeclaration] ',' exp=Expression')'
;

QImplies:
	'[' mina=INT ',' maxa=INT ']' var1=[ElmDeclaration] 'implies'  '[' minb=INT ',' maxb=INT']' var2=[ElmDeclaration] 
;

VarList:
	operator=('implies'|'mutex') '(' var1=[ElmDeclaration] ',' '[' list=ListOfIDs ']' ')'
;
Hierarchy:
	Decomposition|Group
;

Decomposition:
	{Decomposition}'decomposition' '(' parent=[ElmDeclaration] ',' '['children=ListOfIDs ']' ')' 
	'<' cardinality=INT'>'
;

Group:
	{Group} 'group' '(' 
	parent=[ElmDeclaration] ',' 
	'['children=ListOfIDs ']' ')' 
	'[' min= INT ',' 
	max=Range 
	']'
;

Range:
	 {Range} value = wildcard 
;

wildcard:
	INT |'*'
;

Visibility:
	'visibility' '(' condition= Relational ',' '['children=ListOfRelRefs ']' ')'
;

Order:
	operator='before' |'after' left= [ElmDeclaration] ',' '[' right+=ListOfIDs']'
;

Expression:
	'expression''('exp= Relational ')'
;


Relational: Iff;

Iff returns Relational:
	Implies ({Iff.left = current} "<=>" right=Implies)*
;
Implies returns Relational:
	Or ({Implies.left = current} "=>" right=Or)*
;
Or returns Relational:
	And ({Or.left = current} "OR" right=And)*
;

And returns Relational:
	Equality ({And.left=current} "AND" right=Equality)*
;

Equality returns Relational:
	 Comparison ( {Equality.left=current} op=("="|"!=") right=Comparison)* 
;

Comparison returns Relational: 
	PlusOrMinus ( {Comparison.left=current} op=(">="|"<="|">"|"<") right=PlusOrMinus)* 
;

PlusOrMinus returns Relational:
	MulOrDiv (
		({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv
	)*
	;

MulOrDiv returns Relational: 
	Primary ( {MulOrDiv.left=current} op=('*'|'/'|'mod') right=Primary)* 
;

Primary returns Relational:
	 '(' Relational ')' | 
	 {Negation} "~"expression=Primary | 
	 {Unary} op=UnaryOp '('expression=Primary')' | 
	 {Function} op=FunctionOp '('left=Primary ',' right=Primary ')' |
	 Atomic
;

Atomic returns Relational: 
	{BoolConstant} value=('true'|'false') | 
	{VariableRef} variable=[ElmDeclaration]|
	{AttributeRef} attribute= QualifiedName |
	{IntConstant} value=INT 
;

QualifiedName:
	ID ('.' ID)+
;

Operations:
	op+= Operation (',' + op+= Operation)*
;

Operation:Sample;

Sample returns Operation:
	{SingleInstruction} name= OperationName|
//	{NumConf} 'numberOfConfigurations'|
//	{FindOne} 'findConfiguration'|
//	{FindAll} 'findAllConfigurations'|
	{ValidConf} 'validConfiguration' '(' valuations= ListOfValuation ')'
	
;

OperationName:
	'validModel'| 'numberOfConfigurations' |'findConfiguration'|'findAllConfigurations'
;
	
///**
// * Global constraints
// */
//Global:
//	op=GlobalOp '(' vars=ListOfIDs ')'   ( '[' values= ListOfListValues ']')? 
//	;



// syntactic categories

BoolVal: value=('true'|'false');
Number: value = INT ;

Symbol: '"' value= STRING '"';

Value: 
	Number|BoolVal|Symbol
;	
//EnumerableValue: Number ;
//NonEnumerableValue:BoolVal|Symbol;

DataType:
	 'boolean' |'integer'|'symbolic' ;
	 
ListOfValues:
	values+= Value (',' + values+= Value)*
;
ListOfIDs:
	values+= ([ElmDeclaration]) (',' + values+= [ElmDeclaration])*
;

ListOfRelRefs:
	ids+= ([RelDeclaration]) (',' + ids+= [RelDeclaration])*
;
Names:
	ids+= (ID) (',' + ids+= ID)*
;

// For configuration

Valuation:
	'(' element= [ElmDeclaration] ',' value= Value ')'
;

ListOfValuation:
	pairs+= Valuation (',' + pairs+= Valuation)*
;
ListOfListValues:
	'['list+= ListOfValues']' (',' + '[' list+= ListOfValues ']')*
;
GlobalOp:
	'at_most'|'all_different'
;

FunctionOp:
	'pow'|'dist'|'min'|'max'
;
UnaryOp:
	'abs'|'sqrt'| 'instances'
	
;
