/*
 * generated by Xtext 2.12.0
 */
grammar InternalCPHLCL;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.CPHLCLGrammarAccess;

}
@parser::members {
	private CPHLCLGrammarAccess grammarAccess;

	public void setGrammarAccess(CPHLCLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
		(rule__VarDeclaration__Group__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDomainDeclaration
entryRuleDomainDeclaration
:
{ before(grammarAccess.getDomainDeclarationRule()); }
	 ruleDomainDeclaration
{ after(grammarAccess.getDomainDeclarationRule()); } 
	 EOF 
;

// Rule DomainDeclaration
ruleDomainDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainDeclarationAccess().getAlternatives()); }
		(rule__DomainDeclaration__Alternatives)
		{ after(grammarAccess.getDomainDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInterval
entryRuleInterval
:
{ before(grammarAccess.getIntervalRule()); }
	 ruleInterval
{ after(grammarAccess.getIntervalRule()); } 
	 EOF 
;

// Rule Interval
ruleInterval 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntervalAccess().getGroup()); }
		(rule__Interval__Group__0)
		{ after(grammarAccess.getIntervalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumeration
entryRuleEnumeration
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerationAccess().getGroup()); }
		(rule__Enumeration__Group__0)
		{ after(grammarAccess.getEnumerationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup()); }
		(rule__Constraint__Group__0)
		{ after(grammarAccess.getConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolTerm
entryRuleBoolTerm
:
{ before(grammarAccess.getBoolTermRule()); }
	 ruleBoolTerm
{ after(grammarAccess.getBoolTermRule()); } 
	 EOF 
;

// Rule BoolTerm
ruleBoolTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolTermAccess().getAlternatives()); }
		(rule__BoolTerm__Alternatives)
		{ after(grammarAccess.getBoolTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComplexTerm
entryRuleComplexTerm
:
{ before(grammarAccess.getComplexTermRule()); }
	 ruleComplexTerm
{ after(grammarAccess.getComplexTermRule()); } 
	 EOF 
;

// Rule ComplexTerm
ruleComplexTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComplexTermAccess().getAlternatives()); }
		(rule__ComplexTerm__Alternatives)
		{ after(grammarAccess.getComplexTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogic
entryRuleLogic
:
{ before(grammarAccess.getLogicRule()); }
	 ruleLogic
{ after(grammarAccess.getLogicRule()); } 
	 EOF 
;

// Rule Logic
ruleLogic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicAccess().getGroup()); }
		(rule__Logic__Group__0)
		{ after(grammarAccess.getLogicAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicUn
entryRuleLogicUn
:
{ before(grammarAccess.getLogicUnRule()); }
	 ruleLogicUn
{ after(grammarAccess.getLogicUnRule()); } 
	 EOF 
;

// Rule LogicUn
ruleLogicUn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicUnAccess().getGroup()); }
		(rule__LogicUn__Group__0)
		{ after(grammarAccess.getLogicUnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelational
entryRuleRelational
:
{ before(grammarAccess.getRelationalRule()); }
	 ruleRelational
{ after(grammarAccess.getRelationalRule()); } 
	 EOF 
;

// Rule Relational
ruleRelational 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalAccess().getGroup()); }
		(rule__Relational__Group__0)
		{ after(grammarAccess.getRelationalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericTerm
entryRuleNumericTerm
:
{ before(grammarAccess.getNumericTermRule()); }
	 ruleNumericTerm
{ after(grammarAccess.getNumericTermRule()); } 
	 EOF 
;

// Rule NumericTerm
ruleNumericTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericTermAccess().getAlternatives()); }
		(rule__NumericTerm__Alternatives)
		{ after(grammarAccess.getNumericTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmetic
entryRuleArithmetic
:
{ before(grammarAccess.getArithmeticRule()); }
	 ruleArithmetic
{ after(grammarAccess.getArithmeticRule()); } 
	 EOF 
;

// Rule Arithmetic
ruleArithmetic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticAccess().getGroup()); }
		(rule__Arithmetic__Group__0)
		{ after(grammarAccess.getArithmeticAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGlobal
entryRuleGlobal
:
{ before(grammarAccess.getGlobalRule()); }
	 ruleGlobal
{ after(grammarAccess.getGlobalRule()); } 
	 EOF 
;

// Rule Global
ruleGlobal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGlobalAccess().getGroup()); }
		(rule__Global__Group__0)
		{ after(grammarAccess.getGlobalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleControl
entryRuleControl
:
{ before(grammarAccess.getControlRule()); }
	 ruleControl
{ after(grammarAccess.getControlRule()); } 
	 EOF 
;

// Rule Control
ruleControl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getControlAccess().getGroup()); }
		(rule__Control__Group__0)
		{ after(grammarAccess.getControlAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStrategy
entryRuleStrategy
:
{ before(grammarAccess.getStrategyRule()); }
	 ruleStrategy
{ after(grammarAccess.getStrategyRule()); } 
	 EOF 
;

// Rule Strategy
ruleStrategy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStrategyAccess().getAlternatives()); }
		(rule__Strategy__Alternatives)
		{ after(grammarAccess.getStrategyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolVal
entryRuleBoolVal
:
{ before(grammarAccess.getBoolValRule()); }
	 ruleBoolVal
{ after(grammarAccess.getBoolValRule()); } 
	 EOF 
;

// Rule BoolVal
ruleBoolVal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolValAccess().getAlternatives()); }
		(rule__BoolVal__Alternatives)
		{ after(grammarAccess.getBoolValAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolVar
entryRuleBoolVar
:
{ before(grammarAccess.getBoolVarRule()); }
	 ruleBoolVar
{ after(grammarAccess.getBoolVarRule()); } 
	 EOF 
;

// Rule BoolVar
ruleBoolVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolVarAccess().getIdAssignment()); }
		(rule__BoolVar__IdAssignment)
		{ after(grammarAccess.getBoolVarAccess().getIdAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getNumAssignment()); }
		(rule__Number__NumAssignment)
		{ after(grammarAccess.getNumberAccess().getNumAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntVar
entryRuleIntVar
:
{ before(grammarAccess.getIntVarRule()); }
	 ruleIntVar
{ after(grammarAccess.getIntVarRule()); } 
	 EOF 
;

// Rule IntVar
ruleIntVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntVarAccess().getIdAssignment()); }
		(rule__IntVar__IdAssignment)
		{ after(grammarAccess.getIntVarAccess().getIdAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicOpBin
entryRuleLogicOpBin
:
{ before(grammarAccess.getLogicOpBinRule()); }
	 ruleLogicOpBin
{ after(grammarAccess.getLogicOpBinRule()); } 
	 EOF 
;

// Rule LogicOpBin
ruleLogicOpBin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicOpBinAccess().getAlternatives()); }
		(rule__LogicOpBin__Alternatives)
		{ after(grammarAccess.getLogicOpBinAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicOpUn
entryRuleLogicOpUn
:
{ before(grammarAccess.getLogicOpUnRule()); }
	 ruleLogicOpUn
{ after(grammarAccess.getLogicOpUnRule()); } 
	 EOF 
;

// Rule LogicOpUn
ruleLogicOpUn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicOpUnAccess().getNOTKeyword()); }
		'NOT'
		{ after(grammarAccess.getLogicOpUnAccess().getNOTKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalOp
entryRuleRelationalOp
:
{ before(grammarAccess.getRelationalOpRule()); }
	 ruleRelationalOp
{ after(grammarAccess.getRelationalOpRule()); } 
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalOpAccess().getAlternatives()); }
		(rule__RelationalOp__Alternatives)
		{ after(grammarAccess.getRelationalOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGlobalOp
entryRuleGlobalOp
:
{ before(grammarAccess.getGlobalOpRule()); }
	 ruleGlobalOp
{ after(grammarAccess.getGlobalOpRule()); } 
	 EOF 
;

// Rule GlobalOp
ruleGlobalOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGlobalOpAccess().getAlternatives()); }
		(rule__GlobalOp__Alternatives)
		{ after(grammarAccess.getGlobalOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticOp
entryRuleArithmeticOp
:
{ before(grammarAccess.getArithmeticOpRule()); }
	 ruleArithmeticOp
{ after(grammarAccess.getArithmeticOpRule()); } 
	 EOF 
;

// Rule ArithmeticOp
ruleArithmeticOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticOpAccess().getAlternatives()); }
		(rule__ArithmeticOp__Alternatives)
		{ after(grammarAccess.getArithmeticOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumerableValue
entryRuleEnumerableValue
:
{ before(grammarAccess.getEnumerableValueRule()); }
	 ruleEnumerableValue
{ after(grammarAccess.getEnumerableValueRule()); } 
	 EOF 
;

// Rule EnumerableValue
ruleEnumerableValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerableValueAccess().getINTTerminalRuleCall()); }
		RULE_INT
		{ after(grammarAccess.getEnumerableValueAccess().getINTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNonEnumerableValue
entryRuleNonEnumerableValue
:
{ before(grammarAccess.getNonEnumerableValueRule()); }
	 ruleNonEnumerableValue
{ after(grammarAccess.getNonEnumerableValueRule()); } 
	 EOF 
;

// Rule NonEnumerableValue
ruleNonEnumerableValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNonEnumerableValueAccess().getAlternatives()); }
		(rule__NonEnumerableValue__Alternatives)
		{ after(grammarAccess.getNonEnumerableValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarType
entryRuleVarType
:
{ before(grammarAccess.getVarTypeRule()); }
	 ruleVarType
{ after(grammarAccess.getVarTypeRule()); } 
	 EOF 
;

// Rule VarType
ruleVarType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarTypeAccess().getAlternatives()); }
		(rule__VarType__Alternatives)
		{ after(grammarAccess.getVarTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOfValues
entryRuleListOfValues
:
{ before(grammarAccess.getListOfValuesRule()); }
	 ruleListOfValues
{ after(grammarAccess.getListOfValuesRule()); } 
	 EOF 
;

// Rule ListOfValues
ruleListOfValues 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListOfValuesAccess().getGroup()); }
		(rule__ListOfValues__Group__0)
		{ after(grammarAccess.getListOfValuesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOfIDs
entryRuleListOfIDs
:
{ before(grammarAccess.getListOfIDsRule()); }
	 ruleListOfIDs
{ after(grammarAccess.getListOfIDsRule()); } 
	 EOF 
;

// Rule ListOfIDs
ruleListOfIDs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getListOfIDsAccess().getIdsAssignment()); }
			(rule__ListOfIDs__IdsAssignment)
			{ after(grammarAccess.getListOfIDsAccess().getIdsAssignment()); }
		)
		(
			{ before(grammarAccess.getListOfIDsAccess().getIdsAssignment()); }
			(rule__ListOfIDs__IdsAssignment)*
			{ after(grammarAccess.getListOfIDsAccess().getIdsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainDeclaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainDeclarationAccess().getIntervalParserRuleCall_0()); }
		ruleInterval
		{ after(grammarAccess.getDomainDeclarationAccess().getIntervalParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDomainDeclarationAccess().getEnumerationParserRuleCall_1()); }
		ruleEnumeration
		{ after(grammarAccess.getDomainDeclarationAccess().getEnumerationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getGlobalParserRuleCall_0()); }
		ruleGlobal
		{ after(grammarAccess.getExpressionAccess().getGlobalParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getLogicParserRuleCall_1()); }
		(ruleLogic)
		{ after(grammarAccess.getExpressionAccess().getLogicParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getRelationalParserRuleCall_2()); }
		(ruleRelational)
		{ after(grammarAccess.getExpressionAccess().getRelationalParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getControlParserRuleCall_3()); }
		ruleControl
		{ after(grammarAccess.getExpressionAccess().getControlParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolTerm__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolTermAccess().getGroup_0()); }
		(rule__BoolTerm__Group_0__0)
		{ after(grammarAccess.getBoolTermAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolTermAccess().getBoolVarParserRuleCall_1()); }
		ruleBoolVar
		{ after(grammarAccess.getBoolTermAccess().getBoolVarParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTerm__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexTermAccess().getLogicParserRuleCall_0()); }
		(ruleLogic)
		{ after(grammarAccess.getComplexTermAccess().getLogicParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getComplexTermAccess().getRelationalParserRuleCall_1()); }
		(ruleRelational)
		{ after(grammarAccess.getComplexTermAccess().getRelationalParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getComplexTermAccess().getLogicUnParserRuleCall_2()); }
		ruleLogicUn
		{ after(grammarAccess.getComplexTermAccess().getLogicUnParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericTerm__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericTermAccess().getGroup_0()); }
		(rule__NumericTerm__Group_0__0)
		{ after(grammarAccess.getNumericTermAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumericTermAccess().getNumberParserRuleCall_1()); }
		ruleNumber
		{ after(grammarAccess.getNumericTermAccess().getNumberParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNumericTermAccess().getIntVarParserRuleCall_2()); }
		ruleIntVar
		{ after(grammarAccess.getNumericTermAccess().getIntVarParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Strategy__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrategyAccess().getOneKeyword_0()); }
		'one'
		{ after(grammarAccess.getStrategyAccess().getOneKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getStrategyAccess().getTwoKeyword_1()); }
		'two'
		{ after(grammarAccess.getStrategyAccess().getTwoKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolValAccess().getTrueKeyword_0()); }
		'true'
		{ after(grammarAccess.getBoolValAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolValAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getBoolValAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOpBin__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicOpBinAccess().getANDKeyword_0()); }
		'AND'
		{ after(grammarAccess.getLogicOpBinAccess().getANDKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicOpBinAccess().getORKeyword_1()); }
		'OR'
		{ after(grammarAccess.getLogicOpBinAccess().getORKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getLogicOpBinAccess().getXORKeyword_2()); }
		'XOR'
		{ after(grammarAccess.getLogicOpBinAccess().getXORKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getLogicOpBinAccess().getEqualsSignGreaterThanSignKeyword_3()); }
		'=>'
		{ after(grammarAccess.getLogicOpBinAccess().getEqualsSignGreaterThanSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getLogicOpBinAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_4()); }
		'<=>'
		{ after(grammarAccess.getLogicOpBinAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_0()); }
		'>'
		{ after(grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_1()); }
		'<'
		{ after(grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_2()); }
		'>='
		{ after(grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_3()); }
		'<='
		{ after(grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getEqualsSignKeyword_4()); }
		'='
		{ after(grammarAccess.getRelationalOpAccess().getEqualsSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getExclamationMarkEqualsSignKeyword_5()); }
		'!='
		{ after(grammarAccess.getRelationalOpAccess().getExclamationMarkEqualsSignKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalOpAccess().getAt_mostKeyword_0()); }
		'at_most'
		{ after(grammarAccess.getGlobalOpAccess().getAt_mostKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getGlobalOpAccess().getAll_differentKeyword_1()); }
		'all_different'
		{ after(grammarAccess.getGlobalOpAccess().getAll_differentKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticOpAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getArithmeticOpAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOpAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getArithmeticOpAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOpAccess().getAsteriskKeyword_2()); }
		'*'
		{ after(grammarAccess.getArithmeticOpAccess().getAsteriskKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOpAccess().getSolidusKeyword_3()); }
		'/'
		{ after(grammarAccess.getArithmeticOpAccess().getSolidusKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOpAccess().getModKeyword_4()); }
		'mod'
		{ after(grammarAccess.getArithmeticOpAccess().getModKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOpAccess().getPowKeyword_5()); }
		'pow'
		{ after(grammarAccess.getArithmeticOpAccess().getPowKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOpAccess().getDistKeyword_6()); }
		'dist'
		{ after(grammarAccess.getArithmeticOpAccess().getDistKeyword_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getEnumerableValueParserRuleCall_0()); }
		ruleEnumerableValue
		{ after(grammarAccess.getValueAccess().getEnumerableValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getNonEnumerableValueParserRuleCall_1()); }
		ruleNonEnumerableValue
		{ after(grammarAccess.getValueAccess().getNonEnumerableValueParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NonEnumerableValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonEnumerableValueAccess().getBoolValParserRuleCall_0()); }
		ruleBoolVal
		{ after(grammarAccess.getNonEnumerableValueAccess().getBoolValParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNonEnumerableValueAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getNonEnumerableValueAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTypeAccess().getBoolKeyword_0()); }
		'bool'
		{ after(grammarAccess.getVarTypeAccess().getBoolKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getIntegerKeyword_1()); }
		'integer'
		{ after(grammarAccess.getVarTypeAccess().getIntegerKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getSymbolicKeyword_2()); }
		'symbolic'
		{ after(grammarAccess.getVarTypeAccess().getSymbolicKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelKeyword_0()); }
	'model'
	{ after(grammarAccess.getModelAccess().getModelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
	(rule__Model__NameAssignment_1)
	{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getVariablesKeyword_2()); }
	'variables:'
	{ after(grammarAccess.getModelAccess().getVariablesKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getVarsAssignment_3()); }
		(rule__Model__VarsAssignment_3)
		{ after(grammarAccess.getModelAccess().getVarsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getVarsAssignment_3()); }
		(rule__Model__VarsAssignment_3)*
		{ after(grammarAccess.getModelAccess().getVarsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getConstraintsKeyword_4()); }
	'constraints:'
	{ after(grammarAccess.getModelAccess().getConstraintsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__5__Impl
	rule__Model__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getConstraintsAssignment_5()); }
		(rule__Model__ConstraintsAssignment_5)
		{ after(grammarAccess.getModelAccess().getConstraintsAssignment_5()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getConstraintsAssignment_5()); }
		(rule__Model__ConstraintsAssignment_5)*
		{ after(grammarAccess.getModelAccess().getConstraintsAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__6__Impl
	rule__Model__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getStrategyKeyword_6()); }
	'strategy:'
	{ after(grammarAccess.getModelAccess().getStrategyKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getStrategyAssignment_7()); }
	(rule__Model__StrategyAssignment_7)
	{ after(grammarAccess.getModelAccess().getStrategyAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getTypeAssignment_0()); }
	(rule__VarDeclaration__TypeAssignment_0)
	{ after(grammarAccess.getVarDeclarationAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__1__Impl
	rule__VarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getNameAssignment_1()); }
	(rule__VarDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVarDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__2__Impl
	rule__VarDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getDomainKeyword_2()); }
	'domain:'
	{ after(grammarAccess.getVarDeclarationAccess().getDomainKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getDomainAssignment_3()); }
	(rule__VarDeclaration__DomainAssignment_3)
	{ after(grammarAccess.getVarDeclarationAccess().getDomainAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interval__Group__0__Impl
	rule__Interval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervalAccess().getStartAssignment_0()); }
	(rule__Interval__StartAssignment_0)
	{ after(grammarAccess.getIntervalAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interval__Group__1__Impl
	rule__Interval__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervalAccess().getFullStopFullStopKeyword_1()); }
	'..'
	{ after(grammarAccess.getIntervalAccess().getFullStopFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interval__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervalAccess().getEndAssignment_2()); }
	(rule__Interval__EndAssignment_2)
	{ after(grammarAccess.getIntervalAccess().getEndAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__0__Impl
	rule__Enumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getEnumerationAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__1__Impl
	rule__Enumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getListAssignment_1()); }
	(rule__Enumeration__ListAssignment_1)
	{ after(grammarAccess.getEnumerationAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getEnumerationAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getNameAssignment_0()); }
	(rule__Constraint__NameAssignment_0)
	{ after(grammarAccess.getConstraintAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getConstraintAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getExpAssignment_2()); }
	(rule__Constraint__ExpAssignment_2)
	{ after(grammarAccess.getConstraintAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolTerm__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolTerm__Group_0__0__Impl
	rule__BoolTerm__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolTerm__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolTermAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getBoolTermAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolTerm__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolTerm__Group_0__1__Impl
	rule__BoolTerm__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolTerm__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolTermAccess().getComplexTermParserRuleCall_0_1()); }
	ruleComplexTerm
	{ after(grammarAccess.getBoolTermAccess().getComplexTermParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolTerm__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolTerm__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolTerm__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolTermAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getBoolTermAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Logic__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Logic__Group__0__Impl
	rule__Logic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAccess().getLogicLeftAssignment_0()); }
	(rule__Logic__LogicLeftAssignment_0)
	{ after(grammarAccess.getLogicAccess().getLogicLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Logic__Group__1__Impl
	rule__Logic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAccess().getLogicOpAssignment_1()); }
	(rule__Logic__LogicOpAssignment_1)
	{ after(grammarAccess.getLogicAccess().getLogicOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Logic__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAccess().getLogicRightAssignment_2()); }
	(rule__Logic__LogicRightAssignment_2)
	{ after(grammarAccess.getLogicAccess().getLogicRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicUn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicUn__Group__0__Impl
	rule__LogicUn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicUn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicUnAccess().getLogicOpAssignment_0()); }
	(rule__LogicUn__LogicOpAssignment_0)
	{ after(grammarAccess.getLogicUnAccess().getLogicOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicUn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicUn__Group__1__Impl
	rule__LogicUn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicUn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicUnAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLogicUnAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicUn__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicUn__Group__2__Impl
	rule__LogicUn__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicUn__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicUnAccess().getExpAssignment_2()); }
	(rule__LogicUn__ExpAssignment_2)
	{ after(grammarAccess.getLogicUnAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicUn__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicUn__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicUn__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicUnAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getLogicUnAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Relational__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relational__Group__0__Impl
	rule__Relational__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalAccess().getRelationalLeftAssignment_0()); }
	(rule__Relational__RelationalLeftAssignment_0)
	{ after(grammarAccess.getRelationalAccess().getRelationalLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relational__Group__1__Impl
	rule__Relational__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalAccess().getRelationalOpAssignment_1()); }
	(rule__Relational__RelationalOpAssignment_1)
	{ after(grammarAccess.getRelationalAccess().getRelationalOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relational__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalAccess().getRelationalRightAssignment_2()); }
	(rule__Relational__RelationalRightAssignment_2)
	{ after(grammarAccess.getRelationalAccess().getRelationalRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumericTerm__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericTerm__Group_0__0__Impl
	rule__NumericTerm__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericTerm__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericTermAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getNumericTermAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericTerm__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericTerm__Group_0__1__Impl
	rule__NumericTerm__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericTerm__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericTermAccess().getArithmeticParserRuleCall_0_1()); }
	ruleArithmetic
	{ after(grammarAccess.getNumericTermAccess().getArithmeticParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericTerm__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericTerm__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericTerm__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericTermAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getNumericTermAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Arithmetic__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arithmetic__Group__0__Impl
	rule__Arithmetic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAccess().getLeftAssignment_0()); }
	(rule__Arithmetic__LeftAssignment_0)
	{ after(grammarAccess.getArithmeticAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arithmetic__Group__1__Impl
	rule__Arithmetic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAccess().getArithOperatorAssignment_1()); }
	(rule__Arithmetic__ArithOperatorAssignment_1)
	{ after(grammarAccess.getArithmeticAccess().getArithOperatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arithmetic__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAccess().getRightAssignment_2()); }
	(rule__Arithmetic__RightAssignment_2)
	{ after(grammarAccess.getArithmeticAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Global__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__0__Impl
	rule__Global__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getOpAssignment_0()); }
	(rule__Global__OpAssignment_0)
	{ after(grammarAccess.getGlobalAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__1__Impl
	rule__Global__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getGlobalAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__2__Impl
	rule__Global__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getVarsAssignment_2()); }
	(rule__Global__VarsAssignment_2)
	{ after(grammarAccess.getGlobalAccess().getVarsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getGlobalAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Control__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Control__Group__0__Impl
	rule__Control__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getControlAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getControlAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Control__Group__1__Impl
	rule__Control__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getControlAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getControlAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Control__Group__2__Impl
	rule__Control__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getControlAccess().getCondAssignment_2()); }
	(rule__Control__CondAssignment_2)
	{ after(grammarAccess.getControlAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Control__Group__3__Impl
	rule__Control__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getControlAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getControlAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Control__Group__4__Impl
	rule__Control__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getControlAccess().getThenKeyword_4()); }
	'then'
	{ after(grammarAccess.getControlAccess().getThenKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Control__Group__5__Impl
	rule__Control__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getControlAccess().getTrueStatementAssignment_5()); }
	(rule__Control__TrueStatementAssignment_5)
	{ after(grammarAccess.getControlAccess().getTrueStatementAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Control__Group__6__Impl
	rule__Control__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getControlAccess().getElseKeyword_6()); }
	'else'
	{ after(grammarAccess.getControlAccess().getElseKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Control__Group__7__Impl
	rule__Control__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getControlAccess().getElseStatementAssignment_7()); }
	(rule__Control__ElseStatementAssignment_7)
	{ after(grammarAccess.getControlAccess().getElseStatementAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Control__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getControlAccess().getEnd_ifKeyword_8()); }
	'end_if'
	{ after(grammarAccess.getControlAccess().getEnd_ifKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOfValues__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfValues__Group__0__Impl
	rule__ListOfValues__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfValuesAccess().getValuesAssignment_0()); }
	(rule__ListOfValues__ValuesAssignment_0)
	{ after(grammarAccess.getListOfValuesAccess().getValuesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfValues__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfValuesAccess().getGroup_1()); }
	(rule__ListOfValues__Group_1__0)*
	{ after(grammarAccess.getListOfValuesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOfValues__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfValues__Group_1__0__Impl
	rule__ListOfValues__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getListOfValuesAccess().getCommaKeyword_1_0()); }
		(',')
		{ after(grammarAccess.getListOfValuesAccess().getCommaKeyword_1_0()); }
	)
	(
		{ before(grammarAccess.getListOfValuesAccess().getCommaKeyword_1_0()); }
		(',')*
		{ after(grammarAccess.getListOfValuesAccess().getCommaKeyword_1_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfValues__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfValuesAccess().getValuesAssignment_1_1()); }
	(rule__ListOfValues__ValuesAssignment_1_1)
	{ after(grammarAccess.getListOfValuesAccess().getValuesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__VarsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getVarsVarDeclarationParserRuleCall_3_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getModelAccess().getVarsVarDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ConstraintsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getConstraintsConstraintParserRuleCall_5_0()); }
		ruleConstraint
		{ after(grammarAccess.getModelAccess().getConstraintsConstraintParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__StrategyAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStrategyStrategyParserRuleCall_7_0()); }
		ruleStrategy
		{ after(grammarAccess.getModelAccess().getStrategyStrategyParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getTypeVarTypeParserRuleCall_0_0()); }
		ruleVarType
		{ after(grammarAccess.getVarDeclarationAccess().getTypeVarTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__DomainAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getDomainDomainDeclarationParserRuleCall_3_0()); }
		ruleDomainDeclaration
		{ after(grammarAccess.getVarDeclarationAccess().getDomainDomainDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntervalAccess().getStartEnumerableValueParserRuleCall_0_0()); }
		ruleEnumerableValue
		{ after(grammarAccess.getIntervalAccess().getStartEnumerableValueParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__EndAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntervalAccess().getEndEnumerableValueParserRuleCall_2_0()); }
		ruleEnumerableValue
		{ after(grammarAccess.getIntervalAccess().getEndEnumerableValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getListListOfValuesParserRuleCall_1_0()); }
		ruleListOfValues
		{ after(grammarAccess.getEnumerationAccess().getListListOfValuesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getExpExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getConstraintAccess().getExpExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__LogicLeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicAccess().getLogicLeftBoolTermParserRuleCall_0_0()); }
		ruleBoolTerm
		{ after(grammarAccess.getLogicAccess().getLogicLeftBoolTermParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__LogicOpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicAccess().getLogicOpLogicOpBinParserRuleCall_1_0()); }
		ruleLogicOpBin
		{ after(grammarAccess.getLogicAccess().getLogicOpLogicOpBinParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__LogicRightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicAccess().getLogicRightBoolTermParserRuleCall_2_0()); }
		ruleBoolTerm
		{ after(grammarAccess.getLogicAccess().getLogicRightBoolTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicUn__LogicOpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicUnAccess().getLogicOpLogicOpUnParserRuleCall_0_0()); }
		ruleLogicOpUn
		{ after(grammarAccess.getLogicUnAccess().getLogicOpLogicOpUnParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicUn__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicUnAccess().getExpBoolTermParserRuleCall_2_0()); }
		ruleBoolTerm
		{ after(grammarAccess.getLogicUnAccess().getExpBoolTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__RelationalLeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalAccess().getRelationalLeftNumericTermParserRuleCall_0_0()); }
		ruleNumericTerm
		{ after(grammarAccess.getRelationalAccess().getRelationalLeftNumericTermParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__RelationalOpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalAccess().getRelationalOpRelationalOpParserRuleCall_1_0()); }
		ruleRelationalOp
		{ after(grammarAccess.getRelationalAccess().getRelationalOpRelationalOpParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__RelationalRightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalAccess().getRelationalRightNumericTermParserRuleCall_2_0()); }
		ruleNumericTerm
		{ after(grammarAccess.getRelationalAccess().getRelationalRightNumericTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticAccess().getLeftNumericTermParserRuleCall_0_0()); }
		ruleNumericTerm
		{ after(grammarAccess.getArithmeticAccess().getLeftNumericTermParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__ArithOperatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticAccess().getArithOperatorArithmeticOpParserRuleCall_1_0()); }
		ruleArithmeticOp
		{ after(grammarAccess.getArithmeticAccess().getArithOperatorArithmeticOpParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticAccess().getRightNumericTermParserRuleCall_2_0()); }
		ruleNumericTerm
		{ after(grammarAccess.getArithmeticAccess().getRightNumericTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalAccess().getOpGlobalOpParserRuleCall_0_0()); }
		ruleGlobalOp
		{ after(grammarAccess.getGlobalAccess().getOpGlobalOpParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__VarsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalAccess().getVarsListOfIDsParserRuleCall_2_0()); }
		ruleListOfIDs
		{ after(grammarAccess.getGlobalAccess().getVarsListOfIDsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getControlAccess().getCondBoolTermParserRuleCall_2_0()); }
		ruleBoolTerm
		{ after(grammarAccess.getControlAccess().getCondBoolTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__TrueStatementAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getControlAccess().getTrueStatementExpressionParserRuleCall_5_0()); }
		ruleExpression
		{ after(grammarAccess.getControlAccess().getTrueStatementExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Control__ElseStatementAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getControlAccess().getElseStatementExpressionParserRuleCall_7_0()); }
		ruleExpression
		{ after(grammarAccess.getControlAccess().getElseStatementExpressionParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__IdAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolVarAccess().getIdIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getBoolVarAccess().getIdIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__NumAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getNumINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getNumINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__IdAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntVarAccess().getIdIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getIntVarAccess().getIdIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__ValuesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOfValuesAccess().getValuesValueParserRuleCall_0_0()); }
		ruleValue
		{ after(grammarAccess.getListOfValuesAccess().getValuesValueParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__ValuesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOfValuesAccess().getValuesValueParserRuleCall_1_1_0()); }
		ruleValue
		{ after(grammarAccess.getListOfValuesAccess().getValuesValueParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfIDs__IdsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOfIDsAccess().getIdsIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getListOfIDsAccess().getIdsIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
