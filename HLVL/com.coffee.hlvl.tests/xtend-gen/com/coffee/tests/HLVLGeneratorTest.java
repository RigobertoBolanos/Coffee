/**
 * generated by Xtext 2.12.0
 */
package com.coffee.tests;

import com.coffee.generator.Dialect;
import com.coffee.generator.IHLVLParser;
import com.coffee.generator.ParserFactory;
import com.coffee.hlvl.Model;
import com.coffee.tests.HlvlInjectorProvider;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * Class to test the correct parsing of HLVL
 * @author Angela Villota
 * @version HLVL V4
 * November 2018
 */
@RunWith(XtextRunner.class)
@InjectWith(HlvlInjectorProvider.class)
@SuppressWarnings("all")
public class HLVLGeneratorTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void getDialect() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator");
  }
  
  @Test
  public void boolParser() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("boolean A");
      _builder.newLine();
      _builder.append("boolean B");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("r1: common(A,B)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("var bool : A ;");
      _builder_1.newLine();
      _builder_1.append("var bool : B ;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint A == true ;");
      _builder_1.newLine();
      _builder_1.append("constraint B == true ;");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      final IHLVLParser parser = ParserFactory.getParser(Dialect.BASIC_BOOL, model.getName());
      final CharSequence actual = parser.parseModel(model);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void complexBoolParser() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("boolean A");
      _builder.newLine();
      _builder.append("boolean B");
      _builder.newLine();
      _builder.append("boolean C");
      _builder.newLine();
      _builder.append("boolean D");
      _builder.newLine();
      _builder.append("boolean F");
      _builder.newLine();
      _builder.append("boolean G");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("r1: common(A,B)");
      _builder.newLine();
      _builder.append("r2: implies((A = B), [C, D])");
      _builder.newLine();
      _builder.append("r3: mutex((C OR D), [F,G])");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("var bool : A ;");
      _builder_1.newLine();
      _builder_1.append("var bool : B ;");
      _builder_1.newLine();
      _builder_1.append("var bool : C ;");
      _builder_1.newLine();
      _builder_1.append("var bool : D ;");
      _builder_1.newLine();
      _builder_1.append("var bool : F ;");
      _builder_1.newLine();
      _builder_1.append("var bool : G ;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint A == true ;");
      _builder_1.newLine();
      _builder_1.append("constraint B == true ;");
      _builder_1.newLine();
      _builder_1.append("constraint (A == B) -> C;");
      _builder_1.newLine();
      _builder_1.append("constraint (A == B) -> D;");
      _builder_1.newLine();
      _builder_1.append("constraint not((C \\/ D) /\\ F);");
      _builder_1.newLine();
      _builder_1.append("constraint not((C \\/ D) /\\ G);");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      final IHLVLParser parser = ParserFactory.getParser(Dialect.COMPLEX_BOOL, model.getName());
      final CharSequence actual = parser.parseModel(model);
      InputOutput.<CharSequence>println(actual);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void gplBasicBooleanTest() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator");
  }
  
  @Test
  public void gplBasicIntegerParser() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model GPL");
      _builder.newLine();
      _builder.append("elements:  ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean GPL ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Gtp ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean directed");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean undirected");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean weighted");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean unweighted");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean BFS");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean DFS");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Algorithms");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean connected");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean stronglyc");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean cycle");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean mstprim");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean mstkruskal");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean shortest");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R1: common(GPL)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R2: decomposition(GPL,[Weight, Search], [0,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R3: decomposition(GPL, [Gtp, Algorithms], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R3X: group(Gtp, [directed, undirected], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R4: group(Weight, [weighted, unweighted], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R5: group(Search, [BFS, DFS], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R6: group(Algorithms, [connected, stronglyc, cycle, mstprim, mstkruskal, shortest], [1,*])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R7: implies(mstprim, unweighted)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R8: mutex(stronglyc, shortest)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R9: expression(undirected OR ~mstprim)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R10: expression(directed OR ~shortest)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R11: expression( ~mstprim OR ~mstkruskal )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R12: expression( unweighted OR ~mstkruskal )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R13: expression( undirected OR ~stronglyc )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R14: expression( ~connected OR ~stronglyc )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R15: expression( Search OR ~connected )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R16: expression( undirected OR ~mstkruskal )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R17: expression( ~mstkruskal OR ~shortest )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R18: expression( DFS OR ~cycle )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R19: expression( ~mstprim OR ~shortest)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("var 0..1: GPL;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: Gtp;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: directed;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: undirected;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: Weight;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: weighted;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: unweighted;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: Search;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: BFS;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: DFS;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: Algorithms;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: connected;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: stronglyc;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: cycle;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: mstprim;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: mstkruskal;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: shortest;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint GPL == 1;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL >= Weight;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL >= Search;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL == Gtp;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL == Algorithms;");
      _builder_1.newLine();
      _builder_1.append("constraint Gtp <= directed + undirected ;");
      _builder_1.newLine();
      _builder_1.append("constraint directed + undirected  <= Gtp;");
      _builder_1.newLine();
      _builder_1.append("constraint Weight <= weighted + unweighted ;");
      _builder_1.newLine();
      _builder_1.append("constraint weighted + unweighted  <= Weight;");
      _builder_1.newLine();
      _builder_1.append("constraint Search <= BFS + DFS ;");
      _builder_1.newLine();
      _builder_1.append("constraint BFS + DFS  <= Search;");
      _builder_1.newLine();
      _builder_1.append("constraint Algorithms <= connected + stronglyc + cycle + mstprim + mstkruskal + shortest ;");
      _builder_1.newLine();
      _builder_1.append("constraint connected + stronglyc + cycle + mstprim + mstkruskal + shortest  <= 6 * Algorithms;");
      _builder_1.newLine();
      _builder_1.append("constraint mstprim <= unweighted;");
      _builder_1.newLine();
      _builder_1.append("constraint stronglyc + shortest <= 1 ;");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected > 0 \\/ not(mstprim > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (directed > 0 \\/ not(shortest > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstprim > 0) \\/ not(mstkruskal > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (unweighted > 0 \\/ not(mstkruskal > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected > 0 \\/ not(stronglyc > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (not(connected > 0) \\/ not(stronglyc > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (Search > 0 \\/ not(connected > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected > 0 \\/ not(mstkruskal > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstkruskal > 0) \\/ not(shortest > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (DFS > 0 \\/ not(cycle > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstprim > 0) \\/ not(shortest > 0));");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      final IHLVLParser parser = ParserFactory.getParser(Dialect.BASIC_INT, model.getName());
      final CharSequence actual = parser.parseModel(model);
      InputOutput.<CharSequence>println(actual);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void OVMModelMODEVAR() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator");
  }
  
  @Test
  public void doplerMODEVAR() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator");
  }
  
  @Test
  public void fmMODEVAR() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator"
      + "\nThe method findDialect(Model) is undefined for the type HlvlGenerator");
  }
  
  /**
   * to print the parsing errors
   */
  public void printErrors(final Model model) {
    boolean _isEmpty = model.eResource().getErrors().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<Resource.Diagnostic> _errors = model.eResource().getErrors();
      for (final Resource.Diagnostic element : _errors) {
        InputOutput.<String>println(element.getMessage());
      }
    }
  }
}
