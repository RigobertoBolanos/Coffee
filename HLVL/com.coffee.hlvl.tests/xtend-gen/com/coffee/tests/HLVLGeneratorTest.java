/**
 * generated by Xtext 2.12.0
 */
package com.coffee.tests;

import com.coffee.generator.Dialect;
import com.coffee.generator.HlvlGenerator;
import com.coffee.generator.IHLVLParser;
import com.coffee.generator.ParserFactory;
import com.coffee.hlvl.Model;
import com.coffee.tests.HlvlInjectorProvider;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * Class to test the correct parsing of HLVL
 * @author Angela Villota
 * @version HLVL V4
 * November 2018
 */
@RunWith(XtextRunner.class)
@InjectWith(HlvlInjectorProvider.class)
@SuppressWarnings("all")
public class HLVLGeneratorTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void getDialect() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("boolean A");
      _builder.newLine();
      _builder.append("boolean B");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("r1: common(A,B)");
      _builder.newLine();
      final String basicProgram = _builder.toString();
      Model model = this.parseHelper.parse(basicProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      HlvlGenerator gen = new HlvlGenerator();
      gen.findDialect(model);
      Assert.assertEquals(Dialect.BASIC, gen.findDialect(model));
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("model empty");
      _builder_1.newLine();
      _builder_1.append("elements:");
      _builder_1.newLine();
      _builder_1.append("boolean A");
      _builder_1.newLine();
      _builder_1.append("att boolean B");
      _builder_1.newLine();
      _builder_1.append("relations:");
      _builder_1.newLine();
      _builder_1.append("r1: common(A,B)");
      _builder_1.newLine();
      final String attProgram = _builder_1.toString();
      model = this.parseHelper.parse(attProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      HlvlGenerator _hlvlGenerator = new HlvlGenerator();
      gen = _hlvlGenerator;
      gen.findDialect(model);
      Assert.assertEquals(Dialect.ATTRIBUTE, gen.findDialect(model));
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("model empty");
      _builder_2.newLine();
      _builder_2.append("elements:");
      _builder_2.newLine();
      _builder_2.append("boolean A");
      _builder_2.newLine();
      _builder_2.append("boolean B");
      _builder_2.newLine();
      _builder_2.append("relations:");
      _builder_2.newLine();
      _builder_2.append("r1: decomposition(A, [B], [1,4])");
      _builder_2.newLine();
      final String multProgram = _builder_2.toString();
      model = this.parseHelper.parse(multProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      HlvlGenerator _hlvlGenerator_1 = new HlvlGenerator();
      gen = _hlvlGenerator_1;
      gen.findDialect(model);
      Assert.assertEquals(Dialect.MULTIPLICITY, gen.findDialect(model));
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("model empty");
      _builder_3.newLine();
      _builder_3.append("elements:");
      _builder_3.newLine();
      _builder_3.append("boolean A");
      _builder_3.newLine();
      _builder_3.append("boolean B");
      _builder_3.newLine();
      _builder_3.append("att integer C variants: 1..5");
      _builder_3.newLine();
      _builder_3.append("relations:");
      _builder_3.newLine();
      _builder_3.append("r1: decomposition(A, [B], [1,4])");
      _builder_3.newLine();
      final String attMultProgram = _builder_3.toString();
      model = this.parseHelper.parse(attMultProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      HlvlGenerator _hlvlGenerator_2 = new HlvlGenerator();
      gen = _hlvlGenerator_2;
      gen.findDialect(model);
      Assert.assertEquals(Dialect.MULTIPLICITY, gen.findDialect(model));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void boolParser() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("boolean A");
      _builder.newLine();
      _builder.append("boolean B");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("r1: common(A,B)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("var bool : A ;");
      _builder_1.newLine();
      _builder_1.append("var bool : B ;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint A = true ;");
      _builder_1.newLine();
      _builder_1.append("constraint B = true ;");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      final IHLVLParser parser = ParserFactory.getParser(Dialect.BASIC, model.getName());
      final CharSequence actual = parser.parseModel(model);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void gplTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model GPL");
      _builder.newLine();
      _builder.append("elements:  ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean GPL ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Gtp ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean directed");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean undirected");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean weighted");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean unweighted");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean BFS");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean DFS");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Algorithms");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean connected");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean stronglyc");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean cycle");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean mstprim");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean mstkruskal");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean shortest");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R1: common(GPL)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R2: decomposition(GPL,[Weight, Search], [0,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R3: decomposition(GPL, [Gtp, Algorithms], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R3X: group(Gtp, [directed, undirected], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R4: group(Weight, [weighted, unweighted], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R5: group(Search, [BFS, DFS], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R6: group(Algorithms, [connected, stronglyc, cycle, mstprim, mstkruskal, shortest], [1,*])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R7: implies(mstprim, unweighted)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R8: mutex(stronglyc, shortest)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R9: expression(undirected OR ~mstprim)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R10: expression(directed OR ~shortest)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R11: expression( ~mstprim OR ~mstkruskal )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R12: expression( unweighted OR ~mstkruskal )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R13: expression( undirected OR ~stronglyc )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R14: expression( ~connected OR ~stronglyc )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R15: expression( Search OR ~connected )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R16: expression( undirected OR ~mstkruskal )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R17: expression( ~mstkruskal OR ~shortest )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R18: expression( DFS OR ~cycle )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R19: expression( ~mstprim OR ~shortest)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      final HlvlGenerator gen = new HlvlGenerator();
      final IHLVLParser parser = ParserFactory.getParser(gen.findDialect(model), model.getName());
      final CharSequence actual = parser.parseModel(model);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("var bool : GPL ;");
      _builder_1.newLine();
      _builder_1.append("var bool : Gtp ;");
      _builder_1.newLine();
      _builder_1.append("var bool : directed ;");
      _builder_1.newLine();
      _builder_1.append("var bool : undirected ;");
      _builder_1.newLine();
      _builder_1.append("var bool : Weight ;");
      _builder_1.newLine();
      _builder_1.append("var bool : weighted ;");
      _builder_1.newLine();
      _builder_1.append("var bool : unweighted ;");
      _builder_1.newLine();
      _builder_1.append("var bool : Search ;");
      _builder_1.newLine();
      _builder_1.append("var bool : BFS ;");
      _builder_1.newLine();
      _builder_1.append("var bool : DFS ;");
      _builder_1.newLine();
      _builder_1.append("var bool : Algorithms ;");
      _builder_1.newLine();
      _builder_1.append("var bool : connected ;");
      _builder_1.newLine();
      _builder_1.append("var bool : stronglyc ;");
      _builder_1.newLine();
      _builder_1.append("var bool : cycle ;");
      _builder_1.newLine();
      _builder_1.append("var bool : mstprim ;");
      _builder_1.newLine();
      _builder_1.append("var bool : mstkruskal ;");
      _builder_1.newLine();
      _builder_1.append("var bool : shortest ;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint GPL = true ;");
      _builder_1.newLine();
      _builder_1.append("constraint Weight -> GPL ;");
      _builder_1.newLine();
      _builder_1.append("constraint Search -> GPL ;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL <-> Gtp ;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL <-> Algorithms ;");
      _builder_1.newLine();
      _builder_1.append("constraint directed <-> (not(undirected) /\\ Gtp) ;");
      _builder_1.newLine();
      _builder_1.append("constraint undirected <-> (not(directed) /\\ Gtp) ;");
      _builder_1.newLine();
      _builder_1.append("constraint weighted <-> (not(unweighted) /\\ Weight) ;");
      _builder_1.newLine();
      _builder_1.append("constraint unweighted <-> (not(weighted) /\\ Weight) ;");
      _builder_1.newLine();
      _builder_1.append("constraint BFS <-> (not(DFS) /\\ Search) ;");
      _builder_1.newLine();
      _builder_1.append("constraint DFS <-> (not(BFS) /\\ Search) ;");
      _builder_1.newLine();
      _builder_1.append("constraint Algorithms <-> ( connected \\/ stronglyc \\/ cycle \\/ mstprim \\/ mstkruskal \\/ shortest ) ;");
      _builder_1.newLine();
      _builder_1.append("constraint mstprim -> unweighted ;");
      _builder_1.newLine();
      _builder_1.append("constraint not (stronglyc /\\ shortest);");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected \\/ not(mstprim)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (directed \\/ not(shortest)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstprim) \\/ not(mstkruskal)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (unweighted \\/ not(mstkruskal)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected \\/ not(stronglyc)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (not(connected) \\/ not(stronglyc)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (Search \\/ not(connected)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected \\/ not(mstkruskal)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstkruskal) \\/ not(shortest)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (DFS \\/ not(cycle)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstprim) \\/ not(shortest)) ;");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void attParser() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("boolean A");
      _builder.newLine();
      _builder.append("boolean B");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("r1: common(A,B)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("var bool : GPL ;");
      _builder_1.newLine();
      _builder_1.append("var bool : Gtp ;");
      _builder_1.newLine();
      _builder_1.append("var bool : directed ;");
      _builder_1.newLine();
      _builder_1.append("var bool : undirected ;");
      _builder_1.newLine();
      _builder_1.append("var bool : Weight ;");
      _builder_1.newLine();
      _builder_1.append("var bool : weighted ;");
      _builder_1.newLine();
      _builder_1.append("var bool : unweighted ;");
      _builder_1.newLine();
      _builder_1.append("var bool : Search ;");
      _builder_1.newLine();
      _builder_1.append("var bool : BFS ;");
      _builder_1.newLine();
      _builder_1.append("var bool : DFS ;");
      _builder_1.newLine();
      _builder_1.append("var bool : Algorithms ;");
      _builder_1.newLine();
      _builder_1.append("var bool : connected ;");
      _builder_1.newLine();
      _builder_1.append("var bool : stronglyc ;");
      _builder_1.newLine();
      _builder_1.append("var bool : cycle ;");
      _builder_1.newLine();
      _builder_1.append("var bool : mstprim ;");
      _builder_1.newLine();
      _builder_1.append("var bool : mstkruskal ;");
      _builder_1.newLine();
      _builder_1.append("var bool : shortest ;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint GPL = true ;");
      _builder_1.newLine();
      _builder_1.append("constraint Weight -> GPL ;");
      _builder_1.newLine();
      _builder_1.append("constraint Search -> GPL ;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL <-> Gtp ;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL <-> Algorithms ;");
      _builder_1.newLine();
      _builder_1.append("constraint directed <-> (not(undirected) /\\ Gtp) ;");
      _builder_1.newLine();
      _builder_1.append("constraint undirected <-> (not(directed) /\\ Gtp) ;");
      _builder_1.newLine();
      _builder_1.append("constraint weighted <-> (not(unweighted) /\\ Weight) ;");
      _builder_1.newLine();
      _builder_1.append("constraint unweighted <-> (not(weighted) /\\ Weight) ;");
      _builder_1.newLine();
      _builder_1.append("constraint BFS <-> (not(DFS) /\\ Search) ;");
      _builder_1.newLine();
      _builder_1.append("constraint DFS <-> (not(BFS) /\\ Search) ;");
      _builder_1.newLine();
      _builder_1.append("constraint Algorithms <-> ( connected \\/ stronglyc \\/ cycle \\/ mstprim \\/ mstkruskal \\/ shortest ) ;");
      _builder_1.newLine();
      _builder_1.append("constraint mstprim -> unweighted ;");
      _builder_1.newLine();
      _builder_1.append("constraint not (stronglyc /\\ shortest);");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected \\/ not(mstprim)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (directed \\/ not(shortest)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstprim) \\/ not(mstkruskal)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (unweighted \\/ not(mstkruskal)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected \\/ not(stronglyc)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (not(connected) \\/ not(stronglyc)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (Search \\/ not(connected)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected \\/ not(mstkruskal)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstkruskal) \\/ not(shortest)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (DFS \\/ not(cycle)) ;");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstprim) \\/ not(shortest)) ;");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      final IHLVLParser parser = ParserFactory.getParser(Dialect.ATTRIBUTE, model.getName());
      final CharSequence actual = parser.parseModel(model);
      InputOutput.<CharSequence>println(actual);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * to print the parsing errors
   */
  public void printErrors(final Model model) {
    boolean _isEmpty = model.eResource().getErrors().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<Resource.Diagnostic> _errors = model.eResource().getErrors();
      for (final Resource.Diagnostic element : _errors) {
        InputOutput.<String>println(element.getMessage());
      }
    }
  }
}
