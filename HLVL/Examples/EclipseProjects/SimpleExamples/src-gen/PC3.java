//Java imports
import java.util.HashMap;
import java.util.List;
//imports for hlcl 
import com.variamos.hlcl.core.HlclProgram; 
import com.variamos.hlcl.model.expressions.HlclFactory; 
import com.variamos.hlcl.model.domains.BinaryDomain;
import com.variamos.hlcl.model.domains.IntervalDomain;
import com.variamos.hlcl.model.domains.RangeDomain;
import com.variamos.hlcl.model.domains.StringDomain;
import com.variamos.hlcl.model.expressions.Identifier;
import com.variamos.hlcl.model.expressions.IntBooleanExpression;
import com.variamos.hlcl.model.expressions.NumericIdentifier;
import com.variamos.hlcl.model.expressions.SymbolicExpression;
import com.variamos.hlcl.model.expressions.IntNumericExpression;

//imports for solver
import com.variamos.solver.core.SWIPrologSolver;
import com.variamos.solver.core.compiler.Hlcl2SWIProlog;
import com.variamos.solver.model.SolverSolution;

/**
* This class is automatically generated from a product line model described in 
* constraint programming HLCL
* @author Angela Villota 
* @version CP-HLCL Version1
*
*/
public class PC3 { 			
	
	private String modelName;
	private HlclFactory factory;
	private HlclProgram hlclProgram;
	private SWIPrologSolver swiSolver;
	private String prologProgram;
	private HashMap<String,IntBooleanExpression> constraints;
	private HashMap<String,Identifier> variables;
	private HashMap<String,NumericIdentifier> numbers;
	/**
	* This is an autogenerated method* Constructor method
	* @param modelName is the name of the model in the  CP-HLCL specification
	*/
	public PC3(String modelName){ 				
		
		this.modelName= modelName;
		hlclProgram= new HlclProgram();
		factory = new HlclFactory();
		variables= new HashMap<String,Identifier>();
		constraints= new HashMap<String,IntBooleanExpression>();
		numbers= new HashMap<String,NumericIdentifier>();
		NumericIdentifier one = factory.number(1);
		NumericIdentifier zero= factory.number(0);
		numbers.put("1", one);
		numbers.put("0", zero);
	} 			
	public static void main(String[] args) {
		PC3 obj = new PC3("PC3");
		obj.run();
	}
	public void run(){
		// first obtain a HlclProgram from the specification
		transformVars();
		transformConstraints(); 
		// use the solver to solve the constraint program
		evaluateSatisfiability();
		//show the output
		System.out.println(prologProgram);
	}
	public void transformVars() {
//declaring variable PC3
Identifier PC3 = factory.newIdentifier("PC3");
  			BinaryDomain PC3Dom= new BinaryDomain();
PC3.setDomain(PC3Dom);	
variables.put("PC3", PC3); //including the variable in the map
//declaring variable Mainboard
Identifier Mainboard = factory.newIdentifier("Mainboard");
  			BinaryDomain MainboardDom= new BinaryDomain();
Mainboard.setDomain(MainboardDom);	
variables.put("Mainboard", Mainboard); //including the variable in the map
//declaring variable Socket_1151
Identifier Socket_1151 = factory.newIdentifier("Socket_1151");
  			BinaryDomain Socket_1151Dom= new BinaryDomain();
Socket_1151.setDomain(Socket_1151Dom);	
variables.put("Socket_1151", Socket_1151); //including the variable in the map
//declaring variable Socket_AM4
Identifier Socket_AM4 = factory.newIdentifier("Socket_AM4");
  			BinaryDomain Socket_AM4Dom= new BinaryDomain();
Socket_AM4.setDomain(Socket_AM4Dom);	
variables.put("Socket_AM4", Socket_AM4); //including the variable in the map
//declaring variable RAM
Identifier RAM = factory.newIdentifier("RAM");
  			BinaryDomain RAMDom= new BinaryDomain();
RAM.setDomain(RAMDom);	
variables.put("RAM", RAM); //including the variable in the map
//declaring variable Power_Supply_Unit
Identifier Power_Supply_Unit = factory.newIdentifier("Power_Supply_Unit");
  			BinaryDomain Power_Supply_UnitDom= new BinaryDomain();
Power_Supply_Unit.setDomain(Power_Supply_UnitDom);	
variables.put("Power_Supply_Unit", Power_Supply_Unit); //including the variable in the map
//declaring variable Optical_Drive
Identifier Optical_Drive = factory.newIdentifier("Optical_Drive");
  			BinaryDomain Optical_DriveDom= new BinaryDomain();
Optical_Drive.setDomain(Optical_DriveDom);	
variables.put("Optical_Drive", Optical_Drive); //including the variable in the map
//declaring variable CPU_Cooler
Identifier CPU_Cooler = factory.newIdentifier("CPU_Cooler");
  			BinaryDomain CPU_CoolerDom= new BinaryDomain();
CPU_Cooler.setDomain(CPU_CoolerDom);	
variables.put("CPU_Cooler", CPU_Cooler); //including the variable in the map
//declaring variable Socket_1151_compatible
Identifier Socket_1151_compatible = factory.newIdentifier("Socket_1151_compatible");
  			BinaryDomain Socket_1151_compatibleDom= new BinaryDomain();
Socket_1151_compatible.setDomain(Socket_1151_compatibleDom);	
variables.put("Socket_1151_compatible", Socket_1151_compatible); //including the variable in the map
//declaring variable Socket_AM4_compatible
Identifier Socket_AM4_compatible = factory.newIdentifier("Socket_AM4_compatible");
  			BinaryDomain Socket_AM4_compatibleDom= new BinaryDomain();
Socket_AM4_compatible.setDomain(Socket_AM4_compatibleDom);	
variables.put("Socket_AM4_compatible", Socket_AM4_compatible); //including the variable in the map
//declaring variable A
Identifier A = factory.newIdentifier("A");
 				RangeDomain ADom= new RangeDomain(1, 5);
A.setDomain(ADom);	
variables.put("A", A); //including the variable in the map
//declaring variable B
Identifier B = factory.newIdentifier("B");
 				RangeDomain BDom= new RangeDomain(5, 10);
B.setDomain(BDom);	
variables.put("B", B); //including the variable in the map
	}
	public void transformConstraints() {
//
//declaring constraint C_PC3


Identifier C_PC3_left = variables.get("PC3");

NumericIdentifier C_PC3_right = getValue("1");
IntBooleanExpression C_PC3=
factory.equals(C_PC3_left, C_PC3_right);
constraints.put("C_PC3", C_PC3);
hlclProgram.add(C_PC3);
//
//declaring constraint C1


Identifier C1_left = variables.get("PC3");

Identifier C1_right = variables.get("Mainboard");
IntBooleanExpression C1=
factory.equals(C1_left, C1_right);
constraints.put("C1", C1);
hlclProgram.add(C1);
//
//declaring constraint C3


Identifier C3_left = variables.get("Mainboard");

Identifier C3_right = variables.get("RAM");
IntBooleanExpression C3=
factory.equals(C3_left, C3_right);
constraints.put("C3", C3);
hlclProgram.add(C3);
//
//declaring constraint C4


Identifier C4_left = variables.get("PC3");

Identifier C4_right = variables.get("Power_Supply_Unit");
IntBooleanExpression C4=
factory.equals(C4_left, C4_right);
constraints.put("C4", C4);
hlclProgram.add(C4);
//
//declaring constraint C6


Identifier C6_left = variables.get("PC3");

Identifier C6_right = variables.get("CPU_Cooler");
IntBooleanExpression C6=
factory.equals(C6_left, C6_right);
constraints.put("C6", C6);
hlclProgram.add(C6);
//
//declaring constraint C5


Identifier C5_left = variables.get("PC3");

Identifier C5_right = variables.get("Optical_Drive");
IntBooleanExpression C5=
factory.greaterOrEqualsThan(C5_left, C5_right);
constraints.put("C5", C5);
hlclProgram.add(C5);
//
//declaring constraint C8


Identifier C8_left = variables.get("Socket_AM4");

Identifier C8_right = variables.get("Socket_AM4_compatible");
IntBooleanExpression C8=factory.implies(C8_left, C8_right);		
constraints.put("C8", C8);
hlclProgram.add(C8);
//
//declaring constraint C9


Identifier C9_left = variables.get("Socket_1151");

Identifier C9_right = variables.get("Socket_1151_compatible");
IntBooleanExpression C9=factory.implies(C9_left, C9_right);		
constraints.put("C9", C9);
hlclProgram.add(C9);
//
//declaring constraint C2






Identifier C2_left_left_left_left_left = variables.get("Socket_1151");

Identifier C2_left_left_left_left_right = variables.get("Mainboard");
IntBooleanExpression C2_left_left_left_left=factory.implies(C2_left_left_left_left_left, C2_left_left_left_left_right);		


Identifier C2_left_left_left_right_left = variables.get("Socket_AM4");

Identifier C2_left_left_left_right_right = variables.get("Mainboard");
IntBooleanExpression C2_left_left_left_right=factory.implies(C2_left_left_left_right_left, C2_left_left_left_right_right);		
IntBooleanExpression C2_left_left_left=factory.and(C2_left_left_left_left, C2_left_left_left_right);		


Identifier C2_left_left_right_left = variables.get("Mainboard");

NumericIdentifier C2_left_left_right_right = getValue("1");
IntBooleanExpression C2_left_left_right=
factory.greaterOrEqualsThan(C2_left_left_right_left, C2_left_left_right_right);
IntBooleanExpression C2_left_left=factory.and(C2_left_left_left, C2_left_left_right);		




Identifier C2_left_right_left_left_left = variables.get("Socket_1151");

Identifier C2_left_right_left_left_right = variables.get("Socket_AM4");
IntNumericExpression C2_left_right_left_left=factory.sum(C2_left_right_left_left_left, C2_left_right_left_left_right);	

NumericIdentifier C2_left_right_left_right = getValue("1");
IntBooleanExpression C2_left_right_left=
factory.greaterOrEqualsThan(C2_left_right_left_left, C2_left_right_left_right);


Identifier C2_left_right_right_left = variables.get("Mainboard");

NumericIdentifier C2_left_right_right_right = getValue("1");
IntBooleanExpression C2_left_right_right=
factory.greaterOrEqualsThan(C2_left_right_right_left, C2_left_right_right_right);
IntBooleanExpression C2_left_right=factory.and(C2_left_right_left, C2_left_right_right);		
IntBooleanExpression C2_left=factory.implies(C2_left_left, C2_left_right);		



Identifier C2_right_left_left = variables.get("Socket_1151");

Identifier C2_right_left_right = variables.get("Socket_AM4");
IntNumericExpression C2_right_left=factory.sum(C2_right_left_left, C2_right_left_right);	

NumericIdentifier C2_right_right = getValue("1");
IntBooleanExpression C2_right=
factory.lessOrEqualsThan(C2_right_left, C2_right_right);
IntBooleanExpression C2=factory.implies(C2_left, C2_right);		
constraints.put("C2", C2);
hlclProgram.add(C2);
//
//declaring constraint C7






Identifier C7_left_left_left_left_left = variables.get("Socket_1151_compatible");

Identifier C7_left_left_left_left_right = variables.get("CPU_Cooler");
IntBooleanExpression C7_left_left_left_left=factory.implies(C7_left_left_left_left_left, C7_left_left_left_left_right);		


Identifier C7_left_left_left_right_left = variables.get("Socket_AM4_compatible");

Identifier C7_left_left_left_right_right = variables.get("CPU_Cooler");
IntBooleanExpression C7_left_left_left_right=factory.implies(C7_left_left_left_right_left, C7_left_left_left_right_right);		
IntBooleanExpression C7_left_left_left=factory.and(C7_left_left_left_left, C7_left_left_left_right);		


Identifier C7_left_left_right_left = variables.get("CPU_Cooler");

NumericIdentifier C7_left_left_right_right = getValue("1");
IntBooleanExpression C7_left_left_right=
factory.greaterOrEqualsThan(C7_left_left_right_left, C7_left_left_right_right);
IntBooleanExpression C7_left_left=factory.and(C7_left_left_left, C7_left_left_right);		




Identifier C7_left_right_left_left_left = variables.get("Socket_1151_compatible");

Identifier C7_left_right_left_left_right = variables.get("Socket_AM4_compatible");
IntNumericExpression C7_left_right_left_left=factory.sum(C7_left_right_left_left_left, C7_left_right_left_left_right);	

NumericIdentifier C7_left_right_left_right = getValue("1");
IntBooleanExpression C7_left_right_left=
factory.greaterOrEqualsThan(C7_left_right_left_left, C7_left_right_left_right);


Identifier C7_left_right_right_left = variables.get("CPU_Cooler");

NumericIdentifier C7_left_right_right_right = getValue("1");
IntBooleanExpression C7_left_right_right=
factory.greaterOrEqualsThan(C7_left_right_right_left, C7_left_right_right_right);
IntBooleanExpression C7_left_right=factory.and(C7_left_right_left, C7_left_right_right);		
IntBooleanExpression C7_left=factory.implies(C7_left_left, C7_left_right);		



Identifier C7_right_left_left = variables.get("Socket_1151_compatible");

Identifier C7_right_left_right = variables.get("Socket_AM4_compatible");
IntNumericExpression C7_right_left=factory.sum(C7_right_left_left, C7_right_left_right);	

NumericIdentifier C7_right_right = getValue("3");
IntBooleanExpression C7_right=
factory.lessOrEqualsThan(C7_right_left, C7_right_right);
IntBooleanExpression C7=factory.implies(C7_left, C7_right);		
constraints.put("C7", C7);
hlclProgram.add(C7);
//
//declaring constraint C20



Identifier C20_left_left = variables.get("A");

Identifier C20_left_right = variables.get("B");
IntNumericExpression C20_left=factory.sum(C20_left_left, C20_left_right);	

NumericIdentifier C20_right = getValue("1");
IntBooleanExpression C20=
factory.greaterThan(C20_left, C20_right);
constraints.put("C20", C20);
hlclProgram.add(C20);
	}
	public boolean evaluateSatisfiability(){
		// the output
		boolean evaluation= false;
		// //to transform the hllcl program into a prolog  file, 
		// //these lines are commented because they are useful for debugging 
		Hlcl2SWIProlog swiPrologTransformer = new Hlcl2SWIProlog(); 
		prologProgram = swiPrologTransformer.transform(hlclProgram);
				
		// an instance of the solver for Swiprolog 
		swiSolver= new SWIPrologSolver();
		swiSolver.setHLCLProgram(hlclProgram); //passing the hlcl program to the solver
		swiSolver.solve(); // This methhod prepares the solver 
		List<SolverSolution> solutions = swiSolver.getAllSolutions(); // Consulting if the solver has one solution
			evaluation= solutions.size()>0;
			for (SolverSolution solverSolution : solutions) {
				System.out.println(solverSolution.toString());
			}	return evaluation;
	}
	/** 
	* To obtain the NumericIdentifier representation of a value 
	* @param id the string with the value 
	* @return the NumericIdentifier 
	*/
	public NumericIdentifier getValue(String id) {	NumericIdentifier value= numbers.get(id); 
	 	if (value==null) { 
	 		if (id.equals("selected")) { 
	 			value= numbers.get("1"); 
	 		} 
	 		else if(id.equals("unselected")) {
				value= numbers.get("0"); 
			} 
			else { 
				value= factory.number(Integer.parseInt(id)); 
				numbers.put(id, value);
			}
	 	} 
	 	return value; 
	 } 
		public String getModelName() {
			return modelName;
		}
		public void setModelName(String modelName) {
			this.modelName = modelName;
		}
		public HlclFactory getFactory() {
			return factory;
		}
		public void setFactory(HlclFactory factory) {
			this.factory = factory;
		}
		public HlclProgram getHlclProgram() {
			return hlclProgram;
		}
		public void setHlclProgram(HlclProgram hlclProgram) {
			this.hlclProgram = hlclProgram;
		}
} 	