/*
 * generated by Xtext 2.12.0
 */
package com.coffee.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class THLCLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cVariablesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesVariableParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Keyword cConstraintsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConstraintsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstraintsConstraintParserRuleCall_5_0 = (RuleCall)cConstraintsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cStrategyKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cStrategyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cStrategyStrategyParserRuleCall_6_1_0 = (RuleCall)cStrategyAssignment_6_1.eContents().get(0);
		
		//// A CSP is composed by a set of variables with their domains, a set of constraints and a series of search strategies
		//Model:
		//	'model' name=ID 'variables:' variables+=Variable* 'constraints:' constraints+=Constraint* ('strategy:'
		//	strategy=Strategy)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' name=ID 'variables:' variables+=Variable* 'constraints:' constraints+=Constraint* ('strategy:'
		//strategy=Strategy)?
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'variables:'
		public Keyword getVariablesKeyword_2() { return cVariablesKeyword_2; }
		
		//variables+=Variable*
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_3_0() { return cVariablesVariableParserRuleCall_3_0; }
		
		//'constraints:'
		public Keyword getConstraintsKeyword_4() { return cConstraintsKeyword_4; }
		
		//constraints+=Constraint*
		public Assignment getConstraintsAssignment_5() { return cConstraintsAssignment_5; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_5_0() { return cConstraintsConstraintParserRuleCall_5_0; }
		
		//('strategy:' strategy=Strategy)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'strategy:'
		public Keyword getStrategyKeyword_6_0() { return cStrategyKeyword_6_0; }
		
		//strategy=Strategy
		public Assignment getStrategyAssignment_6_1() { return cStrategyAssignment_6_1; }
		
		//Strategy
		public RuleCall getStrategyStrategyParserRuleCall_6_1_0() { return cStrategyStrategyParserRuleCall_6_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVarTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDomainKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDomainAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDomainDomainDeclarationParserRuleCall_2_1_0 = (RuleCall)cDomainAssignment_2_1.eContents().get(0);
		
		////Variables and domains declarations	
		//Variable:
		//	type=VarType name=ID ('domain:' domain=DomainDeclaration)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=VarType name=ID ('domain:' domain=DomainDeclaration)?
		public Group getGroup() { return cGroup; }
		
		//type=VarType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//VarType
		public RuleCall getTypeVarTypeParserRuleCall_0_0() { return cTypeVarTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('domain:' domain=DomainDeclaration)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'domain:'
		public Keyword getDomainKeyword_2_0() { return cDomainKeyword_2_0; }
		
		//domain=DomainDeclaration
		public Assignment getDomainAssignment_2_1() { return cDomainAssignment_2_1; }
		
		//DomainDeclaration
		public RuleCall getDomainDomainDeclarationParserRuleCall_2_1_0() { return cDomainDomainDeclarationParserRuleCall_2_1_0; }
	}
	public class DomainDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.DomainDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntervalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DomainDeclaration:
		//	Interval | Enumeration //| Mixed //domains
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Interval | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Interval
		public RuleCall getIntervalParserRuleCall_0() { return cIntervalParserRuleCall_0; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_1() { return cEnumerationParserRuleCall_1; }
	}
	public class IntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Interval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartNumberParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndNumberParserRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//Interval:
		//	start=Number '..' end=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//start=Number '..' end=Number
		public Group getGroup() { return cGroup; }
		
		//start=Number
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//Number
		public RuleCall getStartNumberParserRuleCall_0_0() { return cStartNumberParserRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//end=Number
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }
		
		//Number
		public RuleCall getEndNumberParserRuleCall_2_0() { return cEndNumberParserRuleCall_2_0; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListListOfValuesParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Enumeration:
		//	'[' list=ListOfValues ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' list=ListOfValues ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//list=ListOfValues
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//ListOfValues
		public RuleCall getListListOfValuesParserRuleCall_1_0() { return cListListOfValuesParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		///**
		// * Constraints and constraints declarations
		// */ Constraint:
		//	name=ID ':' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGlobalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	Relational | Global
		//	//Global|Logic|Relational|Control
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Relational | Global
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Relational
		public RuleCall getRelationalParserRuleCall_0() { return cRelationalParserRuleCall_0; }
		
		//Global
		public RuleCall getGlobalParserRuleCall_1() { return cGlobalParserRuleCall_1; }
	}
	public class RelationalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Relational");
		private final RuleCall cIffParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Relational:
		//	Iff;
		@Override public ParserRule getRule() { return rule; }
		
		//Iff
		public RuleCall getIffParserRuleCall() { return cIffParserRuleCall; }
	}
	public class IffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Iff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIffLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightImpliesParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Iff Relational:
		//	Implies ({Iff.left=current} "<=>" right=Implies)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Implies ({Iff.left=current} "<=>" right=Implies)*
		public Group getGroup() { return cGroup; }
		
		//Implies
		public RuleCall getImpliesParserRuleCall_0() { return cImpliesParserRuleCall_0; }
		
		//({Iff.left=current} "<=>" right=Implies)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Iff.left=current}
		public Action getIffLeftAction_1_0() { return cIffLeftAction_1_0; }
		
		//"<=>"
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_1_1() { return cLessThanSignEqualsSignGreaterThanSignKeyword_1_1; }
		
		//right=Implies
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Implies
		public RuleCall getRightImpliesParserRuleCall_1_2_0() { return cRightImpliesParserRuleCall_1_2_0; }
	}
	public class ImpliesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Implies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImpliesLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Implies Relational:
		//	Or ({Implies.left=current} "=>" right=Or)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Or ({Implies.left=current} "=>" right=Or)*
		public Group getGroup() { return cGroup; }
		
		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }
		
		//({Implies.left=current} "=>" right=Or)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Implies.left=current}
		public Action getImpliesLeftAction_1_0() { return cImpliesLeftAction_1_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//right=Or
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Or
		public RuleCall getRightOrParserRuleCall_1_2_0() { return cRightOrParserRuleCall_1_2_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Relational:
		//	And ({Or.left=current} "OR" right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "OR" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "OR" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"OR"
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Relational:
		//	Equality ({And.left=current} "AND" right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} "AND" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} "AND" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Relational:
		//	Comparison ({Equality.left=current} op=("=" | "!=") right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=("=" | "!=") right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=("=" | "!=") right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=("=" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("=" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"="
		public Keyword getOpEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Relational:
		//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Relational:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Plus.left=current} '+' | {Minus.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpModKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Relational:
		//	Primary ({MulOrDiv.left=current} op=('*' | '/' | 'mod') right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MulOrDiv.left=current} op=('*' | '/' | 'mod') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*' | '/' | 'mod') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/' | 'mod')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/' | 'mod')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//'mod'
		public Keyword getOpModKeyword_1_1_0_2() { return cOpModKeyword_1_1_0_2; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cRelationalParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNegationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTildeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cUnaryAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOpUnaryOpParserRuleCall_2_1_0 = (RuleCall)cOpAssignment_2_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cFunctionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cOpAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOpFunctionOpParserRuleCall_3_1_0 = (RuleCall)cOpAssignment_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cLeftAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cLeftPrimaryParserRuleCall_3_3_0 = (RuleCall)cLeftAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cRightAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cRightPrimaryParserRuleCall_3_5_0 = (RuleCall)cRightAssignment_3_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final RuleCall cAtomicParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Primary Relational:
		//	'(' Relational ')' | {Negation} "~" expression=Primary | {Unary} op=UnaryOp expression=Primary | {Function}
		//	op=FunctionOp '(' left=Primary ',' right=Primary ')' | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Relational ')' | {Negation} "~" expression=Primary | {Unary} op=UnaryOp expression=Primary | {Function}
		//op=FunctionOp '(' left=Primary ',' right=Primary ')' | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Relational ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Relational
		public RuleCall getRelationalParserRuleCall_0_1() { return cRelationalParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Negation} "~" expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Negation}
		public Action getNegationAction_1_0() { return cNegationAction_1_0; }
		
		//"~"
		public Keyword getTildeKeyword_1_1() { return cTildeKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//{Unary} op=UnaryOp expression=Primary
		public Group getGroup_2() { return cGroup_2; }
		
		//{Unary}
		public Action getUnaryAction_2_0() { return cUnaryAction_2_0; }
		
		//op=UnaryOp
		public Assignment getOpAssignment_2_1() { return cOpAssignment_2_1; }
		
		//UnaryOp
		public RuleCall getOpUnaryOpParserRuleCall_2_1_0() { return cOpUnaryOpParserRuleCall_2_1_0; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_2_2_0() { return cExpressionPrimaryParserRuleCall_2_2_0; }
		
		//{Function} op=FunctionOp '(' left=Primary ',' right=Primary ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{Function}
		public Action getFunctionAction_3_0() { return cFunctionAction_3_0; }
		
		//op=FunctionOp
		public Assignment getOpAssignment_3_1() { return cOpAssignment_3_1; }
		
		//FunctionOp
		public RuleCall getOpFunctionOpParserRuleCall_3_1_0() { return cOpFunctionOpParserRuleCall_3_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//left=Primary
		public Assignment getLeftAssignment_3_3() { return cLeftAssignment_3_3; }
		
		//Primary
		public RuleCall getLeftPrimaryParserRuleCall_3_3_0() { return cLeftPrimaryParserRuleCall_3_3_0; }
		
		//','
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//right=Primary
		public Assignment getRightAssignment_3_5() { return cRightAssignment_3_5; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_3_5_0() { return cRightPrimaryParserRuleCall_3_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_6() { return cRightParenthesisKeyword_3_6; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_4() { return cAtomicParserRuleCall_4; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBoolConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cValueAlternatives_0_1_0 = (Alternatives)cValueAssignment_0_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_1_0_0 = (Keyword)cValueAlternatives_0_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1_0_1 = (Keyword)cValueAlternatives_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_1_1_0 = (CrossReference)cVariableAssignment_1_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVariableVariableCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		////Function returns Relational:
		////	op=FunctionOp '('left=Primary ',' right=Primary ')' 
		////;
		//Atomic Relational:
		//	{BoolConstant} value=('true' | 'false') | {VariableRef} variable=[Variable] | {IntConstant} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{BoolConstant} value=('true' | 'false') | {VariableRef} variable=[Variable] | {IntConstant} value=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_0() { return cGroup_0; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_0_0() { return cBoolConstantAction_0_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_0_1_0() { return cValueAlternatives_0_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_1_0_0() { return cValueTrueKeyword_0_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_1_0_1() { return cValueFalseKeyword_0_1_0_1; }
		
		//{VariableRef} variable=[Variable]
		public Group getGroup_1() { return cGroup_1; }
		
		//{VariableRef}
		public Action getVariableRefAction_1_0() { return cVariableRefAction_1_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_1_1_0() { return cVariableVariableCrossReference_1_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_1_1_0_1() { return cVariableVariableIDTerminalRuleCall_1_1_0_1; }
		
		//{IntConstant} value=INT
		public Group getGroup_2() { return cGroup_2; }
		
		//{IntConstant}
		public Action getIntConstantAction_2_0() { return cIntConstantAction_2_0; }
		
		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }
	}
	public class GlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Global");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpGlobalOpParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarsListOfIDsParserRuleCall_2_0 = (RuleCall)cVarsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesListOfListValuesParserRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		///**
		// * Global constraints
		// */ Global:
		//	op=GlobalOp '(' vars=ListOfIDs ')' ('[' values=ListOfListValues ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//op=GlobalOp '(' vars=ListOfIDs ')' ('[' values=ListOfListValues ']')?
		public Group getGroup() { return cGroup; }
		
		//op=GlobalOp
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//GlobalOp
		public RuleCall getOpGlobalOpParserRuleCall_0_0() { return cOpGlobalOpParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//vars=ListOfIDs
		public Assignment getVarsAssignment_2() { return cVarsAssignment_2; }
		
		//ListOfIDs
		public RuleCall getVarsListOfIDsParserRuleCall_2_0() { return cVarsListOfIDsParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//('[' values=ListOfListValues ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//values=ListOfListValues
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }
		
		//ListOfListValues
		public RuleCall getValuesListOfListValuesParserRuleCall_4_1_0() { return cValuesListOfListValuesParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
	}
	public class StrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Strategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOneKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTwoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		///*
		// * Control statement if-then-else
		// */ //Control:
		////	'if''('cond=BoolTerm ')' 'then' trueStatement= Expression 'else' elseStatement= Expression 'end_if'
		////;
		////Strategies
		//Strategy:
		//	'one' | 'two';
		@Override public ParserRule getRule() { return rule; }
		
		//'one' | 'two'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'one'
		public Keyword getOneKeyword_0() { return cOneKeyword_0; }
		
		//'two'
		public Keyword getTwoKeyword_1() { return cTwoKeyword_1; }
	}
	public class BoolValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.BoolVal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		////Values
		//BoolVal:
		//	value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Number");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Number:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class SymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Symbol");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Symbol:
		//	value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonEnumerableValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	Number | NonEnumerableValue;
		@Override public ParserRule getRule() { return rule; }
		
		//Number | NonEnumerableValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }
		
		//NonEnumerableValue
		public RuleCall getNonEnumerableValueParserRuleCall_1() { return cNonEnumerableValueParserRuleCall_1; }
	}
	public class NonEnumerableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.NonEnumerableValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolValParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSymbolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////EnumerableValue: Number ;
		//NonEnumerableValue:
		//	BoolVal | Symbol;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolVal | Symbol
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoolVal
		public RuleCall getBoolValParserRuleCall_0() { return cBoolValParserRuleCall_0; }
		
		//Symbol
		public RuleCall getSymbolParserRuleCall_1() { return cSymbolParserRuleCall_1; }
	}
	public class VarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.VarType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSymbolicKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		////Variables
		//VarType:
		//	'boolean' | 'integer' | 'symbolic';
		@Override public ParserRule getRule() { return rule; }
		
		//'boolean' | 'integer' | 'symbolic'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'boolean'
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }
		
		//'integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//'symbolic'
		public Keyword getSymbolicKeyword_2() { return cSymbolicKeyword_2; }
	}
	public class GlobalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.GlobalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAt_mostKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAll_differentKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//GlobalOp:
		//	'at_most' | 'all_different';
		@Override public ParserRule getRule() { return rule; }
		
		//'at_most' | 'all_different'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'at_most'
		public Keyword getAt_mostKeyword_0() { return cAt_mostKeyword_0; }
		
		//'all_different'
		public Keyword getAll_differentKeyword_1() { return cAll_differentKeyword_1; }
	}
	public class FunctionOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.FunctionOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPowKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDistKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMinKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMaxKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//FunctionOp:
		//	'pow' | 'dist' | 'min' | 'max';
		@Override public ParserRule getRule() { return rule; }
		
		//'pow' | 'dist' | 'min' | 'max'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'pow'
		public Keyword getPowKeyword_0() { return cPowKeyword_0; }
		
		//'dist'
		public Keyword getDistKeyword_1() { return cDistKeyword_1; }
		
		//'min'
		public Keyword getMinKeyword_2() { return cMinKeyword_2; }
		
		//'max'
		public Keyword getMaxKeyword_3() { return cMaxKeyword_3; }
	}
	public class UnaryOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.UnaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAbsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSqrtKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UnaryOp:
		//	'abs' | 'sqrt';
		@Override public ParserRule getRule() { return rule; }
		
		//'abs' | 'sqrt'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'abs'
		public Keyword getAbsKeyword_0() { return cAbsKeyword_0; }
		
		//'sqrt'
		public Keyword getSqrtKeyword_1() { return cSqrtKeyword_1; }
	}
	public class ListOfValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.ListOfValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesValueParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//ListOfValues:
		//	values+=Value (','+ values+=Value)*;
		@Override public ParserRule getRule() { return rule; }
		
		//values+=Value (','+ values+=Value)*
		public Group getGroup() { return cGroup; }
		
		//values+=Value
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_0_0() { return cValuesValueParserRuleCall_0_0; }
		
		//(','+ values+=Value)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','+
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//values+=Value
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_1_1_0() { return cValuesValueParserRuleCall_1_1_0; }
	}
	public class ListOfListValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.ListOfListValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListListOfValuesParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cListAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cListListOfValuesParserRuleCall_3_2_0 = (RuleCall)cListAssignment_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//ListOfListValues:
		//	'[' list+=ListOfValues ']' (','+ '[' list+=ListOfValues ']')*;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' list+=ListOfValues ']' (','+ '[' list+=ListOfValues ']')*
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//list+=ListOfValues
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//ListOfValues
		public RuleCall getListListOfValuesParserRuleCall_1_0() { return cListListOfValuesParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//(','+ '[' list+=ListOfValues ']')*
		public Group getGroup_3() { return cGroup_3; }
		
		//','+
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_1() { return cLeftSquareBracketKeyword_3_1; }
		
		//list+=ListOfValues
		public Assignment getListAssignment_3_2() { return cListAssignment_3_2; }
		
		//ListOfValues
		public RuleCall getListListOfValuesParserRuleCall_3_2_0() { return cListListOfValuesParserRuleCall_3_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}
	public class ListOfIDsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.THLCL.ListOfIDs");
		private final Assignment cIdsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_0 = (RuleCall)cIdsAssignment.eContents().get(0);
		
		//ListOfIDs:
		//	ids+=ID+;
		@Override public ParserRule getRule() { return rule; }
		
		//ids+=ID+
		public Assignment getIdsAssignment() { return cIdsAssignment; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_0() { return cIdsIDTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final VariableElements pVariable;
	private final DomainDeclarationElements pDomainDeclaration;
	private final IntervalElements pInterval;
	private final EnumerationElements pEnumeration;
	private final ConstraintElements pConstraint;
	private final ExpressionElements pExpression;
	private final RelationalElements pRelational;
	private final IffElements pIff;
	private final ImpliesElements pImplies;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final GlobalElements pGlobal;
	private final StrategyElements pStrategy;
	private final BoolValElements pBoolVal;
	private final NumberElements pNumber;
	private final SymbolElements pSymbol;
	private final ValueElements pValue;
	private final NonEnumerableValueElements pNonEnumerableValue;
	private final VarTypeElements pVarType;
	private final GlobalOpElements pGlobalOp;
	private final FunctionOpElements pFunctionOp;
	private final UnaryOpElements pUnaryOp;
	private final ListOfValuesElements pListOfValues;
	private final ListOfListValuesElements pListOfListValues;
	private final ListOfIDsElements pListOfIDs;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public THLCLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pVariable = new VariableElements();
		this.pDomainDeclaration = new DomainDeclarationElements();
		this.pInterval = new IntervalElements();
		this.pEnumeration = new EnumerationElements();
		this.pConstraint = new ConstraintElements();
		this.pExpression = new ExpressionElements();
		this.pRelational = new RelationalElements();
		this.pIff = new IffElements();
		this.pImplies = new ImpliesElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pGlobal = new GlobalElements();
		this.pStrategy = new StrategyElements();
		this.pBoolVal = new BoolValElements();
		this.pNumber = new NumberElements();
		this.pSymbol = new SymbolElements();
		this.pValue = new ValueElements();
		this.pNonEnumerableValue = new NonEnumerableValueElements();
		this.pVarType = new VarTypeElements();
		this.pGlobalOp = new GlobalOpElements();
		this.pFunctionOp = new FunctionOpElements();
		this.pUnaryOp = new UnaryOpElements();
		this.pListOfValues = new ListOfValuesElements();
		this.pListOfListValues = new ListOfListValuesElements();
		this.pListOfIDs = new ListOfIDsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.coffee.THLCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// A CSP is composed by a set of variables with their domains, a set of constraints and a series of search strategies
	//Model:
	//	'model' name=ID 'variables:' variables+=Variable* 'constraints:' constraints+=Constraint* ('strategy:'
	//	strategy=Strategy)?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////Variables and domains declarations	
	//Variable:
	//	type=VarType name=ID ('domain:' domain=DomainDeclaration)?;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//DomainDeclaration:
	//	Interval | Enumeration //| Mixed //domains
	//;
	public DomainDeclarationElements getDomainDeclarationAccess() {
		return pDomainDeclaration;
	}
	
	public ParserRule getDomainDeclarationRule() {
		return getDomainDeclarationAccess().getRule();
	}
	
	//Interval:
	//	start=Number '..' end=Number;
	public IntervalElements getIntervalAccess() {
		return pInterval;
	}
	
	public ParserRule getIntervalRule() {
		return getIntervalAccess().getRule();
	}
	
	//Enumeration:
	//	'[' list=ListOfValues ']';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	///**
	// * Constraints and constraints declarations
	// */ Constraint:
	//	name=ID ':' exp=Expression;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Expression:
	//	Relational | Global
	//	//Global|Logic|Relational|Control
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Relational:
	//	Iff;
	public RelationalElements getRelationalAccess() {
		return pRelational;
	}
	
	public ParserRule getRelationalRule() {
		return getRelationalAccess().getRule();
	}
	
	//Iff Relational:
	//	Implies ({Iff.left=current} "<=>" right=Implies)*;
	public IffElements getIffAccess() {
		return pIff;
	}
	
	public ParserRule getIffRule() {
		return getIffAccess().getRule();
	}
	
	//Implies Relational:
	//	Or ({Implies.left=current} "=>" right=Or)*;
	public ImpliesElements getImpliesAccess() {
		return pImplies;
	}
	
	public ParserRule getImpliesRule() {
		return getImpliesAccess().getRule();
	}
	
	//Or Relational:
	//	And ({Or.left=current} "OR" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Relational:
	//	Equality ({And.left=current} "AND" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Relational:
	//	Comparison ({Equality.left=current} op=("=" | "!=") right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Relational:
	//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Relational:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Relational:
	//	Primary ({MulOrDiv.left=current} op=('*' | '/' | 'mod') right=Primary)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Relational:
	//	'(' Relational ')' | {Negation} "~" expression=Primary | {Unary} op=UnaryOp expression=Primary | {Function}
	//	op=FunctionOp '(' left=Primary ',' right=Primary ')' | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	////Function returns Relational:
	////	op=FunctionOp '('left=Primary ',' right=Primary ')' 
	////;
	//Atomic Relational:
	//	{BoolConstant} value=('true' | 'false') | {VariableRef} variable=[Variable] | {IntConstant} value=INT;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	///**
	// * Global constraints
	// */ Global:
	//	op=GlobalOp '(' vars=ListOfIDs ')' ('[' values=ListOfListValues ']')?;
	public GlobalElements getGlobalAccess() {
		return pGlobal;
	}
	
	public ParserRule getGlobalRule() {
		return getGlobalAccess().getRule();
	}
	
	///*
	// * Control statement if-then-else
	// */ //Control:
	////	'if''('cond=BoolTerm ')' 'then' trueStatement= Expression 'else' elseStatement= Expression 'end_if'
	////;
	////Strategies
	//Strategy:
	//	'one' | 'two';
	public StrategyElements getStrategyAccess() {
		return pStrategy;
	}
	
	public ParserRule getStrategyRule() {
		return getStrategyAccess().getRule();
	}
	
	////Values
	//BoolVal:
	//	value=('true' | 'false');
	public BoolValElements getBoolValAccess() {
		return pBoolVal;
	}
	
	public ParserRule getBoolValRule() {
		return getBoolValAccess().getRule();
	}
	
	//Number:
	//	value=INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Symbol:
	//	value=ID;
	public SymbolElements getSymbolAccess() {
		return pSymbol;
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}
	
	//Value:
	//	Number | NonEnumerableValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	////EnumerableValue: Number ;
	//NonEnumerableValue:
	//	BoolVal | Symbol;
	public NonEnumerableValueElements getNonEnumerableValueAccess() {
		return pNonEnumerableValue;
	}
	
	public ParserRule getNonEnumerableValueRule() {
		return getNonEnumerableValueAccess().getRule();
	}
	
	////Variables
	//VarType:
	//	'boolean' | 'integer' | 'symbolic';
	public VarTypeElements getVarTypeAccess() {
		return pVarType;
	}
	
	public ParserRule getVarTypeRule() {
		return getVarTypeAccess().getRule();
	}
	
	//GlobalOp:
	//	'at_most' | 'all_different';
	public GlobalOpElements getGlobalOpAccess() {
		return pGlobalOp;
	}
	
	public ParserRule getGlobalOpRule() {
		return getGlobalOpAccess().getRule();
	}
	
	//FunctionOp:
	//	'pow' | 'dist' | 'min' | 'max';
	public FunctionOpElements getFunctionOpAccess() {
		return pFunctionOp;
	}
	
	public ParserRule getFunctionOpRule() {
		return getFunctionOpAccess().getRule();
	}
	
	//UnaryOp:
	//	'abs' | 'sqrt';
	public UnaryOpElements getUnaryOpAccess() {
		return pUnaryOp;
	}
	
	public ParserRule getUnaryOpRule() {
		return getUnaryOpAccess().getRule();
	}
	
	//ListOfValues:
	//	values+=Value (','+ values+=Value)*;
	public ListOfValuesElements getListOfValuesAccess() {
		return pListOfValues;
	}
	
	public ParserRule getListOfValuesRule() {
		return getListOfValuesAccess().getRule();
	}
	
	//ListOfListValues:
	//	'[' list+=ListOfValues ']' (','+ '[' list+=ListOfValues ']')*;
	public ListOfListValuesElements getListOfListValuesAccess() {
		return pListOfListValues;
	}
	
	public ParserRule getListOfListValuesRule() {
		return getListOfListValuesAccess().getRule();
	}
	
	//ListOfIDs:
	//	ids+=ID+;
	public ListOfIDsElements getListOfIDsAccess() {
		return pListOfIDs;
	}
	
	public ParserRule getListOfIDsRule() {
		return getListOfIDsAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
