/*
 * generated by Xtext 2.12.0
 */
package com.coffee.serializer;

import com.coffee.services.THLCLGrammarAccess;
import com.coffee.tHLCL.And;
import com.coffee.tHLCL.BoolConstant;
import com.coffee.tHLCL.BoolVal;
import com.coffee.tHLCL.Comparison;
import com.coffee.tHLCL.Constraint;
import com.coffee.tHLCL.Enumeration;
import com.coffee.tHLCL.Equality;
import com.coffee.tHLCL.Function;
import com.coffee.tHLCL.Global;
import com.coffee.tHLCL.Iff;
import com.coffee.tHLCL.Implies;
import com.coffee.tHLCL.IntConstant;
import com.coffee.tHLCL.Interval;
import com.coffee.tHLCL.ListOfIDs;
import com.coffee.tHLCL.ListOfListValues;
import com.coffee.tHLCL.ListOfValues;
import com.coffee.tHLCL.Minus;
import com.coffee.tHLCL.Model;
import com.coffee.tHLCL.MulOrDiv;
import com.coffee.tHLCL.Negation;
import com.coffee.tHLCL.Or;
import com.coffee.tHLCL.Plus;
import com.coffee.tHLCL.Symbol;
import com.coffee.tHLCL.THLCLPackage;
import com.coffee.tHLCL.Unary;
import com.coffee.tHLCL.Variable;
import com.coffee.tHLCL.VariableRef;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class THLCLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private THLCLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == THLCLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case THLCLPackage.AND:
				sequence_And(context, (And) semanticObject); 
				return; 
			case THLCLPackage.BOOL_CONSTANT:
				sequence_Atomic(context, (BoolConstant) semanticObject); 
				return; 
			case THLCLPackage.BOOL_VAL:
				sequence_BoolVal(context, (BoolVal) semanticObject); 
				return; 
			case THLCLPackage.COMPARISON:
				sequence_Comparison(context, (Comparison) semanticObject); 
				return; 
			case THLCLPackage.CONSTRAINT:
				sequence_Constraint(context, (Constraint) semanticObject); 
				return; 
			case THLCLPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case THLCLPackage.EQUALITY:
				sequence_Equality(context, (Equality) semanticObject); 
				return; 
			case THLCLPackage.FUNCTION:
				sequence_Primary(context, (Function) semanticObject); 
				return; 
			case THLCLPackage.GLOBAL:
				sequence_Global(context, (Global) semanticObject); 
				return; 
			case THLCLPackage.IFF:
				sequence_Iff(context, (Iff) semanticObject); 
				return; 
			case THLCLPackage.IMPLIES:
				sequence_Implies(context, (Implies) semanticObject); 
				return; 
			case THLCLPackage.INT_CONSTANT:
				sequence_Atomic(context, (IntConstant) semanticObject); 
				return; 
			case THLCLPackage.INTERVAL:
				sequence_Interval(context, (Interval) semanticObject); 
				return; 
			case THLCLPackage.LIST_OF_IDS:
				sequence_ListOfIDs(context, (ListOfIDs) semanticObject); 
				return; 
			case THLCLPackage.LIST_OF_LIST_VALUES:
				sequence_ListOfListValues(context, (ListOfListValues) semanticObject); 
				return; 
			case THLCLPackage.LIST_OF_VALUES:
				sequence_ListOfValues(context, (ListOfValues) semanticObject); 
				return; 
			case THLCLPackage.MINUS:
				sequence_PlusOrMinus(context, (Minus) semanticObject); 
				return; 
			case THLCLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case THLCLPackage.MUL_OR_DIV:
				sequence_MulOrDiv(context, (MulOrDiv) semanticObject); 
				return; 
			case THLCLPackage.NEGATION:
				sequence_Primary(context, (Negation) semanticObject); 
				return; 
			case THLCLPackage.NUMBER:
				sequence_Number(context, (com.coffee.tHLCL.Number) semanticObject); 
				return; 
			case THLCLPackage.OR:
				sequence_Or(context, (Or) semanticObject); 
				return; 
			case THLCLPackage.PLUS:
				sequence_PlusOrMinus(context, (Plus) semanticObject); 
				return; 
			case THLCLPackage.SYMBOL:
				sequence_Symbol(context, (Symbol) semanticObject); 
				return; 
			case THLCLPackage.UNARY:
				sequence_Primary(context, (Unary) semanticObject); 
				return; 
			case THLCLPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case THLCLPackage.VARIABLE_REF:
				sequence_Atomic(context, (VariableRef) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns And
	 *     Relational returns And
	 *     Iff returns And
	 *     Iff.Iff_1_0 returns And
	 *     Implies returns And
	 *     Implies.Implies_1_0 returns And
	 *     Or returns And
	 *     Or.Or_1_0 returns And
	 *     And returns And
	 *     And.And_1_0 returns And
	 *     Equality returns And
	 *     Equality.Equality_1_0 returns And
	 *     Comparison returns And
	 *     Comparison.Comparison_1_0 returns And
	 *     PlusOrMinus returns And
	 *     PlusOrMinus.Plus_1_0_0_0 returns And
	 *     PlusOrMinus.Minus_1_0_1_0 returns And
	 *     MulOrDiv returns And
	 *     MulOrDiv.MulOrDiv_1_0 returns And
	 *     Primary returns And
	 *
	 * Constraint:
	 *     (left=And_And_1_0 right=Equality)
	 */
	protected void sequence_And(ISerializationContext context, And semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.AND__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.AND__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndAccess().getAndLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BoolConstant
	 *     Relational returns BoolConstant
	 *     Iff returns BoolConstant
	 *     Iff.Iff_1_0 returns BoolConstant
	 *     Implies returns BoolConstant
	 *     Implies.Implies_1_0 returns BoolConstant
	 *     Or returns BoolConstant
	 *     Or.Or_1_0 returns BoolConstant
	 *     And returns BoolConstant
	 *     And.And_1_0 returns BoolConstant
	 *     Equality returns BoolConstant
	 *     Equality.Equality_1_0 returns BoolConstant
	 *     Comparison returns BoolConstant
	 *     Comparison.Comparison_1_0 returns BoolConstant
	 *     PlusOrMinus returns BoolConstant
	 *     PlusOrMinus.Plus_1_0_0_0 returns BoolConstant
	 *     PlusOrMinus.Minus_1_0_1_0 returns BoolConstant
	 *     MulOrDiv returns BoolConstant
	 *     MulOrDiv.MulOrDiv_1_0 returns BoolConstant
	 *     Primary returns BoolConstant
	 *     Atomic returns BoolConstant
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 */
	protected void sequence_Atomic(ISerializationContext context, BoolConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IntConstant
	 *     Relational returns IntConstant
	 *     Iff returns IntConstant
	 *     Iff.Iff_1_0 returns IntConstant
	 *     Implies returns IntConstant
	 *     Implies.Implies_1_0 returns IntConstant
	 *     Or returns IntConstant
	 *     Or.Or_1_0 returns IntConstant
	 *     And returns IntConstant
	 *     And.And_1_0 returns IntConstant
	 *     Equality returns IntConstant
	 *     Equality.Equality_1_0 returns IntConstant
	 *     Comparison returns IntConstant
	 *     Comparison.Comparison_1_0 returns IntConstant
	 *     PlusOrMinus returns IntConstant
	 *     PlusOrMinus.Plus_1_0_0_0 returns IntConstant
	 *     PlusOrMinus.Minus_1_0_1_0 returns IntConstant
	 *     MulOrDiv returns IntConstant
	 *     MulOrDiv.MulOrDiv_1_0 returns IntConstant
	 *     Primary returns IntConstant
	 *     Atomic returns IntConstant
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Atomic(ISerializationContext context, IntConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.INT_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.INT_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_2_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns VariableRef
	 *     Relational returns VariableRef
	 *     Iff returns VariableRef
	 *     Iff.Iff_1_0 returns VariableRef
	 *     Implies returns VariableRef
	 *     Implies.Implies_1_0 returns VariableRef
	 *     Or returns VariableRef
	 *     Or.Or_1_0 returns VariableRef
	 *     And returns VariableRef
	 *     And.And_1_0 returns VariableRef
	 *     Equality returns VariableRef
	 *     Equality.Equality_1_0 returns VariableRef
	 *     Comparison returns VariableRef
	 *     Comparison.Comparison_1_0 returns VariableRef
	 *     PlusOrMinus returns VariableRef
	 *     PlusOrMinus.Plus_1_0_0_0 returns VariableRef
	 *     PlusOrMinus.Minus_1_0_1_0 returns VariableRef
	 *     MulOrDiv returns VariableRef
	 *     MulOrDiv.MulOrDiv_1_0 returns VariableRef
	 *     Primary returns VariableRef
	 *     Atomic returns VariableRef
	 *
	 * Constraint:
	 *     variable=[Variable|ID]
	 */
	protected void sequence_Atomic(ISerializationContext context, VariableRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.VARIABLE_REF__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.VARIABLE_REF__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getVariableVariableIDTerminalRuleCall_1_1_0_1(), semanticObject.eGet(THLCLPackage.Literals.VARIABLE_REF__VARIABLE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BoolVal returns BoolVal
	 *     Value returns BoolVal
	 *     NonEnumerableValue returns BoolVal
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 */
	protected void sequence_BoolVal(ISerializationContext context, BoolVal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Comparison
	 *     Relational returns Comparison
	 *     Iff returns Comparison
	 *     Iff.Iff_1_0 returns Comparison
	 *     Implies returns Comparison
	 *     Implies.Implies_1_0 returns Comparison
	 *     Or returns Comparison
	 *     Or.Or_1_0 returns Comparison
	 *     And returns Comparison
	 *     And.And_1_0 returns Comparison
	 *     Equality returns Comparison
	 *     Equality.Equality_1_0 returns Comparison
	 *     Comparison returns Comparison
	 *     Comparison.Comparison_1_0 returns Comparison
	 *     PlusOrMinus returns Comparison
	 *     PlusOrMinus.Plus_1_0_0_0 returns Comparison
	 *     PlusOrMinus.Minus_1_0_1_0 returns Comparison
	 *     MulOrDiv returns Comparison
	 *     MulOrDiv.MulOrDiv_1_0 returns Comparison
	 *     Primary returns Comparison
	 *
	 * Constraint:
	 *     (left=Comparison_Comparison_1_0 (op='>=' | op='<=' | op='>' | op='<') right=PlusOrMinus)
	 */
	protected void sequence_Comparison(ISerializationContext context, Comparison semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constraint returns Constraint
	 *
	 * Constraint:
	 *     (name=ID exp=Expression)
	 */
	protected void sequence_Constraint(ISerializationContext context, Constraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.CONSTRAINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.CONSTRAINT__NAME));
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.CONSTRAINT__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.CONSTRAINT__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConstraintAccess().getExpExpressionParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DomainDeclaration returns Enumeration
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     list=ListOfValues
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.ENUMERATION__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.ENUMERATION__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnumerationAccess().getListListOfValuesParserRuleCall_1_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Equality
	 *     Relational returns Equality
	 *     Iff returns Equality
	 *     Iff.Iff_1_0 returns Equality
	 *     Implies returns Equality
	 *     Implies.Implies_1_0 returns Equality
	 *     Or returns Equality
	 *     Or.Or_1_0 returns Equality
	 *     And returns Equality
	 *     And.And_1_0 returns Equality
	 *     Equality returns Equality
	 *     Equality.Equality_1_0 returns Equality
	 *     Comparison returns Equality
	 *     Comparison.Comparison_1_0 returns Equality
	 *     PlusOrMinus returns Equality
	 *     PlusOrMinus.Plus_1_0_0_0 returns Equality
	 *     PlusOrMinus.Minus_1_0_1_0 returns Equality
	 *     MulOrDiv returns Equality
	 *     MulOrDiv.MulOrDiv_1_0 returns Equality
	 *     Primary returns Equality
	 *
	 * Constraint:
	 *     (left=Equality_Equality_1_0 (op='=' | op='!=') right=Comparison)
	 */
	protected void sequence_Equality(ISerializationContext context, Equality semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Global
	 *     Global returns Global
	 *
	 * Constraint:
	 *     (op=GlobalOp vars=ListOfIDs values=ListOfListValues?)
	 */
	protected void sequence_Global(ISerializationContext context, Global semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Iff
	 *     Relational returns Iff
	 *     Iff returns Iff
	 *     Iff.Iff_1_0 returns Iff
	 *     Implies returns Iff
	 *     Implies.Implies_1_0 returns Iff
	 *     Or returns Iff
	 *     Or.Or_1_0 returns Iff
	 *     And returns Iff
	 *     And.And_1_0 returns Iff
	 *     Equality returns Iff
	 *     Equality.Equality_1_0 returns Iff
	 *     Comparison returns Iff
	 *     Comparison.Comparison_1_0 returns Iff
	 *     PlusOrMinus returns Iff
	 *     PlusOrMinus.Plus_1_0_0_0 returns Iff
	 *     PlusOrMinus.Minus_1_0_1_0 returns Iff
	 *     MulOrDiv returns Iff
	 *     MulOrDiv.MulOrDiv_1_0 returns Iff
	 *     Primary returns Iff
	 *
	 * Constraint:
	 *     (left=Iff_Iff_1_0 right=Implies)
	 */
	protected void sequence_Iff(ISerializationContext context, Iff semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.IFF__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.IFF__LEFT));
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.IFF__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.IFF__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIffAccess().getIffLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getIffAccess().getRightImpliesParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Implies
	 *     Relational returns Implies
	 *     Iff returns Implies
	 *     Iff.Iff_1_0 returns Implies
	 *     Implies returns Implies
	 *     Implies.Implies_1_0 returns Implies
	 *     Or returns Implies
	 *     Or.Or_1_0 returns Implies
	 *     And returns Implies
	 *     And.And_1_0 returns Implies
	 *     Equality returns Implies
	 *     Equality.Equality_1_0 returns Implies
	 *     Comparison returns Implies
	 *     Comparison.Comparison_1_0 returns Implies
	 *     PlusOrMinus returns Implies
	 *     PlusOrMinus.Plus_1_0_0_0 returns Implies
	 *     PlusOrMinus.Minus_1_0_1_0 returns Implies
	 *     MulOrDiv returns Implies
	 *     MulOrDiv.MulOrDiv_1_0 returns Implies
	 *     Primary returns Implies
	 *
	 * Constraint:
	 *     (left=Implies_Implies_1_0 right=Or)
	 */
	protected void sequence_Implies(ISerializationContext context, Implies semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.IMPLIES__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.IMPLIES__LEFT));
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.IMPLIES__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.IMPLIES__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImpliesAccess().getImpliesLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getImpliesAccess().getRightOrParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DomainDeclaration returns Interval
	 *     Interval returns Interval
	 *
	 * Constraint:
	 *     (start=Number end=Number)
	 */
	protected void sequence_Interval(ISerializationContext context, Interval semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.INTERVAL__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.INTERVAL__START));
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.INTERVAL__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.INTERVAL__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntervalAccess().getStartNumberParserRuleCall_0_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getIntervalAccess().getEndNumberParserRuleCall_2_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ListOfIDs returns ListOfIDs
	 *
	 * Constraint:
	 *     ids+=ID+
	 */
	protected void sequence_ListOfIDs(ISerializationContext context, ListOfIDs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ListOfListValues returns ListOfListValues
	 *
	 * Constraint:
	 *     (list+=ListOfValues list+=ListOfValues*)
	 */
	protected void sequence_ListOfListValues(ISerializationContext context, ListOfListValues semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ListOfValues returns ListOfValues
	 *
	 * Constraint:
	 *     (values+=Value values+=Value*)
	 */
	protected void sequence_ListOfValues(ISerializationContext context, ListOfValues semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID variables+=Variable* constraints+=Constraint* strategy=Strategy?)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns MulOrDiv
	 *     Relational returns MulOrDiv
	 *     Iff returns MulOrDiv
	 *     Iff.Iff_1_0 returns MulOrDiv
	 *     Implies returns MulOrDiv
	 *     Implies.Implies_1_0 returns MulOrDiv
	 *     Or returns MulOrDiv
	 *     Or.Or_1_0 returns MulOrDiv
	 *     And returns MulOrDiv
	 *     And.And_1_0 returns MulOrDiv
	 *     Equality returns MulOrDiv
	 *     Equality.Equality_1_0 returns MulOrDiv
	 *     Comparison returns MulOrDiv
	 *     Comparison.Comparison_1_0 returns MulOrDiv
	 *     PlusOrMinus returns MulOrDiv
	 *     PlusOrMinus.Plus_1_0_0_0 returns MulOrDiv
	 *     PlusOrMinus.Minus_1_0_1_0 returns MulOrDiv
	 *     MulOrDiv returns MulOrDiv
	 *     MulOrDiv.MulOrDiv_1_0 returns MulOrDiv
	 *     Primary returns MulOrDiv
	 *
	 * Constraint:
	 *     (left=MulOrDiv_MulOrDiv_1_0 (op='*' | op='/' | op='mod') right=Primary)
	 */
	protected void sequence_MulOrDiv(ISerializationContext context, MulOrDiv semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number returns Number
	 *     Value returns Number
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Number(ISerializationContext context, com.coffee.tHLCL.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Or
	 *     Relational returns Or
	 *     Iff returns Or
	 *     Iff.Iff_1_0 returns Or
	 *     Implies returns Or
	 *     Implies.Implies_1_0 returns Or
	 *     Or returns Or
	 *     Or.Or_1_0 returns Or
	 *     And returns Or
	 *     And.And_1_0 returns Or
	 *     Equality returns Or
	 *     Equality.Equality_1_0 returns Or
	 *     Comparison returns Or
	 *     Comparison.Comparison_1_0 returns Or
	 *     PlusOrMinus returns Or
	 *     PlusOrMinus.Plus_1_0_0_0 returns Or
	 *     PlusOrMinus.Minus_1_0_1_0 returns Or
	 *     MulOrDiv returns Or
	 *     MulOrDiv.MulOrDiv_1_0 returns Or
	 *     Primary returns Or
	 *
	 * Constraint:
	 *     (left=Or_Or_1_0 right=And)
	 */
	protected void sequence_Or(ISerializationContext context, Or semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.OR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.OR__LEFT));
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.OR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.OR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrAccess().getOrLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Minus
	 *     Relational returns Minus
	 *     Iff returns Minus
	 *     Iff.Iff_1_0 returns Minus
	 *     Implies returns Minus
	 *     Implies.Implies_1_0 returns Minus
	 *     Or returns Minus
	 *     Or.Or_1_0 returns Minus
	 *     And returns Minus
	 *     And.And_1_0 returns Minus
	 *     Equality returns Minus
	 *     Equality.Equality_1_0 returns Minus
	 *     Comparison returns Minus
	 *     Comparison.Comparison_1_0 returns Minus
	 *     PlusOrMinus returns Minus
	 *     PlusOrMinus.Plus_1_0_0_0 returns Minus
	 *     PlusOrMinus.Minus_1_0_1_0 returns Minus
	 *     MulOrDiv returns Minus
	 *     MulOrDiv.MulOrDiv_1_0 returns Minus
	 *     Primary returns Minus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Minus_1_0_1_0 right=MulOrDiv)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Plus
	 *     Relational returns Plus
	 *     Iff returns Plus
	 *     Iff.Iff_1_0 returns Plus
	 *     Implies returns Plus
	 *     Implies.Implies_1_0 returns Plus
	 *     Or returns Plus
	 *     Or.Or_1_0 returns Plus
	 *     And returns Plus
	 *     And.And_1_0 returns Plus
	 *     Equality returns Plus
	 *     Equality.Equality_1_0 returns Plus
	 *     Comparison returns Plus
	 *     Comparison.Comparison_1_0 returns Plus
	 *     PlusOrMinus returns Plus
	 *     PlusOrMinus.Plus_1_0_0_0 returns Plus
	 *     PlusOrMinus.Minus_1_0_1_0 returns Plus
	 *     MulOrDiv returns Plus
	 *     MulOrDiv.MulOrDiv_1_0 returns Plus
	 *     Primary returns Plus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Plus_1_0_0_0 right=MulOrDiv)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Function
	 *     Relational returns Function
	 *     Iff returns Function
	 *     Iff.Iff_1_0 returns Function
	 *     Implies returns Function
	 *     Implies.Implies_1_0 returns Function
	 *     Or returns Function
	 *     Or.Or_1_0 returns Function
	 *     And returns Function
	 *     And.And_1_0 returns Function
	 *     Equality returns Function
	 *     Equality.Equality_1_0 returns Function
	 *     Comparison returns Function
	 *     Comparison.Comparison_1_0 returns Function
	 *     PlusOrMinus returns Function
	 *     PlusOrMinus.Plus_1_0_0_0 returns Function
	 *     PlusOrMinus.Minus_1_0_1_0 returns Function
	 *     MulOrDiv returns Function
	 *     MulOrDiv.MulOrDiv_1_0 returns Function
	 *     Primary returns Function
	 *
	 * Constraint:
	 *     (op=FunctionOp left=Primary right=Primary)
	 */
	protected void sequence_Primary(ISerializationContext context, Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.FUNCTION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.FUNCTION__OP));
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.FUNCTION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.FUNCTION__LEFT));
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.FUNCTION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.FUNCTION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getOpFunctionOpParserRuleCall_3_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getPrimaryAccess().getLeftPrimaryParserRuleCall_3_3_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPrimaryAccess().getRightPrimaryParserRuleCall_3_5_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Negation
	 *     Relational returns Negation
	 *     Iff returns Negation
	 *     Iff.Iff_1_0 returns Negation
	 *     Implies returns Negation
	 *     Implies.Implies_1_0 returns Negation
	 *     Or returns Negation
	 *     Or.Or_1_0 returns Negation
	 *     And returns Negation
	 *     And.And_1_0 returns Negation
	 *     Equality returns Negation
	 *     Equality.Equality_1_0 returns Negation
	 *     Comparison returns Negation
	 *     Comparison.Comparison_1_0 returns Negation
	 *     PlusOrMinus returns Negation
	 *     PlusOrMinus.Plus_1_0_0_0 returns Negation
	 *     PlusOrMinus.Minus_1_0_1_0 returns Negation
	 *     MulOrDiv returns Negation
	 *     MulOrDiv.MulOrDiv_1_0 returns Negation
	 *     Primary returns Negation
	 *
	 * Constraint:
	 *     expression=Primary
	 */
	protected void sequence_Primary(ISerializationContext context, Negation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.NEGATION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.NEGATION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Unary
	 *     Relational returns Unary
	 *     Iff returns Unary
	 *     Iff.Iff_1_0 returns Unary
	 *     Implies returns Unary
	 *     Implies.Implies_1_0 returns Unary
	 *     Or returns Unary
	 *     Or.Or_1_0 returns Unary
	 *     And returns Unary
	 *     And.And_1_0 returns Unary
	 *     Equality returns Unary
	 *     Equality.Equality_1_0 returns Unary
	 *     Comparison returns Unary
	 *     Comparison.Comparison_1_0 returns Unary
	 *     PlusOrMinus returns Unary
	 *     PlusOrMinus.Plus_1_0_0_0 returns Unary
	 *     PlusOrMinus.Minus_1_0_1_0 returns Unary
	 *     MulOrDiv returns Unary
	 *     MulOrDiv.MulOrDiv_1_0 returns Unary
	 *     Primary returns Unary
	 *
	 * Constraint:
	 *     (op=UnaryOp expression=Primary)
	 */
	protected void sequence_Primary(ISerializationContext context, Unary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.UNARY__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.UNARY__OP));
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.UNARY__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.UNARY__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getOpUnaryOpParserRuleCall_2_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_2_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Symbol returns Symbol
	 *     Value returns Symbol
	 *     NonEnumerableValue returns Symbol
	 *
	 * Constraint:
	 *     value=ID
	 */
	protected void sequence_Symbol(ISerializationContext context, Symbol semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, THLCLPackage.Literals.NON_ENUMERABLE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, THLCLPackage.Literals.NON_ENUMERABLE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSymbolAccess().getValueIDTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (type=VarType name=ID domain=DomainDeclaration?)
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
