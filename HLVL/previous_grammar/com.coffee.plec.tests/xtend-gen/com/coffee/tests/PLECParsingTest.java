/**
 * generated by Xtext 2.12.0
 */
package com.coffee.tests;

import com.coffee.pLEC.Model;
import com.coffee.pLEC.PLECPackage;
import com.coffee.tests.PLECInjectorProvider;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * Class to test the product lines grammar and its parsing
 * @author Angela Villota
 * @version PLEC V3
 * August 2018
 */
@RunWith(XtextRunner.class)
@InjectWith(PLECInjectorProvider.class)
@SuppressWarnings("all")
public class PLECParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  @Extension
  private ParseHelper _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  /**
   * Method to test the interpretation of an empty program
   */
  @Test
  public void emptyModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Declaring a boolean var without domain
   */
  @Test
  public void booleanVar() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model m1");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("boolean A ");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Declaring an integer var with an enumeration
   */
  @Test
  public void integerVarEnum() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model m1");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("integer A values: [10, 20, 30, 40]");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Declaring an integer var with an enumeration
   */
  @Test
  public void integerVarInterval() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model m1");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("integer A values: 1..100");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Declaring boolean instanciable variables
   */
  @Test
  public void boolInstantiable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model m1");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("instantiable [2,5] boolean A");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      this.printErrors(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Declaring integer instantiable  variable with an interval domain
   */
  @Test
  public void integerIntervalInstantiable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model m1");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("instantiable [2,5] integer A values: 1..100 ");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Declaring integer instantiable variable with an enumeration domain
   */
  @Test
  public void integerEnumerationInstantiable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model m1");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("instantiable [2,5] integer A values: [10, 20, 30, 40] ");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
      this.printErrors(empty);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Declaring structural relations
   */
  @Test
  public void structural() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model m1");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("boolean GPL");
      _builder.newLine();
      _builder.append("boolean GType");
      _builder.newLine();
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("boolean Algorithms");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      _builder.append("c1: structural: GPL variants: [GType, GPL, Weight, Search, Algorithms] ");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      this.printErrors(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void structuralCard() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model GPL");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("boolean GType");
      _builder.newLine();
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("boolean Algorithms");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      _builder.append("c1: structural: GPL variants: [GType, GPL, Weight, Search, Algorithms] card:[1,1]");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      this.printErrors(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Testing mandatory and optional in a parent-child relation
   */
  @Test
  public void parentChildOperations() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model GPL");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("boolean GType");
      _builder.newLine();
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("boolean Algorithms");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      _builder.append("c1: structural: GPL variants: [GType, GPL, Weight, Search, Algorithms] card:[1,1]");
      _builder.newLine();
      _builder.append("c2: GType is optional");
      _builder.newLine();
      _builder.append("C3: Weight is mandatory");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      this.printErrors(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Refinement - root
   */
  @Test
  public void refinementRoot() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model GPL");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("boolean GType");
      _builder.newLine();
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("boolean Algorithms");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      _builder.append("c1: GPL is root");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      this.printErrors(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Declaring attributes
   */
  @Test
  public void attributes() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model m1");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("boolean GPL");
      _builder.newLine();
      _builder.append("boolean GType");
      _builder.newLine();
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("boolean Algorithms");
      _builder.newLine();
      _builder.append("integer Memory values: [2, 4, 8, 16, 32]");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      _builder.append("c1: attributes: [Memory] of Search ");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      this.printErrors(empty);
      this._validationTestHelper.assertNoErrors(empty);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Declaring requires relations
   */
  @Test
  public void requires() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model GPL");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("boolean GType");
      _builder.newLine();
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("boolean Algorithms");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      _builder.append("c1: GType requires Search");
      _builder.newLine();
      final String program = _builder.toString();
      final Model model = this.parseHelper.parse(program);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Declaring excludes relations
   */
  @Test
  public void excludes() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model GPL");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("boolean GType");
      _builder.newLine();
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("boolean Algorithms");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      _builder.append("c1: GType excludes Search");
      _builder.newLine();
      final String program = _builder.toString();
      final Model model = this.parseHelper.parse(program);
      Assert.assertNotNull(model);
      this.printErrors(model);
      this._validationTestHelper.assertNoErrors(model);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Quantifiable requires
   */
  @Test
  public void quantifiableRequires() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model Modelo");
      _builder.newLine();
      _builder.append("variables: ");
      _builder.newLine();
      _builder.append("boolean GPL");
      _builder.newLine();
      _builder.append("instantiable[1,10] boolean GType");
      _builder.newLine();
      _builder.append("instantiable[0,5] boolean Algorithms");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      _builder.append("c1: GPL is root");
      _builder.newLine();
      _builder.append("c2: structural: GPL variants: [GType, Algorithms] card:[1,2]");
      _builder.newLine();
      _builder.append("c3: [5,8] GType requires [2,4] Algorithms");
      _builder.newLine();
      final String program = _builder.toString();
      final Model m1 = this.parseHelper.parse(program);
      Assert.assertNotNull(m1);
      this._validationTestHelper.assertNoErrors(m1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Refinement - value
   */
  @Test
  public void refinementValue() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model Modelo");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("boolean GPL");
      _builder.newLine();
      _builder.append("integer Memory values: [2, 4, 8, 16, 32]");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      _builder.append("c1: GPL is selected");
      _builder.newLine();
      _builder.append("c2: Memory is 16");
      _builder.newLine();
      final String program = _builder.toString();
      final Model m1 = this.parseHelper.parse(program);
      Assert.assertNotNull(m1);
      this._validationTestHelper.assertNoErrors(m1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Refinement - value
   */
  @Test
  public void refinementSet() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model MCS");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("boolean GType");
      _builder.newLine();
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("integer Cores values: 0..7");
      _builder.newLine();
      _builder.append("integer Memory values: [0, 2, 4, 8, 16, 32]");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      _builder.append("c1: vars: (Cores, Memory) variants: [(1,2), (2, 4), (4, 16), (5, 32)]");
      _builder.newLine();
      _builder.append("c2: Memory is 16");
      _builder.newLine();
      final String model = _builder.toString();
      final Model m1 = this.parseHelper.parse(model);
      Assert.assertNotNull(m1);
      this._validationTestHelper.assertNoErrors(m1);
      this.printErrors(m1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Rule - value
   */
  @Test
  public void rule() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model MCS");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("boolean GType");
      _builder.newLine();
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("integer Cores values: 0..7");
      _builder.newLine();
      _builder.append("integer Memory values: [0, 2, 4, 8, 16, 32]");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      _builder.append("c1: vars: (Cores, Memory) variants: [(1,2), (2, 4), (4, 16), (5, 32)]");
      _builder.newLine();
      _builder.append("c2: Memory is 16");
      _builder.newLine();
      _builder.append("rule1: c1--> c2");
      _builder.newLine();
      _builder.append("rule2: (GType is selected) --> (Weight is selected)");
      _builder.newLine();
      final String model = _builder.toString();
      final Model m1 = this.parseHelper.parse(model);
      Assert.assertNotNull(m1);
      this._validationTestHelper.assertNoErrors(m1);
      this.printErrors(m1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Rule - value
   */
  @Test
  public void temporal() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model MCS");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("boolean GType");
      _builder.newLine();
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("integer Cores values: 0..7");
      _builder.newLine();
      _builder.append("integer Memory values: [0, 2, 4, 8, 16, 32]");
      _builder.newLine();
      _builder.append("constraints:");
      _builder.newLine();
      _builder.append("c1: vars: (Cores, Memory) variants: [(1,2), (2, 4), (4, 16), (5, 32)]");
      _builder.newLine();
      _builder.append("c2: Memory is 16");
      _builder.newLine();
      _builder.append("rule1: c1--> c2");
      _builder.newLine();
      _builder.append("rule2: (GType is selected) --> (Weight is selected)");
      _builder.newLine();
      _builder.append("tmp1: always c1");
      _builder.newLine();
      _builder.append("tmp2: next c2");
      _builder.newLine();
      _builder.append("tmp3: eventually(Memory is 16) ");
      _builder.newLine();
      final String model = _builder.toString();
      final Model m1 = this.parseHelper.parse(model);
      Assert.assertNotNull(m1);
      this._validationTestHelper.assertNoErrors(m1);
      this.printErrors(m1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Testing errors and validations
   */
  @Test
  public void integerNoDomainError() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model m1");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("integer A ");
      _builder.newLine();
      _builder.append("constraints: ");
      _builder.newLine();
      final EObject model = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertError(model, PLECPackage.eINSTANCE.getVarDeclaration(), 
        null, 
        "A variants declaration is required for variable \'A\'");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void stringNoDomainError() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model m1");
      _builder.newLine();
      _builder.append("variables:");
      _builder.newLine();
      _builder.append("symbolic A ");
      _builder.newLine();
      _builder.append("constraints: ");
      _builder.newLine();
      final EObject model = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertError(model, PLECPackage.eINSTANCE.getVarDeclaration(), 
        null, 
        "A variants declaration is required for variable \'A\'");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * to print the parsing errors
   */
  public void printErrors(final Model model) {
    boolean _isEmpty = model.eResource().getErrors().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<Resource.Diagnostic> _errors = model.eResource().getErrors();
      for (final Resource.Diagnostic element : _errors) {
        InputOutput.<String>println(element.getMessage());
      }
    }
  }
}
