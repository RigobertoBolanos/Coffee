package com.coffee.generator.XCSP3

import com.coffee.pLEC.Model
import com.coffee.pLEC.ConsExpression
import com.coffee.pLEC.Rule
import com.coffee.pLEC.Attributes
import com.coffee.generator.TypeOfProblem

//data structure imports

import com.coffee.generator.AbstractGenerator
import com.coffee.pLEC.Quantifiable

/**
 * Code generator for parse from the PLEC language to the XML Constraint Satisfaction 
 * Problem specification (XCSP)
 * This class implements the Generator interface
 * @author Angela Villota
 * @version PLEC V3
 * August 2018
 */

class XCSP3Generator extends AbstractGenerator{


	/**
	 * object to obtain the constraints regarding the type of the problem
	 */
	private XCSP3Factory factory;
	
	
	
	/**
	 * Constructor method 
	 * @param name the name of the model
	 * @param type is the TypeOfProblem (CSP, COP)
	 */
	new(String name, TypeOfProblem type) {
		super(name, type)
		switch typeOfProblem{
			 case COP: factory= new COPFactory(type)
			 default:  factory= new CSPFactory(type)
		}
		setFactory(factory)

	}
	
	/**
	 * Method to produce a sequence of characters with the 
	 * model represented as a Constraint Satisfaction Problem (CSP)
	 * using  the using  the XCSP notation (model.xml)
	 * @param model is an ECORE syntax tree with the program
	 * this syntax tree should be traversed. 
	 */
	override parseModel(Model model) {
		'''
		«factory.getHeader» 
		«factory.getVarLabel»
		«parseVariables(model)»
		«factory.getVarLabelClose»
		«factory.getConsLabel»
		«parseConstraints(model)»
		«factory.getConsLabelClose»
		«factory.getStrategy()»
		«factory.getFooter»
		'''
	}
	
	override parseRule(Rule rule) {
		val left= parseExpression(rule.condition as ConsExpression)
		val right= parseExpression (rule.consequence as ConsExpression)
		factory.getRule(left, right)
	}
	
	/**
	 * For each attribute in the expression exp a constraint of the
	 * type element <=> («attribute» > 0) is generated
	 * @param exp is an expression of Type Attributes
	 */
	override parseAttributes(Attributes exp) {
		factory.getAttributes(exp)
	}
	
	
	/**
	 * Returns the generated code for a particular constraint in the XCSP format
	 * @param id is a String containing the identifier of the constraint
	 * @param exp is a ConsExpression (to be parsed)
	 */	
	override parseConstraint(String id, ConsExpression exp) {
		'''
		<intension id= "«id»" >
			«parseExpression(exp)»
		</intension>
		'''
	}
	
	override parseQuantifiable(Quantifiable exp) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	/**
	 * Returns the generated code for the constraints autogenerated giving clonning
//	 * and cardinality relations 
//	 */
//	override putAutogeneratedCons() {
//		factory.getClonConstraints()
//	}


	
}