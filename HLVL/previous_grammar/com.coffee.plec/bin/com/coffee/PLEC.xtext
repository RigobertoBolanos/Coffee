grammar com.coffee.PLEC with org.eclipse.xtext.common.Terminals

generate pLEC "http://www.coffee.com/PLEC"

/**
 * Grammar specification of PLEC, the Product Line Engineering Constraints Language
 * @author Angela Villota
 * @version PLEC V3 
 * Modified in October 4th for including the root constraint
 * Modified on October 9th for fix the setRefinement
 * August 2018
 */

Model:
	'model' name=ID 'variables:' vars+=(VarDeclaration)*  'constraints:'constraints+=(Constraint)*
	;
	
//variable declaration
VarDeclaration:
	(instantiable='instantiable' '['min=Number ',' max=Number ']')? 
	type=VarType name=ID  
	('values:' variants= VariantDeclaration)?
	;
	
//Declaration of variants
VariantDeclaration: 
  VariantsInterval | VariantsEnumeration 
	;

// intervals (only intervals of enumerables)
VariantsInterval:
	(start=Number) ('..') (end=Number)
	;
	
// enumeration (enumeration of booleans, integers and symbols)
VariantsEnumeration:
	('[') list =  ListOfValues  (']')
	;

Constraint:
	  name=ID ':'  exp= ConsExpression 
;

ConsExpression:
	IDCons|Refinement |Rule |FodaBin |Structural |FodaUN|Attributes | Temporal |Quantifiable
;
TerminalExp returns Expression:
	'(' ConsExpression ')' | IDCons 
;
IDCons:
	name=ID
;

/**
 * an structural relation defines a parent-children relation including an optional cardinality
 * 
 */
Structural:
	'structural:' parent= [VarDeclaration | Parent]   'variants:' ('[') group=ListOfIDs (']') ('card:''['min=Number ',' max=Number ']')? 
;

Parent: ID;

/**
 * is a relation between an element and its attributes
 */
Attributes:
	'attributes:' ('[') att=ListOfIDs (']') 'of' var1=[VarDeclaration]
;
Refinement:
	Assignment | VarRefinement | SetRefinement | RootRefinement
;

Assignment:
	variable= [VarDeclaration] 'is' valu=Value
	
;
VarRefinement:
	var=[VarDeclaration] 'in' values= VariantDeclaration
;
//adjusted 
SetRefinement:
	'vars:' ('(') vars=ListOfIDs  (')')  
	'variants:'
	'[' list= ListOfListsOfValues ']'  
;
RootRefinement:
	var=[VarDeclaration] 'is' 'root' 
;

Temporal:
	operator= TempOP  cons= TerminalExp 
;

Rule:
	condition= TerminalExp '-->' consequence= TerminalExp
;

FodaUN:
	var1=[VarDeclaration] 'is' op= UnaryOp
;
FodaBin:
	var1=[VarDeclaration] op= BinOp var2= [VarDeclaration]
;

Quantifiable:
	'[' minV1=Number ',' maxV1=Number ']' var1=[VarDeclaration] 'requires'  '[' minV2=Number ',' maxV2=Number ']' var2= [VarDeclaration]
;


//syntactic categories


//Values
BoolVal: value=('selected'|'unselected');
Number: value = INT ;

Symbol: value= ID;

Value: Number|NonEnumerableValue;	
//EnumerableValue: Number ;
NonEnumerableValue:BoolVal|Symbol;
VarType:
	 'boolean' |'integer'|'symbolic' ;

ListOfValues:
	values+= Value (',' + values+= Value)*
;

ListOfIDs:
	ids+= ([VarDeclaration]) (',' + ids+= [VarDeclaration])*
;

ListOfListsOfValues:
	'(' values+=ListOfValues ')' (',' + '(' values+=ListOfValues ')')*
	
;
BinOp:
	 'requires' |'excludes'|'optional' |'mandatory'
;

UnaryOp:
	 'optional' |'mandatory'
;

TempOP:
	'always' |'next'|'eventually' 
;

