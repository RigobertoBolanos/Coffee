/**
 * generated by Xtext 2.12.0
 */
package com.coffee.pLEC.util;

import com.coffee.pLEC.Assignment;
import com.coffee.pLEC.Attributes;
import com.coffee.pLEC.BoolVal;
import com.coffee.pLEC.ConsExpression;
import com.coffee.pLEC.Constraint;
import com.coffee.pLEC.Expression;
import com.coffee.pLEC.FodaBin;
import com.coffee.pLEC.FodaUN;
import com.coffee.pLEC.IDCons;
import com.coffee.pLEC.ListOfIDs;
import com.coffee.pLEC.ListOfListsOfValues;
import com.coffee.pLEC.ListOfValues;
import com.coffee.pLEC.Model;
import com.coffee.pLEC.NonEnumerableValue;
import com.coffee.pLEC.PLECPackage;
import com.coffee.pLEC.Quantifiable;
import com.coffee.pLEC.Refinement;
import com.coffee.pLEC.RootRefinement;
import com.coffee.pLEC.Rule;
import com.coffee.pLEC.SetRefinement;
import com.coffee.pLEC.Structural;
import com.coffee.pLEC.Symbol;
import com.coffee.pLEC.Temporal;
import com.coffee.pLEC.Value;
import com.coffee.pLEC.VarDeclaration;
import com.coffee.pLEC.VarRefinement;
import com.coffee.pLEC.VariantDeclaration;
import com.coffee.pLEC.VariantsEnumeration;
import com.coffee.pLEC.VariantsInterval;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.coffee.pLEC.PLECPackage
 * @generated
 */
public class PLECSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static PLECPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PLECSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = PLECPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case PLECPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.VAR_DECLARATION:
      {
        VarDeclaration varDeclaration = (VarDeclaration)theEObject;
        T result = caseVarDeclaration(varDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.VARIANT_DECLARATION:
      {
        VariantDeclaration variantDeclaration = (VariantDeclaration)theEObject;
        T result = caseVariantDeclaration(variantDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.VARIANTS_INTERVAL:
      {
        VariantsInterval variantsInterval = (VariantsInterval)theEObject;
        T result = caseVariantsInterval(variantsInterval);
        if (result == null) result = caseVariantDeclaration(variantsInterval);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.VARIANTS_ENUMERATION:
      {
        VariantsEnumeration variantsEnumeration = (VariantsEnumeration)theEObject;
        T result = caseVariantsEnumeration(variantsEnumeration);
        if (result == null) result = caseVariantDeclaration(variantsEnumeration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.CONSTRAINT:
      {
        Constraint constraint = (Constraint)theEObject;
        T result = caseConstraint(constraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.CONS_EXPRESSION:
      {
        ConsExpression consExpression = (ConsExpression)theEObject;
        T result = caseConsExpression(consExpression);
        if (result == null) result = caseExpression(consExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.ID_CONS:
      {
        IDCons idCons = (IDCons)theEObject;
        T result = caseIDCons(idCons);
        if (result == null) result = caseConsExpression(idCons);
        if (result == null) result = caseExpression(idCons);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.STRUCTURAL:
      {
        Structural structural = (Structural)theEObject;
        T result = caseStructural(structural);
        if (result == null) result = caseConsExpression(structural);
        if (result == null) result = caseExpression(structural);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.ATTRIBUTES:
      {
        Attributes attributes = (Attributes)theEObject;
        T result = caseAttributes(attributes);
        if (result == null) result = caseConsExpression(attributes);
        if (result == null) result = caseExpression(attributes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.REFINEMENT:
      {
        Refinement refinement = (Refinement)theEObject;
        T result = caseRefinement(refinement);
        if (result == null) result = caseConsExpression(refinement);
        if (result == null) result = caseExpression(refinement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseRefinement(assignment);
        if (result == null) result = caseConsExpression(assignment);
        if (result == null) result = caseExpression(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.VAR_REFINEMENT:
      {
        VarRefinement varRefinement = (VarRefinement)theEObject;
        T result = caseVarRefinement(varRefinement);
        if (result == null) result = caseRefinement(varRefinement);
        if (result == null) result = caseConsExpression(varRefinement);
        if (result == null) result = caseExpression(varRefinement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.SET_REFINEMENT:
      {
        SetRefinement setRefinement = (SetRefinement)theEObject;
        T result = caseSetRefinement(setRefinement);
        if (result == null) result = caseRefinement(setRefinement);
        if (result == null) result = caseConsExpression(setRefinement);
        if (result == null) result = caseExpression(setRefinement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.ROOT_REFINEMENT:
      {
        RootRefinement rootRefinement = (RootRefinement)theEObject;
        T result = caseRootRefinement(rootRefinement);
        if (result == null) result = caseRefinement(rootRefinement);
        if (result == null) result = caseConsExpression(rootRefinement);
        if (result == null) result = caseExpression(rootRefinement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.TEMPORAL:
      {
        Temporal temporal = (Temporal)theEObject;
        T result = caseTemporal(temporal);
        if (result == null) result = caseConsExpression(temporal);
        if (result == null) result = caseExpression(temporal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.RULE:
      {
        Rule rule = (Rule)theEObject;
        T result = caseRule(rule);
        if (result == null) result = caseConsExpression(rule);
        if (result == null) result = caseExpression(rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.FODA_UN:
      {
        FodaUN fodaUN = (FodaUN)theEObject;
        T result = caseFodaUN(fodaUN);
        if (result == null) result = caseConsExpression(fodaUN);
        if (result == null) result = caseExpression(fodaUN);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.FODA_BIN:
      {
        FodaBin fodaBin = (FodaBin)theEObject;
        T result = caseFodaBin(fodaBin);
        if (result == null) result = caseConsExpression(fodaBin);
        if (result == null) result = caseExpression(fodaBin);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.QUANTIFIABLE:
      {
        Quantifiable quantifiable = (Quantifiable)theEObject;
        T result = caseQuantifiable(quantifiable);
        if (result == null) result = caseConsExpression(quantifiable);
        if (result == null) result = caseExpression(quantifiable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.BOOL_VAL:
      {
        BoolVal boolVal = (BoolVal)theEObject;
        T result = caseBoolVal(boolVal);
        if (result == null) result = caseNonEnumerableValue(boolVal);
        if (result == null) result = caseValue(boolVal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.NUMBER:
      {
        com.coffee.pLEC.Number number = (com.coffee.pLEC.Number)theEObject;
        T result = caseNumber(number);
        if (result == null) result = caseValue(number);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.SYMBOL:
      {
        Symbol symbol = (Symbol)theEObject;
        T result = caseSymbol(symbol);
        if (result == null) result = caseNonEnumerableValue(symbol);
        if (result == null) result = caseValue(symbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.VALUE:
      {
        Value value = (Value)theEObject;
        T result = caseValue(value);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.NON_ENUMERABLE_VALUE:
      {
        NonEnumerableValue nonEnumerableValue = (NonEnumerableValue)theEObject;
        T result = caseNonEnumerableValue(nonEnumerableValue);
        if (result == null) result = caseValue(nonEnumerableValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.LIST_OF_VALUES:
      {
        ListOfValues listOfValues = (ListOfValues)theEObject;
        T result = caseListOfValues(listOfValues);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.LIST_OF_IDS:
      {
        ListOfIDs listOfIDs = (ListOfIDs)theEObject;
        T result = caseListOfIDs(listOfIDs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case PLECPackage.LIST_OF_LISTS_OF_VALUES:
      {
        ListOfListsOfValues listOfListsOfValues = (ListOfListsOfValues)theEObject;
        T result = caseListOfListsOfValues(listOfListsOfValues);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDeclaration(VarDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variant Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variant Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariantDeclaration(VariantDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variants Interval</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variants Interval</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariantsInterval(VariantsInterval object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variants Enumeration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variants Enumeration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariantsEnumeration(VariantsEnumeration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraint(Constraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cons Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cons Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConsExpression(ConsExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ID Cons</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ID Cons</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIDCons(IDCons object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Structural</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Structural</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStructural(Structural object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attributes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attributes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributes(Attributes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Refinement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Refinement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefinement(Refinement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Refinement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Refinement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarRefinement(VarRefinement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Refinement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Refinement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetRefinement(SetRefinement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Root Refinement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Root Refinement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRootRefinement(RootRefinement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Temporal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Temporal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemporal(Temporal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRule(Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Foda UN</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Foda UN</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFodaUN(FodaUN object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Foda Bin</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Foda Bin</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFodaBin(FodaBin object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Quantifiable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Quantifiable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuantifiable(Quantifiable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Val</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Val</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolVal(BoolVal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumber(com.coffee.pLEC.Number object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSymbol(Symbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValue(Value object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Non Enumerable Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Non Enumerable Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNonEnumerableValue(NonEnumerableValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Of Values</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Of Values</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListOfValues(ListOfValues object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Of IDs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Of IDs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListOfIDs(ListOfIDs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Of Lists Of Values</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Of Lists Of Values</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListOfListsOfValues(ListOfListsOfValues object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //PLECSwitch
