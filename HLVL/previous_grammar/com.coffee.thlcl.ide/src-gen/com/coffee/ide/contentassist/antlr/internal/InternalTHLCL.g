/*
 * generated by Xtext 2.12.0
 */
grammar InternalTHLCL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.coffee.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.coffee.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.coffee.services.THLCLGrammarAccess;

}
@parser::members {
	private THLCLGrammarAccess grammarAccess;

	public void setGrammarAccess(THLCLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDomainDeclaration
entryRuleDomainDeclaration
:
{ before(grammarAccess.getDomainDeclarationRule()); }
	 ruleDomainDeclaration
{ after(grammarAccess.getDomainDeclarationRule()); } 
	 EOF 
;

// Rule DomainDeclaration
ruleDomainDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainDeclarationAccess().getAlternatives()); }
		(rule__DomainDeclaration__Alternatives)
		{ after(grammarAccess.getDomainDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInterval
entryRuleInterval
:
{ before(grammarAccess.getIntervalRule()); }
	 ruleInterval
{ after(grammarAccess.getIntervalRule()); } 
	 EOF 
;

// Rule Interval
ruleInterval 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntervalAccess().getGroup()); }
		(rule__Interval__Group__0)
		{ after(grammarAccess.getIntervalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumeration
entryRuleEnumeration
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerationAccess().getGroup()); }
		(rule__Enumeration__Group__0)
		{ after(grammarAccess.getEnumerationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup()); }
		(rule__Constraint__Group__0)
		{ after(grammarAccess.getConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelational
entryRuleRelational
:
{ before(grammarAccess.getRelationalRule()); }
	 ruleRelational
{ after(grammarAccess.getRelationalRule()); } 
	 EOF 
;

// Rule Relational
ruleRelational 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalAccess().getIffParserRuleCall()); }
		ruleIff
		{ after(grammarAccess.getRelationalAccess().getIffParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIff
entryRuleIff
:
{ before(grammarAccess.getIffRule()); }
	 ruleIff
{ after(grammarAccess.getIffRule()); } 
	 EOF 
;

// Rule Iff
ruleIff 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIffAccess().getGroup()); }
		(rule__Iff__Group__0)
		{ after(grammarAccess.getIffAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImplies
entryRuleImplies
:
{ before(grammarAccess.getImpliesRule()); }
	 ruleImplies
{ after(grammarAccess.getImpliesRule()); } 
	 EOF 
;

// Rule Implies
ruleImplies 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImpliesAccess().getGroup()); }
		(rule__Implies__Group__0)
		{ after(grammarAccess.getImpliesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquality
entryRuleEquality
:
{ before(grammarAccess.getEqualityRule()); }
	 ruleEquality
{ after(grammarAccess.getEqualityRule()); } 
	 EOF 
;

// Rule Equality
ruleEquality 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityAccess().getGroup()); }
		(rule__Equality__Group__0)
		{ after(grammarAccess.getEqualityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus
:
{ before(grammarAccess.getPlusOrMinusRule()); }
	 rulePlusOrMinus
{ after(grammarAccess.getPlusOrMinusRule()); } 
	 EOF 
;

// Rule PlusOrMinus
rulePlusOrMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getGroup()); }
		(rule__PlusOrMinus__Group__0)
		{ after(grammarAccess.getPlusOrMinusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv
:
{ before(grammarAccess.getMulOrDivRule()); }
	 ruleMulOrDiv
{ after(grammarAccess.getMulOrDivRule()); } 
	 EOF 
;

// Rule MulOrDiv
ruleMulOrDiv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMulOrDivAccess().getGroup()); }
		(rule__MulOrDiv__Group__0)
		{ after(grammarAccess.getMulOrDivAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomic
entryRuleAtomic
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
		(rule__Atomic__Alternatives)
		{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGlobal
entryRuleGlobal
:
{ before(grammarAccess.getGlobalRule()); }
	 ruleGlobal
{ after(grammarAccess.getGlobalRule()); } 
	 EOF 
;

// Rule Global
ruleGlobal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGlobalAccess().getGroup()); }
		(rule__Global__Group__0)
		{ after(grammarAccess.getGlobalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStrategy
entryRuleStrategy
:
{ before(grammarAccess.getStrategyRule()); }
	 ruleStrategy
{ after(grammarAccess.getStrategyRule()); } 
	 EOF 
;

// Rule Strategy
ruleStrategy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStrategyAccess().getAlternatives()); }
		(rule__Strategy__Alternatives)
		{ after(grammarAccess.getStrategyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolVal
entryRuleBoolVal
:
{ before(grammarAccess.getBoolValRule()); }
	 ruleBoolVal
{ after(grammarAccess.getBoolValRule()); } 
	 EOF 
;

// Rule BoolVal
ruleBoolVal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolValAccess().getValueAssignment()); }
		(rule__BoolVal__ValueAssignment)
		{ after(grammarAccess.getBoolValAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getValueAssignment()); }
		(rule__Number__ValueAssignment)
		{ after(grammarAccess.getNumberAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSymbol
entryRuleSymbol
:
{ before(grammarAccess.getSymbolRule()); }
	 ruleSymbol
{ after(grammarAccess.getSymbolRule()); } 
	 EOF 
;

// Rule Symbol
ruleSymbol 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSymbolAccess().getValueAssignment()); }
		(rule__Symbol__ValueAssignment)
		{ after(grammarAccess.getSymbolAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNonEnumerableValue
entryRuleNonEnumerableValue
:
{ before(grammarAccess.getNonEnumerableValueRule()); }
	 ruleNonEnumerableValue
{ after(grammarAccess.getNonEnumerableValueRule()); } 
	 EOF 
;

// Rule NonEnumerableValue
ruleNonEnumerableValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNonEnumerableValueAccess().getAlternatives()); }
		(rule__NonEnumerableValue__Alternatives)
		{ after(grammarAccess.getNonEnumerableValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarType
entryRuleVarType
:
{ before(grammarAccess.getVarTypeRule()); }
	 ruleVarType
{ after(grammarAccess.getVarTypeRule()); } 
	 EOF 
;

// Rule VarType
ruleVarType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarTypeAccess().getAlternatives()); }
		(rule__VarType__Alternatives)
		{ after(grammarAccess.getVarTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGlobalOp
entryRuleGlobalOp
:
{ before(grammarAccess.getGlobalOpRule()); }
	 ruleGlobalOp
{ after(grammarAccess.getGlobalOpRule()); } 
	 EOF 
;

// Rule GlobalOp
ruleGlobalOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGlobalOpAccess().getAlternatives()); }
		(rule__GlobalOp__Alternatives)
		{ after(grammarAccess.getGlobalOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionOp
entryRuleFunctionOp
:
{ before(grammarAccess.getFunctionOpRule()); }
	 ruleFunctionOp
{ after(grammarAccess.getFunctionOpRule()); } 
	 EOF 
;

// Rule FunctionOp
ruleFunctionOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionOpAccess().getAlternatives()); }
		(rule__FunctionOp__Alternatives)
		{ after(grammarAccess.getFunctionOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryOp
entryRuleUnaryOp
:
{ before(grammarAccess.getUnaryOpRule()); }
	 ruleUnaryOp
{ after(grammarAccess.getUnaryOpRule()); } 
	 EOF 
;

// Rule UnaryOp
ruleUnaryOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryOpAccess().getAlternatives()); }
		(rule__UnaryOp__Alternatives)
		{ after(grammarAccess.getUnaryOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOfValues
entryRuleListOfValues
:
{ before(grammarAccess.getListOfValuesRule()); }
	 ruleListOfValues
{ after(grammarAccess.getListOfValuesRule()); } 
	 EOF 
;

// Rule ListOfValues
ruleListOfValues 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListOfValuesAccess().getGroup()); }
		(rule__ListOfValues__Group__0)
		{ after(grammarAccess.getListOfValuesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOfListValues
entryRuleListOfListValues
:
{ before(grammarAccess.getListOfListValuesRule()); }
	 ruleListOfListValues
{ after(grammarAccess.getListOfListValuesRule()); } 
	 EOF 
;

// Rule ListOfListValues
ruleListOfListValues 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListOfListValuesAccess().getGroup()); }
		(rule__ListOfListValues__Group__0)
		{ after(grammarAccess.getListOfListValuesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOfIDs
entryRuleListOfIDs
:
{ before(grammarAccess.getListOfIDsRule()); }
	 ruleListOfIDs
{ after(grammarAccess.getListOfIDsRule()); } 
	 EOF 
;

// Rule ListOfIDs
ruleListOfIDs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getListOfIDsAccess().getIdsAssignment()); }
			(rule__ListOfIDs__IdsAssignment)
			{ after(grammarAccess.getListOfIDsAccess().getIdsAssignment()); }
		)
		(
			{ before(grammarAccess.getListOfIDsAccess().getIdsAssignment()); }
			(rule__ListOfIDs__IdsAssignment)*
			{ after(grammarAccess.getListOfIDsAccess().getIdsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainDeclaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainDeclarationAccess().getIntervalParserRuleCall_0()); }
		ruleInterval
		{ after(grammarAccess.getDomainDeclarationAccess().getIntervalParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDomainDeclarationAccess().getEnumerationParserRuleCall_1()); }
		ruleEnumeration
		{ after(grammarAccess.getDomainDeclarationAccess().getEnumerationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRelationalParserRuleCall_0()); }
		ruleRelational
		{ after(grammarAccess.getExpressionAccess().getRelationalParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGlobalParserRuleCall_1()); }
		ruleGlobal
		{ after(grammarAccess.getExpressionAccess().getGlobalParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getOpEqualsSignKeyword_1_1_0_0()); }
		'='
		{ after(grammarAccess.getEqualityAccess().getOpEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
		'!='
		{ after(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0()); }
		'>='
		{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }
		'<='
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }
		'>'
		{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3()); }
		'<'
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0()); }
		(rule__PlusOrMinus__Group_1_0_0__0)
		{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1()); }
		(rule__PlusOrMinus__Group_1_0_1__0)
		{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpModKeyword_1_1_0_2()); }
		'mod'
		{ after(grammarAccess.getMulOrDivAccess().getOpModKeyword_1_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
		(rule__Primary__Group_0__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_2()); }
		(rule__Primary__Group_2__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_3()); }
		(rule__Primary__Group_3__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_4()); }
		ruleAtomic
		{ after(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_0()); }
		(rule__Atomic__Group_0__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_1()); }
		(rule__Atomic__Group_1__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_2()); }
		(rule__Atomic__Group_2__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAlternatives_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueTrueKeyword_0_1_0_0()); }
		'true'
		{ after(grammarAccess.getAtomicAccess().getValueTrueKeyword_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getValueFalseKeyword_0_1_0_1()); }
		'false'
		{ after(grammarAccess.getAtomicAccess().getValueFalseKeyword_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Strategy__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrategyAccess().getOneKeyword_0()); }
		'one'
		{ after(grammarAccess.getStrategyAccess().getOneKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getStrategyAccess().getTwoKeyword_1()); }
		'two'
		{ after(grammarAccess.getStrategyAccess().getTwoKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVal__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolValAccess().getValueTrueKeyword_0_0()); }
		'true'
		{ after(grammarAccess.getBoolValAccess().getValueTrueKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolValAccess().getValueFalseKeyword_0_1()); }
		'false'
		{ after(grammarAccess.getBoolValAccess().getValueFalseKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getNumberParserRuleCall_0()); }
		ruleNumber
		{ after(grammarAccess.getValueAccess().getNumberParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getNonEnumerableValueParserRuleCall_1()); }
		ruleNonEnumerableValue
		{ after(grammarAccess.getValueAccess().getNonEnumerableValueParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NonEnumerableValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonEnumerableValueAccess().getBoolValParserRuleCall_0()); }
		ruleBoolVal
		{ after(grammarAccess.getNonEnumerableValueAccess().getBoolValParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNonEnumerableValueAccess().getSymbolParserRuleCall_1()); }
		ruleSymbol
		{ after(grammarAccess.getNonEnumerableValueAccess().getSymbolParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTypeAccess().getBooleanKeyword_0()); }
		'boolean'
		{ after(grammarAccess.getVarTypeAccess().getBooleanKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getIntegerKeyword_1()); }
		'integer'
		{ after(grammarAccess.getVarTypeAccess().getIntegerKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getSymbolicKeyword_2()); }
		'symbolic'
		{ after(grammarAccess.getVarTypeAccess().getSymbolicKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalOpAccess().getAt_mostKeyword_0()); }
		'at_most'
		{ after(grammarAccess.getGlobalOpAccess().getAt_mostKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getGlobalOpAccess().getAll_differentKeyword_1()); }
		'all_different'
		{ after(grammarAccess.getGlobalOpAccess().getAll_differentKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionOpAccess().getPowKeyword_0()); }
		'pow'
		{ after(grammarAccess.getFunctionOpAccess().getPowKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionOpAccess().getDistKeyword_1()); }
		'dist'
		{ after(grammarAccess.getFunctionOpAccess().getDistKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionOpAccess().getMinKeyword_2()); }
		'min'
		{ after(grammarAccess.getFunctionOpAccess().getMinKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionOpAccess().getMaxKeyword_3()); }
		'max'
		{ after(grammarAccess.getFunctionOpAccess().getMaxKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOpAccess().getAbsKeyword_0()); }
		'abs'
		{ after(grammarAccess.getUnaryOpAccess().getAbsKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOpAccess().getSqrtKeyword_1()); }
		'sqrt'
		{ after(grammarAccess.getUnaryOpAccess().getSqrtKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelKeyword_0()); }
	'model'
	{ after(grammarAccess.getModelAccess().getModelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
	(rule__Model__NameAssignment_1)
	{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getVariablesKeyword_2()); }
	'variables:'
	{ after(grammarAccess.getModelAccess().getVariablesKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getVariablesAssignment_3()); }
	(rule__Model__VariablesAssignment_3)*
	{ after(grammarAccess.getModelAccess().getVariablesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getConstraintsKeyword_4()); }
	'constraints:'
	{ after(grammarAccess.getModelAccess().getConstraintsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__5__Impl
	rule__Model__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getConstraintsAssignment_5()); }
	(rule__Model__ConstraintsAssignment_5)*
	{ after(grammarAccess.getModelAccess().getConstraintsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getGroup_6()); }
	(rule__Model__Group_6__0)?
	{ after(grammarAccess.getModelAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_6__0__Impl
	rule__Model__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getStrategyKeyword_6_0()); }
	'strategy:'
	{ after(grammarAccess.getModelAccess().getStrategyKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getStrategyAssignment_6_1()); }
	(rule__Model__StrategyAssignment_6_1)
	{ after(grammarAccess.getModelAccess().getStrategyAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getTypeAssignment_0()); }
	(rule__Variable__TypeAssignment_0)
	{ after(grammarAccess.getVariableAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_1()); }
	(rule__Variable__NameAssignment_1)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getGroup_2()); }
	(rule__Variable__Group_2__0)?
	{ after(grammarAccess.getVariableAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_2__0__Impl
	rule__Variable__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getDomainKeyword_2_0()); }
	'domain:'
	{ after(grammarAccess.getVariableAccess().getDomainKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getDomainAssignment_2_1()); }
	(rule__Variable__DomainAssignment_2_1)
	{ after(grammarAccess.getVariableAccess().getDomainAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interval__Group__0__Impl
	rule__Interval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervalAccess().getStartAssignment_0()); }
	(rule__Interval__StartAssignment_0)
	{ after(grammarAccess.getIntervalAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interval__Group__1__Impl
	rule__Interval__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervalAccess().getFullStopFullStopKeyword_1()); }
	'..'
	{ after(grammarAccess.getIntervalAccess().getFullStopFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interval__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervalAccess().getEndAssignment_2()); }
	(rule__Interval__EndAssignment_2)
	{ after(grammarAccess.getIntervalAccess().getEndAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__0__Impl
	rule__Enumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getEnumerationAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__1__Impl
	rule__Enumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getListAssignment_1()); }
	(rule__Enumeration__ListAssignment_1)
	{ after(grammarAccess.getEnumerationAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getEnumerationAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getNameAssignment_0()); }
	(rule__Constraint__NameAssignment_0)
	{ after(grammarAccess.getConstraintAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getConstraintAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getExpAssignment_2()); }
	(rule__Constraint__ExpAssignment_2)
	{ after(grammarAccess.getConstraintAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Iff__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group__0__Impl
	rule__Iff__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getImpliesParserRuleCall_0()); }
	ruleImplies
	{ after(grammarAccess.getIffAccess().getImpliesParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getGroup_1()); }
	(rule__Iff__Group_1__0)*
	{ after(grammarAccess.getIffAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Iff__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group_1__0__Impl
	rule__Iff__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getIffLeftAction_1_0()); }
	()
	{ after(grammarAccess.getIffAccess().getIffLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group_1__1__Impl
	rule__Iff__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_1()); }
	'<=>'
	{ after(grammarAccess.getIffAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getRightAssignment_1_2()); }
	(rule__Iff__RightAssignment_1_2)
	{ after(grammarAccess.getIffAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Implies__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group__0__Impl
	rule__Implies__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getOrParserRuleCall_0()); }
	ruleOr
	{ after(grammarAccess.getImpliesAccess().getOrParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getGroup_1()); }
	(rule__Implies__Group_1__0)*
	{ after(grammarAccess.getImpliesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Implies__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group_1__0__Impl
	rule__Implies__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getImpliesLeftAction_1_0()); }
	()
	{ after(grammarAccess.getImpliesAccess().getImpliesLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group_1__1__Impl
	rule__Implies__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
	'=>'
	{ after(grammarAccess.getImpliesAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getRightAssignment_1_2()); }
	(rule__Implies__RightAssignment_1_2)
	{ after(grammarAccess.getImpliesAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getORKeyword_1_1()); }
	'OR'
	{ after(grammarAccess.getOrAccess().getORKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
	ruleEquality
	{ after(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getANDKeyword_1_1()); }
	'AND'
	{ after(grammarAccess.getAndAccess().getANDKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group__0__Impl
	rule__Equality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getGroup_1()); }
	(rule__Equality__Group_1__0)*
	{ after(grammarAccess.getEqualityAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__0__Impl
	rule__Equality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__1__Impl
	rule__Equality__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getOpAssignment_1_1()); }
	(rule__Equality__OpAssignment_1_1)
	{ after(grammarAccess.getEqualityAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getRightAssignment_1_2()); }
	(rule__Equality__RightAssignment_1_2)
	{ after(grammarAccess.getEqualityAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0()); }
	rulePlusOrMinus
	{ after(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
	(rule__Comparison__Group_1__0)*
	{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__1__Impl
	rule__Comparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
	(rule__Comparison__OpAssignment_1_1)
	{ after(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
	(rule__Comparison__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group__0__Impl
	rule__PlusOrMinus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0()); }
	ruleMulOrDiv
	{ after(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1()); }
	(rule__PlusOrMinus__Group_1__0)*
	{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1__0__Impl
	rule__PlusOrMinus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0()); }
	(rule__PlusOrMinus__Alternatives_1_0)
	{ after(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1()); }
	(rule__PlusOrMinus__RightAssignment_1_1)
	{ after(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0_0__0__Impl
	rule__PlusOrMinus__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1()); }
	'+'
	{ after(grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0_1__0__Impl
	rule__PlusOrMinus__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1()); }
	'-'
	{ after(grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDiv__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group__0__Impl
	rule__MulOrDiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getGroup_1()); }
	(rule__MulOrDiv__Group_1__0)*
	{ after(grammarAccess.getMulOrDivAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDiv__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group_1__0__Impl
	rule__MulOrDiv__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group_1__1__Impl
	rule__MulOrDiv__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1()); }
	(rule__MulOrDiv__OpAssignment_1_1)
	{ after(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2()); }
	(rule__MulOrDiv__RightAssignment_1_2)
	{ after(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__1__Impl
	rule__Primary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRelationalParserRuleCall_0_1()); }
	ruleRelational
	{ after(grammarAccess.getPrimaryAccess().getRelationalParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getNegationAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getNegationAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getTildeKeyword_1_1()); }
	'~'
	{ after(grammarAccess.getPrimaryAccess().getTildeKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
	(rule__Primary__ExpressionAssignment_1_2)
	{ after(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__0__Impl
	rule__Primary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getUnaryAction_2_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getUnaryAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__1__Impl
	rule__Primary__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getOpAssignment_2_1()); }
	(rule__Primary__OpAssignment_2_1)
	{ after(grammarAccess.getPrimaryAccess().getOpAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionAssignment_2_2()); }
	(rule__Primary__ExpressionAssignment_2_2)
	{ after(grammarAccess.getPrimaryAccess().getExpressionAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__0__Impl
	rule__Primary__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getFunctionAction_3_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getFunctionAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__1__Impl
	rule__Primary__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getOpAssignment_3_1()); }
	(rule__Primary__OpAssignment_3_1)
	{ after(grammarAccess.getPrimaryAccess().getOpAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__2__Impl
	rule__Primary__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_2()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__3__Impl
	rule__Primary__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftAssignment_3_3()); }
	(rule__Primary__LeftAssignment_3_3)
	{ after(grammarAccess.getPrimaryAccess().getLeftAssignment_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__4__Impl
	rule__Primary__Group_3__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getCommaKeyword_3_4()); }
	','
	{ after(grammarAccess.getPrimaryAccess().getCommaKeyword_3_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__5__Impl
	rule__Primary__Group_3__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightAssignment_3_5()); }
	(rule__Primary__RightAssignment_3_5)
	{ after(grammarAccess.getPrimaryAccess().getRightAssignment_3_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_6()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__0__Impl
	rule__Atomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getBoolConstantAction_0_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getBoolConstantAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
	(rule__Atomic__ValueAssignment_0_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_1__0__Impl
	rule__Atomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getVariableRefAction_1_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getVariableRefAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getVariableAssignment_1_1()); }
	(rule__Atomic__VariableAssignment_1_1)
	{ after(grammarAccess.getAtomicAccess().getVariableAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_2__0__Impl
	rule__Atomic__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getIntConstantAction_2_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getIntConstantAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
	(rule__Atomic__ValueAssignment_2_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Global__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__0__Impl
	rule__Global__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getOpAssignment_0()); }
	(rule__Global__OpAssignment_0)
	{ after(grammarAccess.getGlobalAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__1__Impl
	rule__Global__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getGlobalAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__2__Impl
	rule__Global__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getVarsAssignment_2()); }
	(rule__Global__VarsAssignment_2)
	{ after(grammarAccess.getGlobalAccess().getVarsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__3__Impl
	rule__Global__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getGlobalAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getGroup_4()); }
	(rule__Global__Group_4__0)?
	{ after(grammarAccess.getGlobalAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Global__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group_4__0__Impl
	rule__Global__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getLeftSquareBracketKeyword_4_0()); }
	'['
	{ after(grammarAccess.getGlobalAccess().getLeftSquareBracketKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group_4__1__Impl
	rule__Global__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getValuesAssignment_4_1()); }
	(rule__Global__ValuesAssignment_4_1)
	{ after(grammarAccess.getGlobalAccess().getValuesAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getRightSquareBracketKeyword_4_2()); }
	']'
	{ after(grammarAccess.getGlobalAccess().getRightSquareBracketKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOfValues__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfValues__Group__0__Impl
	rule__ListOfValues__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfValuesAccess().getValuesAssignment_0()); }
	(rule__ListOfValues__ValuesAssignment_0)
	{ after(grammarAccess.getListOfValuesAccess().getValuesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfValues__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfValuesAccess().getGroup_1()); }
	(rule__ListOfValues__Group_1__0)*
	{ after(grammarAccess.getListOfValuesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOfValues__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfValues__Group_1__0__Impl
	rule__ListOfValues__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getListOfValuesAccess().getCommaKeyword_1_0()); }
		(',')
		{ after(grammarAccess.getListOfValuesAccess().getCommaKeyword_1_0()); }
	)
	(
		{ before(grammarAccess.getListOfValuesAccess().getCommaKeyword_1_0()); }
		(',')*
		{ after(grammarAccess.getListOfValuesAccess().getCommaKeyword_1_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfValues__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfValuesAccess().getValuesAssignment_1_1()); }
	(rule__ListOfValues__ValuesAssignment_1_1)
	{ after(grammarAccess.getListOfValuesAccess().getValuesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOfListValues__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfListValues__Group__0__Impl
	rule__ListOfListValues__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfListValuesAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getListOfListValuesAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfListValues__Group__1__Impl
	rule__ListOfListValues__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfListValuesAccess().getListAssignment_1()); }
	(rule__ListOfListValues__ListAssignment_1)
	{ after(grammarAccess.getListOfListValuesAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfListValues__Group__2__Impl
	rule__ListOfListValues__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfListValuesAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getListOfListValuesAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfListValues__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfListValuesAccess().getGroup_3()); }
	(rule__ListOfListValues__Group_3__0)*
	{ after(grammarAccess.getListOfListValuesAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOfListValues__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfListValues__Group_3__0__Impl
	rule__ListOfListValues__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getListOfListValuesAccess().getCommaKeyword_3_0()); }
		(',')
		{ after(grammarAccess.getListOfListValuesAccess().getCommaKeyword_3_0()); }
	)
	(
		{ before(grammarAccess.getListOfListValuesAccess().getCommaKeyword_3_0()); }
		(',')*
		{ after(grammarAccess.getListOfListValuesAccess().getCommaKeyword_3_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfListValues__Group_3__1__Impl
	rule__ListOfListValues__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfListValuesAccess().getLeftSquareBracketKeyword_3_1()); }
	'['
	{ after(grammarAccess.getListOfListValuesAccess().getLeftSquareBracketKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfListValues__Group_3__2__Impl
	rule__ListOfListValues__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfListValuesAccess().getListAssignment_3_2()); }
	(rule__ListOfListValues__ListAssignment_3_2)
	{ after(grammarAccess.getListOfListValuesAccess().getListAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfListValues__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfListValuesAccess().getRightSquareBracketKeyword_3_3()); }
	']'
	{ after(grammarAccess.getListOfListValuesAccess().getRightSquareBracketKeyword_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__VariablesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getVariablesVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getModelAccess().getVariablesVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ConstraintsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getConstraintsConstraintParserRuleCall_5_0()); }
		ruleConstraint
		{ after(grammarAccess.getModelAccess().getConstraintsConstraintParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__StrategyAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStrategyStrategyParserRuleCall_6_1_0()); }
		ruleStrategy
		{ after(grammarAccess.getModelAccess().getStrategyStrategyParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getTypeVarTypeParserRuleCall_0_0()); }
		ruleVarType
		{ after(grammarAccess.getVariableAccess().getTypeVarTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__DomainAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getDomainDomainDeclarationParserRuleCall_2_1_0()); }
		ruleDomainDeclaration
		{ after(grammarAccess.getVariableAccess().getDomainDomainDeclarationParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntervalAccess().getStartNumberParserRuleCall_0_0()); }
		ruleNumber
		{ after(grammarAccess.getIntervalAccess().getStartNumberParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__EndAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntervalAccess().getEndNumberParserRuleCall_2_0()); }
		ruleNumber
		{ after(grammarAccess.getIntervalAccess().getEndNumberParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getListListOfValuesParserRuleCall_1_0()); }
		ruleListOfValues
		{ after(grammarAccess.getEnumerationAccess().getListListOfValuesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getExpExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getConstraintAccess().getExpExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIffAccess().getRightImpliesParserRuleCall_1_2_0()); }
		ruleImplies
		{ after(grammarAccess.getIffAccess().getRightImpliesParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesAccess().getRightOrParserRuleCall_1_2_0()); }
		ruleOr
		{ after(grammarAccess.getImpliesAccess().getRightOrParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); }
		ruleEquality
		{ after(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0()); }
		(rule__Equality__OpAlternatives_1_1_0)
		{ after(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); }
		ruleComparison
		{ after(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
		(rule__Comparison__OpAlternatives_1_1_0)
		{ after(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0()); }
		rulePlusOrMinus
		{ after(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0()); }
		ruleMulOrDiv
		{ after(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0()); }
		(rule__MulOrDiv__OpAlternatives_1_1_0)
		{ after(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMulOrDivAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__OpAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getOpUnaryOpParserRuleCall_2_1_0()); }
		ruleUnaryOp
		{ after(grammarAccess.getPrimaryAccess().getOpUnaryOpParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ExpressionAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_2_2_0()); }
		rulePrimary
		{ after(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__OpAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getOpFunctionOpParserRuleCall_3_1_0()); }
		ruleFunctionOp
		{ after(grammarAccess.getPrimaryAccess().getOpFunctionOpParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__LeftAssignment_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getLeftPrimaryParserRuleCall_3_3_0()); }
		rulePrimary
		{ after(grammarAccess.getPrimaryAccess().getLeftPrimaryParserRuleCall_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__RightAssignment_3_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getRightPrimaryParserRuleCall_3_5_0()); }
		rulePrimary
		{ after(grammarAccess.getPrimaryAccess().getRightPrimaryParserRuleCall_3_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueAlternatives_0_1_0()); }
		(rule__Atomic__ValueAlternatives_0_1_0)
		{ after(grammarAccess.getAtomicAccess().getValueAlternatives_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__VariableAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getVariableVariableCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getAtomicAccess().getVariableVariableIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAtomicAccess().getVariableVariableIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getAtomicAccess().getVariableVariableCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_2_1_0()); }
		RULE_INT
		{ after(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalAccess().getOpGlobalOpParserRuleCall_0_0()); }
		ruleGlobalOp
		{ after(grammarAccess.getGlobalAccess().getOpGlobalOpParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__VarsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalAccess().getVarsListOfIDsParserRuleCall_2_0()); }
		ruleListOfIDs
		{ after(grammarAccess.getGlobalAccess().getVarsListOfIDsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__ValuesAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalAccess().getValuesListOfListValuesParserRuleCall_4_1_0()); }
		ruleListOfListValues
		{ after(grammarAccess.getGlobalAccess().getValuesListOfListValuesParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVal__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolValAccess().getValueAlternatives_0()); }
		(rule__BoolVal__ValueAlternatives_0)
		{ after(grammarAccess.getBoolValAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Symbol__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolAccess().getValueIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getSymbolAccess().getValueIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__ValuesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOfValuesAccess().getValuesValueParserRuleCall_0_0()); }
		ruleValue
		{ after(grammarAccess.getListOfValuesAccess().getValuesValueParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__ValuesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOfValuesAccess().getValuesValueParserRuleCall_1_1_0()); }
		ruleValue
		{ after(grammarAccess.getListOfValuesAccess().getValuesValueParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOfListValuesAccess().getListListOfValuesParserRuleCall_1_0()); }
		ruleListOfValues
		{ after(grammarAccess.getListOfListValuesAccess().getListListOfValuesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfListValues__ListAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOfListValuesAccess().getListListOfValuesParserRuleCall_3_2_0()); }
		ruleListOfValues
		{ after(grammarAccess.getListOfListValuesAccess().getListListOfValuesParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfIDs__IdsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOfIDsAccess().getIdsIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getListOfIDsAccess().getIdsIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
