/**
 * generated by Xtext 2.12.0
 */
package com.coffee.generator;

import com.coffee.generator.Dialect;
import com.coffee.generator.IHLVLParser;
import com.coffee.generator.ParserFactory;
import com.coffee.hlvl.Model;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class HlvlGenerator extends AbstractGenerator {
  /**
   * instantiable is a flag for determine if the variability model has multiplicities
   */
  private boolean instantiable = false;
  
  /**
   * attributes is a flag for determine if the variability model has attributes
   */
  private boolean attributes = false;
  
  /**
   * generator is an instance of IGenerator
   */
  private IHLVLParser parser;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final String modelName = this.modelName(((Model) _head));
    EObject _head_1 = IterableExtensions.<EObject>head(resource.getContents());
    final Model model = ((Model) _head_1);
    final Dialect dialect = Dialect.findDialect(model);
    final long startTime = System.currentTimeMillis();
    this.parser = ParserFactory.getParser(dialect, modelName);
    fsa.generateFile((modelName + ".mzn"), this.parser.parseModel(model));
    final long stopTime = System.currentTimeMillis();
    final long elapsedTime = (stopTime - startTime);
    fsa.generateFile((modelName + "_Operations.json"), this.parser.getOperations(elapsedTime));
  }
  
  /**
   * Method to obtain the name of the model
   * @param modes is of type Model
   * @returns String name with the name of the model
   */
  public String modelName(final Model model) {
    String name = StringExtensions.toFirstUpper(model.getName());
    return name;
  }
}
