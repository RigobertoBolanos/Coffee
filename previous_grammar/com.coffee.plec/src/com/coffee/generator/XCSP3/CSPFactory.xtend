package com.coffee.generator.XCSP3


import com.coffee.generator.TypeOfProblem
import com.coffee.pLEC.VarDeclaration
import com.coffee.pLEC.Structural
import java.util.Map
import java.util.ArrayList
import com.coffee.generator.FODAFactory
import com.coffee.generator.CardinalityFactory
import com.coffee.pLEC.Attributes
import com.coffee.pLEC.Rule
import com.coffee.pLEC.Refinement
import com.coffee.generator.CoffeeFactory
import com.coffee.pLEC.Assignment
import com.coffee.pLEC.BoolVal
import com.coffee.pLEC.Number

class CSPFactory  extends XCSP3Factory implements FODAFactory, CoffeeFactory{
	/**
	 * List with the constraints autogenerated for dealing with feature instances
	 */
	private ArrayList <String> clonConstraints;

	
	new(TypeOfProblem type) {
		super(type)
		//initializing the list of autogenerated constraints
		clonConstraints= new ArrayList<String>;	
	}
	/*===================================================================
	 *===================================================================
	 * Methods Forthe FODAFactory interface
	 * */

	override getVariable(VarDeclaration variable) {
//				«IF  (!(variable.min===null && variable.max===null)) »
//					«getClonVariables(variable)»	
//				«ENDIF»
		'''
		<var id="«variable.name»">«getValuesDeclaration(variable, variable.variants)»</var>
		'''
		
	}

	
	override getOptional(VarDeclaration parent, VarDeclaration child) {
		'''ge(«parent.name», «child.name»)'''
	}
	
	override getMandatory(VarDeclaration parent, VarDeclaration child) {
		'''eq(«parent.name», «child.name»)'''
	}
	
	override getExcludes(VarDeclaration left, VarDeclaration right) {
		'''le(add(«left.name», «right.name»), 1) '''
	}
	
	override getRequires(VarDeclaration left, VarDeclaration right) {
		'''imp(«left.name»,gt(«right.name»,1) )'''
	}
	
	override getGroupCardinality(Structural exp, Map<String, VarDeclaration> parents) {
		var idsSum="add("
		var implies=""
		var output ='''and('''
		for (child : exp.group.ids) {
			implies += '''imp(«child.name», «exp.parent.name»),'''
			idsSum+= child.name +", "
			parents.put(child.name, exp.parent)
		}
		val sumLessThan = '''le(«idsSum.substring(0, idsSum.length() - 2)»), «exp.min.value»)''' 
		val sumGreaterThan ='''ge(«idsSum.substring(0, idsSum.length() - 2)»), «exp.max.value»)'''
		output+= '''«implies» imp(ge(«exp.parent.name», 1), and(«sumLessThan», «sumGreaterThan»)) )'''

	}
	
	/*===================================================================
	 *===================================================================
	 * Methods For cardinalities CardinalityFactory interface
	 * */
	 /**
	  * This method is called when declaring an instantiable variable
	  * This method declares the extra variables and includes the cloning constraints
	  * in an Array, for being included in the program in the constraints section
	  */
	 
//	 	override getClonVariables(VarDeclaration variable) {
//		var String declaration=""
//		var String left= ""
//		var String right= ""
//		var String sum= "add("
//		
//		for ( var i=1; i<= variable.max.value; i= i+1) {
//			declaration+='''<var id= "«variable.name+i»">" 0 1 </var>''' 
//			sum+= ''' «variable.name+i», '''
//			var  implies=  '''imp(«variable.name+i», «variable.name»)'''
//			clonConstraints.add(implies)
//		}
//		left = '''le(«variable.min.value», «sum.substring(0, sum.length() - 2)»)''' 
//		right ='''ge(«variable.max.value»,«sum.substring(0, sum.length() - 2)»)''' 
//		var String constraint='''imp(«variable.name», and(«left», «right»))'''
//		clonConstraints.add(constraint)
//		declaration
//	}
	

//	override getClonConstraints() {
//		var out =""
//		if (clonConstraints===null){
//			out=""
//		}
//		else{
//			var int id = 1
//			for( constraint : clonConstraints){		
//			 	out += '''<intension id= "cl_«id»" >
//			 	 «constraint.toString»
//			 	 </intension>'''
//			 	id++
//			}
//		}
//		out
//	}
	/*===================================================================
	 *===================================================================
	 * Methods For cardinalities AttributesFactory interface
	 * */
	override getAttributes(Attributes exp) {
		val left= exp.var1.name
		var out=""
		for(att : exp.att.ids){
			out='''imp(«left», gt(«att.name», 0))'''
		}
		out
	}
	
	/*===================================================================
	 *===================================================================
	 * Methods For new constraints CoffeeFactory interface
	 * */
	/**
	 * TODO: cómo poner un refinement:  es decir que una restriccion implique otra, conun if???
	 */
	override getRule(CharSequence left, CharSequence right) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	override getRefinement(Refinement exp) {
		'''a refinement'''
	}
	
	override getAssignement(Assignment exp) {
		var output=""
		if((exp.valu as BoolVal).value == "selected")
			output='''«exp.variable.name» = 1'''
		else
			if((exp.valu as BoolVal).value == "unselected")
				output='''«exp.variable.name» = 0'''
			else
				'''eq(«exp.variable.name», «(exp.valu as Number).value»)'''
		
	}

	
	/**
	 * 
	 */
	

	
	


	
	
	
}