/**
 * generated by Xtext 2.12.0
 */
package com.coffee.pLEC.impl;

import com.coffee.pLEC.Assignment;
import com.coffee.pLEC.PLECPackage;
import com.coffee.pLEC.Value;
import com.coffee.pLEC.VarDeclaration;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assignment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.coffee.pLEC.impl.AssignmentImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link com.coffee.pLEC.impl.AssignmentImpl#getValu <em>Valu</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssignmentImpl extends RefinementImpl implements Assignment
{
  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected VarDeclaration variable;

  /**
   * The cached value of the '{@link #getValu() <em>Valu</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValu()
   * @generated
   * @ordered
   */
  protected Value valu;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssignmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PLECPackage.Literals.ASSIGNMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarDeclaration getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (VarDeclaration)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, PLECPackage.ASSIGNMENT__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarDeclaration basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariable(VarDeclaration newVariable)
  {
    VarDeclaration oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PLECPackage.ASSIGNMENT__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value getValu()
  {
    return valu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValu(Value newValu, NotificationChain msgs)
  {
    Value oldValu = valu;
    valu = newValu;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PLECPackage.ASSIGNMENT__VALU, oldValu, newValu);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValu(Value newValu)
  {
    if (newValu != valu)
    {
      NotificationChain msgs = null;
      if (valu != null)
        msgs = ((InternalEObject)valu).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PLECPackage.ASSIGNMENT__VALU, null, msgs);
      if (newValu != null)
        msgs = ((InternalEObject)newValu).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PLECPackage.ASSIGNMENT__VALU, null, msgs);
      msgs = basicSetValu(newValu, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PLECPackage.ASSIGNMENT__VALU, newValu, newValu));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PLECPackage.ASSIGNMENT__VALU:
        return basicSetValu(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PLECPackage.ASSIGNMENT__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
      case PLECPackage.ASSIGNMENT__VALU:
        return getValu();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PLECPackage.ASSIGNMENT__VARIABLE:
        setVariable((VarDeclaration)newValue);
        return;
      case PLECPackage.ASSIGNMENT__VALU:
        setValu((Value)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PLECPackage.ASSIGNMENT__VARIABLE:
        setVariable((VarDeclaration)null);
        return;
      case PLECPackage.ASSIGNMENT__VALU:
        setValu((Value)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PLECPackage.ASSIGNMENT__VARIABLE:
        return variable != null;
      case PLECPackage.ASSIGNMENT__VALU:
        return valu != null;
    }
    return super.eIsSet(featureID);
  }

} //AssignmentImpl
