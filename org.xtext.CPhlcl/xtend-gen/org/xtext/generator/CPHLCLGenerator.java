/**
 * generated by Xtext 2.12.0
 */
package org.xtext.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.cPHLCL.Arithmetic;
import org.xtext.cPHLCL.BoolExpression;
import org.xtext.cPHLCL.BoolVar;
import org.xtext.cPHLCL.ComplexTerm;
import org.xtext.cPHLCL.Constraint;
import org.xtext.cPHLCL.DomainDeclaration;
import org.xtext.cPHLCL.Enumeration;
import org.xtext.cPHLCL.Expression;
import org.xtext.cPHLCL.Global;
import org.xtext.cPHLCL.IntVar;
import org.xtext.cPHLCL.Interval;
import org.xtext.cPHLCL.ListOfIDs;
import org.xtext.cPHLCL.Logic;
import org.xtext.cPHLCL.LogicUn;
import org.xtext.cPHLCL.Model;
import org.xtext.cPHLCL.NumExpression;
import org.xtext.cPHLCL.Relational;
import org.xtext.cPHLCL.VarDeclaration;
import org.xtext.generator.JavaCodeStrings;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CPHLCLGenerator extends AbstractGenerator implements JavaCodeStrings {
  private String modelName;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    this.modelName = this.modelName(((Model) _head));
    EObject _head_1 = IterableExtensions.<EObject>head(resource.getContents());
    fsa.generateFile((this.modelName + ".java"), this.toJavaCode(((Model) _head_1)));
  }
  
  public String modelName(final Model model) {
    String name = StringExtensions.toFirstUpper(model.getName());
    return name;
  }
  
  public String className(final Resource res) {
    String name = res.getURI().lastSegment();
    InputOutput.<String>println(name);
    return name.substring(0, name.indexOf("."));
  }
  
  public CharSequence toJavaCode(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//Java imports");
    _builder.newLine();
    _builder.append(JavaCodeStrings.JAVA_IMPORTS);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("//imports for hlcl ");
    _builder.newLine();
    _builder.append(JavaCodeStrings.HLCL_IMPORTS);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("//imports for solver");
    _builder.newLine();
    _builder.append(JavaCodeStrings.SOLVER_IMPORTS);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append(JavaCodeStrings.CLASS_JAVADOC);
    _builder.newLineIfNotEmpty();
    _builder.append(JavaCodeStrings.CLASS_DECLARATION);
    _builder.append(" ");
    _builder.append(this.modelName);
    _builder.append(" { ");
    _builder.append("\t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(JavaCodeStrings.CLASS_ATTRIBUTES, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(JavaCodeStrings.CONSTRUCTOR_JAVADOC, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ");
    _builder.append(this.modelName, "\t");
    _builder.append("(String modelName){ ");
    _builder.append("\t\t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append(JavaCodeStrings.CONSTRUCTOR_CODE, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("} ");
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(this.modelName, "\t\t");
    _builder.append(" obj = new ");
    _builder.append(this.modelName, "\t\t");
    _builder.append("(\"");
    _builder.append(this.modelName, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("obj.run();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(JavaCodeStrings.RUN_METHOD, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public void transformVars() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//declaring the variable for the model");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Identifier ");
    _builder.append(this.modelName, "\t\t");
    _builder.append("Var = factory.newIdentifier(\"");
    _builder.append(this.modelName, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("BinaryDomain ");
    _builder.append(this.modelName, "\t\t");
    _builder.append("Dom= new BinaryDomain();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append(this.modelName, "\t\t");
    _builder.append("Var.setDomain(");
    _builder.append(this.modelName, "\t\t");
    _builder.append("Dom);\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("variables.put(\"");
    _builder.append(this.modelName, "\t\t");
    _builder.append("Var\", ");
    _builder.append(this.modelName, "\t\t");
    _builder.append("Var); //including the variable in the map");
    _builder.newLineIfNotEmpty();
    {
      EList<VarDeclaration> _vars = model.getVars();
      for(final VarDeclaration c : _vars) {
        _builder.append("\t\t");
        CharSequence _declareVars = this.declareVars(c);
        _builder.append(_declareVars, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void transformConstraints() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//declaring the constraint for the model");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("IntBooleanExpression C");
    _builder.append(this.modelName, "\t\t");
    _builder.append("= factory.equals(variables.get(\"");
    _builder.append(this.modelName, "\t\t");
    _builder.append("Var\"), getValue(\"1\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("constraints.put(\"C");
    _builder.append(this.modelName, "\t\t");
    _builder.append("\", C");
    _builder.append(this.modelName, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("hlclProgram.add(C");
    _builder.append(this.modelName, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      EList<Constraint> _constraints = model.getConstraints();
      for(final Constraint c_1 : _constraints) {
        _builder.append("\t\t");
        CharSequence _declareCons = this.declareCons(c_1.getExp(), c_1.getName());
        _builder.append(_declareCons, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(JavaCodeStrings.EVALUATE_SATISFIABILITY, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(JavaCodeStrings.GET_VALUE_JAVADOC, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(JavaCodeStrings.GET_VALUE_CODE, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(JavaCodeStrings.GETTERS_SETTERS, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("} ");
    _builder.append("\t");
    return _builder;
  }
  
  public CharSequence declareVars(final VarDeclaration variable) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//declaring variable ");
    String _name = variable.getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    _builder.append("Identifier ");
    String _name_1 = variable.getName();
    _builder.append(_name_1);
    _builder.append(" = factory.newIdentifier(\"");
    String _name_2 = variable.getName();
    _builder.append(_name_2);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    String myType = variable.getType().toString();
    _builder.newLineIfNotEmpty();
    CharSequence _declareDomain = this.declareDomain(variable.getDomain(), myType, variable.getName());
    _builder.append(_declareDomain);
    _builder.newLineIfNotEmpty();
    _builder.append("variables.put(\"");
    String _name_3 = variable.getName();
    _builder.append(_name_3);
    _builder.append("\", ");
    String _name_4 = variable.getName();
    _builder.append(_name_4);
    _builder.append("); //including the variable in the map");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence declareDomain(final DomainDeclaration domain, final String type, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equals = type.equals("bool");
      if (_equals) {
        _builder.append("  ");
        _builder.append("\t\t\tBinaryDomain ");
        _builder.append(name);
        _builder.append("Dom= new BinaryDomain();");
        _builder.newLineIfNotEmpty();
      } else {
        {
          if ((domain instanceof Interval)) {
            _builder.append(" ");
            _builder.append("\t\t\t\tRangeDomain ");
            _builder.append(name);
            _builder.append("Dom= new RangeDomain(");
            String _start = ((Interval)domain).getStart();
            _builder.append(_start);
            _builder.append(", ");
            String _end = ((Interval)domain).getEnd();
            _builder.append(_end);
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          } else {
            {
              if ((domain instanceof Enumeration)) {
                _builder.append(" ");
                _builder.append("\t\t\t\t\t");
                {
                  boolean _equals_1 = type.equals("symbolic");
                  if (_equals_1) {
                    _builder.append(" ");
                    _builder.append("\t\t\t\t\t\tStringDomain ");
                    _builder.append(name);
                    _builder.append("Dom= new StringDomain();");
                    _builder.newLineIfNotEmpty();
                    {
                      EList<String> _values = ((Enumeration)domain).getList().getValues();
                      for(final String e : _values) {
                        _builder.append("\t\t");
                        _builder.append(name, "\t\t");
                        _builder.append("Dom.add(\"");
                        _builder.append(e, "\t\t");
                        _builder.append("\"); ");
                        _builder.append("\t\t\t\t\t\t");
                      }
                    }
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                  } else {
                    _builder.append(" ");
                    _builder.append("\t\t\t\t\t\tIntervalDomain ");
                    _builder.append(name);
                    _builder.append("Dom= new IntervalDomain(); ");
                    _builder.newLineIfNotEmpty();
                    {
                      EList<String> _values_1 = ((Enumeration)domain).getList().getValues();
                      for(final String e_1 : _values_1) {
                        _builder.append("\t\t");
                        _builder.append(name, "\t\t");
                        _builder.append("Dom.add(");
                        _builder.append(e_1, "\t\t");
                        _builder.append("); ");
                        _builder.append("\t\t\t\t\t\t");
                      }
                    }
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append(name);
    _builder.append(".setDomain(");
    _builder.append(name);
    _builder.append("Dom);\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence declareCons(final Expression exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//");
    _builder.newLine();
    _builder.append("//declaring constraint ");
    _builder.append(name);
    _builder.newLineIfNotEmpty();
    {
      if ((exp instanceof Global)) {
        CharSequence _declareGlobal = this.declareGlobal(((Global)exp), name);
        _builder.append(_declareGlobal);
        _builder.newLineIfNotEmpty();
      } else {
        {
          if ((exp instanceof Logic)) {
            CharSequence _declareLogic = this.declareLogic(((Logic)exp), name);
            _builder.append(_declareLogic);
            _builder.newLineIfNotEmpty();
          } else {
            {
              if ((exp instanceof Relational)) {
                CharSequence _declareRelational = this.declareRelational(((Relational)exp), name);
                _builder.append(_declareRelational);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("constraints.put(\"");
    _builder.append(name);
    _builder.append("\", ");
    _builder.append(name);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("hlclProgram.add(");
    _builder.append(name);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence declareGlobal(final Global exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("SymbolicExpression ");
    _builder.append(name);
    _builder.append("= factory.newSymbolic(\"");
    String _op = exp.getOp();
    _builder.append(_op);
    _builder.append("\"");
    CharSequence _declareIds = this.declareIds(exp.getVars());
    _builder.append(_declareIds);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence declareIds(final ListOfIDs idList) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<String> _ids = idList.getIds();
      for(final String id : _ids) {
        _builder.append(", variables.get(\"");
        _builder.append(id);
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence declareRelational(final Relational exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _declareNumericTerm = this.declareNumericTerm(exp.getRelationalLeft(), (name + "_left"));
    _builder.append(_declareNumericTerm);
    _builder.newLineIfNotEmpty();
    CharSequence _declareNumericTerm_1 = this.declareNumericTerm(exp.getRelationalRight(), (name + "_right"));
    _builder.append(_declareNumericTerm_1);
    _builder.newLineIfNotEmpty();
    _builder.append("IntBooleanExpression ");
    _builder.append(name);
    _builder.append("=");
    _builder.newLineIfNotEmpty();
    {
      boolean _equals = exp.getRelationalOp().equals(">");
      if (_equals) {
        _builder.append("factory.greaterThan(");
        _builder.append(name);
        _builder.append("_left, ");
        _builder.append(name);
        _builder.append("_right);");
        _builder.newLineIfNotEmpty();
      } else {
        {
          boolean _equals_1 = exp.getRelationalOp().equals(">=");
          if (_equals_1) {
            _builder.append("factory.greaterOrEqualsThan(");
            _builder.append(name);
            _builder.append("_left, ");
            _builder.append(name);
            _builder.append("_right);");
            _builder.newLineIfNotEmpty();
          } else {
            {
              boolean _equals_2 = exp.getRelationalOp().equals("<");
              if (_equals_2) {
                _builder.append("factory.lessThan(");
                _builder.append(name);
                _builder.append("_left, ");
                _builder.append(name);
                _builder.append("_right);");
                _builder.newLineIfNotEmpty();
              } else {
                {
                  boolean _equals_3 = exp.getRelationalOp().equals("<=");
                  if (_equals_3) {
                    _builder.append("factory.lessOrEqualsThan(");
                    _builder.append(name);
                    _builder.append("_left, ");
                    _builder.append(name);
                    _builder.append("_right);");
                    _builder.newLineIfNotEmpty();
                  } else {
                    {
                      boolean _equals_4 = exp.getRelationalOp().equals("=");
                      if (_equals_4) {
                        _builder.append("factory.equals(");
                        _builder.append(name);
                        _builder.append("_left, ");
                        _builder.append(name);
                        _builder.append("_right);");
                        _builder.newLineIfNotEmpty();
                      } else {
                        {
                          boolean _equals_5 = exp.getRelationalOp().equals("!=");
                          if (_equals_5) {
                            _builder.append("factory.notEquals(");
                            _builder.append(name);
                            _builder.append("_left, ");
                            _builder.append(name);
                            _builder.append("_right);");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence declareLogic(final Logic exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _declareBoolTerm = this.declareBoolTerm(exp.getLogicLeft(), (name + "_left"));
    _builder.append(_declareBoolTerm);
    _builder.newLineIfNotEmpty();
    CharSequence _declareBoolTerm_1 = this.declareBoolTerm(exp.getLogicRight(), (name + "_right"));
    _builder.append(_declareBoolTerm_1);
    _builder.newLineIfNotEmpty();
    _builder.append("IntBooleanExpression ");
    _builder.append(name);
    _builder.append("=");
    _builder.newLineIfNotEmpty();
    {
      boolean _equals = exp.getLogicOp().equals("AND");
      if (_equals) {
        _builder.append("factory.and(");
        _builder.append(name);
        _builder.append("_left, ");
        _builder.append(name);
        _builder.append("_right);");
        _builder.newLineIfNotEmpty();
      } else {
        {
          boolean _equals_1 = exp.getLogicOp().equals("OR");
          if (_equals_1) {
            _builder.append("factory.or(");
            _builder.append(name);
            _builder.append("_left, ");
            _builder.append(name);
            _builder.append("_right);");
            _builder.newLineIfNotEmpty();
          } else {
            {
              boolean _equals_2 = exp.getLogicOp().equals("XOR");
              if (_equals_2) {
                _builder.append("factory.xor(");
                _builder.append(name);
                _builder.append("_left, ");
                _builder.append(name);
                _builder.append("_right);");
                _builder.newLineIfNotEmpty();
              } else {
                {
                  boolean _equals_3 = exp.getLogicOp().equals("=>");
                  if (_equals_3) {
                    _builder.append("factory.implies(");
                    _builder.append(name);
                    _builder.append("_left, ");
                    _builder.append(name);
                    _builder.append("_right);");
                    _builder.newLineIfNotEmpty();
                  } else {
                    {
                      boolean _equals_4 = exp.getLogicOp().equals("<=>");
                      if (_equals_4) {
                        _builder.append("factory.doubleImplies(");
                        _builder.append(name);
                        _builder.append("_left, ");
                        _builder.append(name);
                        _builder.append("_right);");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence declareBoolTerm(final BoolExpression exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((exp instanceof BoolVar)) {
        _builder.append("Identifier ");
        _builder.append(name);
        _builder.append(" = variables.get(\"");
        String _id = ((BoolVar)exp).getId();
        _builder.append(_id);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      } else {
        {
          if ((exp instanceof ComplexTerm)) {
            {
              if ((exp instanceof Logic)) {
                Object _declareLogic = this.declareLogic(((Logic)exp), name);
                _builder.append(_declareLogic);
                _builder.newLineIfNotEmpty();
              } else {
                {
                  if ((exp instanceof LogicUn)) {
                    Object _declareBoolTerm = this.declareBoolTerm(((LogicUn)exp).getExp(), (name + "_int"));
                    _builder.append(_declareBoolTerm);
                    _builder.newLineIfNotEmpty();
                    _builder.append("IntBooleanExpression ");
                    _builder.append(name);
                    _builder.append("=factory.not(");
                    _builder.append(name);
                    _builder.append("_int);");
                    _builder.newLineIfNotEmpty();
                  } else {
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence declareNumericTerm(final NumExpression exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((exp instanceof Number)) {
        _builder.append("// there is a number in the parser");
        _builder.newLine();
        _builder.append("NumericIdentifier ");
        _builder.append(name);
        _builder.append(" = getValue(\"");
        _builder.append(((Number)exp));
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      } else {
        {
          if ((exp instanceof IntVar)) {
            _builder.append("Identifier ");
            _builder.append(name);
            _builder.append(" = variables.get(\"");
            String _id = ((IntVar)exp).getId();
            _builder.append(_id);
            _builder.append("\");\t");
            _builder.newLineIfNotEmpty();
          } else {
            {
              if ((exp instanceof Arithmetic)) {
                CharSequence _declareArithmetic = this.declareArithmetic(((Arithmetic)exp), name);
                _builder.append(_declareArithmetic);
                _builder.newLineIfNotEmpty();
              } else {
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence declareArithmetic(final Arithmetic exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    Object _declareNumericTerm = this.declareNumericTerm(exp.getLeft(), (name + "_left"));
    _builder.append(_declareNumericTerm);
    _builder.newLineIfNotEmpty();
    Object _declareNumericTerm_1 = this.declareNumericTerm(exp.getRight(), (name + "_right"));
    _builder.append(_declareNumericTerm_1);
    _builder.newLineIfNotEmpty();
    _builder.append("IntNumericExpression ");
    _builder.append(name);
    _builder.append("=");
    _builder.newLineIfNotEmpty();
    {
      boolean _equals = exp.getArithOperator().equals("+");
      if (_equals) {
        _builder.append("factory.sum(");
        _builder.append(name);
        _builder.append("_left, ");
        _builder.append(name);
        _builder.append("_right);");
        _builder.newLineIfNotEmpty();
      } else {
        {
          boolean _equals_1 = exp.getArithOperator().equals("-");
          if (_equals_1) {
            _builder.append("factory.diff(");
            _builder.append(name);
            _builder.append("_left, ");
            _builder.append(name);
            _builder.append("_right);");
            _builder.newLineIfNotEmpty();
          } else {
            {
              boolean _equals_2 = exp.getArithOperator().equals("*");
              if (_equals_2) {
                _builder.append("factory.prod(");
                _builder.append(name);
                _builder.append("_left, ");
                _builder.append(name);
                _builder.append("_right);");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
}
