/**
 * generated by Xtext 2.12.0
 */
package org.xtext.cPHLCL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.cPHLCL.CPHLCLPackage;
import org.xtext.cPHLCL.NumExpression;
import org.xtext.cPHLCL.Relational;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Relational</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.cPHLCL.impl.RelationalImpl#getRelationalLeft <em>Relational Left</em>}</li>
 *   <li>{@link org.xtext.cPHLCL.impl.RelationalImpl#getRelationalOp <em>Relational Op</em>}</li>
 *   <li>{@link org.xtext.cPHLCL.impl.RelationalImpl#getRelationalRight <em>Relational Right</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RelationalImpl extends ExpressionImpl implements Relational
{
  /**
   * The cached value of the '{@link #getRelationalLeft() <em>Relational Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelationalLeft()
   * @generated
   * @ordered
   */
  protected NumExpression relationalLeft;

  /**
   * The default value of the '{@link #getRelationalOp() <em>Relational Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelationalOp()
   * @generated
   * @ordered
   */
  protected static final String RELATIONAL_OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRelationalOp() <em>Relational Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelationalOp()
   * @generated
   * @ordered
   */
  protected String relationalOp = RELATIONAL_OP_EDEFAULT;

  /**
   * The cached value of the '{@link #getRelationalRight() <em>Relational Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelationalRight()
   * @generated
   * @ordered
   */
  protected NumExpression relationalRight;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationalImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CPHLCLPackage.Literals.RELATIONAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumExpression getRelationalLeft()
  {
    return relationalLeft;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRelationalLeft(NumExpression newRelationalLeft, NotificationChain msgs)
  {
    NumExpression oldRelationalLeft = relationalLeft;
    relationalLeft = newRelationalLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPHLCLPackage.RELATIONAL__RELATIONAL_LEFT, oldRelationalLeft, newRelationalLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRelationalLeft(NumExpression newRelationalLeft)
  {
    if (newRelationalLeft != relationalLeft)
    {
      NotificationChain msgs = null;
      if (relationalLeft != null)
        msgs = ((InternalEObject)relationalLeft).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.RELATIONAL__RELATIONAL_LEFT, null, msgs);
      if (newRelationalLeft != null)
        msgs = ((InternalEObject)newRelationalLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.RELATIONAL__RELATIONAL_LEFT, null, msgs);
      msgs = basicSetRelationalLeft(newRelationalLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPHLCLPackage.RELATIONAL__RELATIONAL_LEFT, newRelationalLeft, newRelationalLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRelationalOp()
  {
    return relationalOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRelationalOp(String newRelationalOp)
  {
    String oldRelationalOp = relationalOp;
    relationalOp = newRelationalOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPHLCLPackage.RELATIONAL__RELATIONAL_OP, oldRelationalOp, relationalOp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumExpression getRelationalRight()
  {
    return relationalRight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRelationalRight(NumExpression newRelationalRight, NotificationChain msgs)
  {
    NumExpression oldRelationalRight = relationalRight;
    relationalRight = newRelationalRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPHLCLPackage.RELATIONAL__RELATIONAL_RIGHT, oldRelationalRight, newRelationalRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRelationalRight(NumExpression newRelationalRight)
  {
    if (newRelationalRight != relationalRight)
    {
      NotificationChain msgs = null;
      if (relationalRight != null)
        msgs = ((InternalEObject)relationalRight).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.RELATIONAL__RELATIONAL_RIGHT, null, msgs);
      if (newRelationalRight != null)
        msgs = ((InternalEObject)newRelationalRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.RELATIONAL__RELATIONAL_RIGHT, null, msgs);
      msgs = basicSetRelationalRight(newRelationalRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPHLCLPackage.RELATIONAL__RELATIONAL_RIGHT, newRelationalRight, newRelationalRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CPHLCLPackage.RELATIONAL__RELATIONAL_LEFT:
        return basicSetRelationalLeft(null, msgs);
      case CPHLCLPackage.RELATIONAL__RELATIONAL_RIGHT:
        return basicSetRelationalRight(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CPHLCLPackage.RELATIONAL__RELATIONAL_LEFT:
        return getRelationalLeft();
      case CPHLCLPackage.RELATIONAL__RELATIONAL_OP:
        return getRelationalOp();
      case CPHLCLPackage.RELATIONAL__RELATIONAL_RIGHT:
        return getRelationalRight();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CPHLCLPackage.RELATIONAL__RELATIONAL_LEFT:
        setRelationalLeft((NumExpression)newValue);
        return;
      case CPHLCLPackage.RELATIONAL__RELATIONAL_OP:
        setRelationalOp((String)newValue);
        return;
      case CPHLCLPackage.RELATIONAL__RELATIONAL_RIGHT:
        setRelationalRight((NumExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CPHLCLPackage.RELATIONAL__RELATIONAL_LEFT:
        setRelationalLeft((NumExpression)null);
        return;
      case CPHLCLPackage.RELATIONAL__RELATIONAL_OP:
        setRelationalOp(RELATIONAL_OP_EDEFAULT);
        return;
      case CPHLCLPackage.RELATIONAL__RELATIONAL_RIGHT:
        setRelationalRight((NumExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CPHLCLPackage.RELATIONAL__RELATIONAL_LEFT:
        return relationalLeft != null;
      case CPHLCLPackage.RELATIONAL__RELATIONAL_OP:
        return RELATIONAL_OP_EDEFAULT == null ? relationalOp != null : !RELATIONAL_OP_EDEFAULT.equals(relationalOp);
      case CPHLCLPackage.RELATIONAL__RELATIONAL_RIGHT:
        return relationalRight != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (relationalOp: ");
    result.append(relationalOp);
    result.append(')');
    return result.toString();
  }

} //RelationalImpl
