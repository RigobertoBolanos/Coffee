/**
 * generated by Xtext 2.12.0
 */
package org.xtext.cPHLCL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.cPHLCL.BoolExpression;
import org.xtext.cPHLCL.CPHLCLPackage;
import org.xtext.cPHLCL.Control;
import org.xtext.cPHLCL.Expression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Control</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.cPHLCL.impl.ControlImpl#getCond <em>Cond</em>}</li>
 *   <li>{@link org.xtext.cPHLCL.impl.ControlImpl#getTrueStatement <em>True Statement</em>}</li>
 *   <li>{@link org.xtext.cPHLCL.impl.ControlImpl#getElseStatement <em>Else Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ControlImpl extends ExpressionImpl implements Control
{
  /**
   * The cached value of the '{@link #getCond() <em>Cond</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCond()
   * @generated
   * @ordered
   */
  protected BoolExpression cond;

  /**
   * The cached value of the '{@link #getTrueStatement() <em>True Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrueStatement()
   * @generated
   * @ordered
   */
  protected Expression trueStatement;

  /**
   * The cached value of the '{@link #getElseStatement() <em>Else Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseStatement()
   * @generated
   * @ordered
   */
  protected Expression elseStatement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ControlImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CPHLCLPackage.Literals.CONTROL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolExpression getCond()
  {
    return cond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCond(BoolExpression newCond, NotificationChain msgs)
  {
    BoolExpression oldCond = cond;
    cond = newCond;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPHLCLPackage.CONTROL__COND, oldCond, newCond);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCond(BoolExpression newCond)
  {
    if (newCond != cond)
    {
      NotificationChain msgs = null;
      if (cond != null)
        msgs = ((InternalEObject)cond).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.CONTROL__COND, null, msgs);
      if (newCond != null)
        msgs = ((InternalEObject)newCond).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.CONTROL__COND, null, msgs);
      msgs = basicSetCond(newCond, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPHLCLPackage.CONTROL__COND, newCond, newCond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getTrueStatement()
  {
    return trueStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTrueStatement(Expression newTrueStatement, NotificationChain msgs)
  {
    Expression oldTrueStatement = trueStatement;
    trueStatement = newTrueStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPHLCLPackage.CONTROL__TRUE_STATEMENT, oldTrueStatement, newTrueStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTrueStatement(Expression newTrueStatement)
  {
    if (newTrueStatement != trueStatement)
    {
      NotificationChain msgs = null;
      if (trueStatement != null)
        msgs = ((InternalEObject)trueStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.CONTROL__TRUE_STATEMENT, null, msgs);
      if (newTrueStatement != null)
        msgs = ((InternalEObject)newTrueStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.CONTROL__TRUE_STATEMENT, null, msgs);
      msgs = basicSetTrueStatement(newTrueStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPHLCLPackage.CONTROL__TRUE_STATEMENT, newTrueStatement, newTrueStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getElseStatement()
  {
    return elseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElseStatement(Expression newElseStatement, NotificationChain msgs)
  {
    Expression oldElseStatement = elseStatement;
    elseStatement = newElseStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPHLCLPackage.CONTROL__ELSE_STATEMENT, oldElseStatement, newElseStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElseStatement(Expression newElseStatement)
  {
    if (newElseStatement != elseStatement)
    {
      NotificationChain msgs = null;
      if (elseStatement != null)
        msgs = ((InternalEObject)elseStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.CONTROL__ELSE_STATEMENT, null, msgs);
      if (newElseStatement != null)
        msgs = ((InternalEObject)newElseStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.CONTROL__ELSE_STATEMENT, null, msgs);
      msgs = basicSetElseStatement(newElseStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPHLCLPackage.CONTROL__ELSE_STATEMENT, newElseStatement, newElseStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CPHLCLPackage.CONTROL__COND:
        return basicSetCond(null, msgs);
      case CPHLCLPackage.CONTROL__TRUE_STATEMENT:
        return basicSetTrueStatement(null, msgs);
      case CPHLCLPackage.CONTROL__ELSE_STATEMENT:
        return basicSetElseStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CPHLCLPackage.CONTROL__COND:
        return getCond();
      case CPHLCLPackage.CONTROL__TRUE_STATEMENT:
        return getTrueStatement();
      case CPHLCLPackage.CONTROL__ELSE_STATEMENT:
        return getElseStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CPHLCLPackage.CONTROL__COND:
        setCond((BoolExpression)newValue);
        return;
      case CPHLCLPackage.CONTROL__TRUE_STATEMENT:
        setTrueStatement((Expression)newValue);
        return;
      case CPHLCLPackage.CONTROL__ELSE_STATEMENT:
        setElseStatement((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CPHLCLPackage.CONTROL__COND:
        setCond((BoolExpression)null);
        return;
      case CPHLCLPackage.CONTROL__TRUE_STATEMENT:
        setTrueStatement((Expression)null);
        return;
      case CPHLCLPackage.CONTROL__ELSE_STATEMENT:
        setElseStatement((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CPHLCLPackage.CONTROL__COND:
        return cond != null;
      case CPHLCLPackage.CONTROL__TRUE_STATEMENT:
        return trueStatement != null;
      case CPHLCLPackage.CONTROL__ELSE_STATEMENT:
        return elseStatement != null;
    }
    return super.eIsSet(featureID);
  }

} //ControlImpl
