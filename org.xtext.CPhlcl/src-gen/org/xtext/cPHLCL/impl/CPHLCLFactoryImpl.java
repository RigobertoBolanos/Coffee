/**
 * generated by Xtext 2.12.0
 */
package org.xtext.cPHLCL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.cPHLCL.And;
import org.xtext.cPHLCL.BoolConstant;
import org.xtext.cPHLCL.BoolVal;
import org.xtext.cPHLCL.CPHLCLFactory;
import org.xtext.cPHLCL.CPHLCLPackage;
import org.xtext.cPHLCL.Comparison;
import org.xtext.cPHLCL.Constraint;
import org.xtext.cPHLCL.DomainDeclaration;
import org.xtext.cPHLCL.Enumeration;
import org.xtext.cPHLCL.Equality;
import org.xtext.cPHLCL.Expression;
import org.xtext.cPHLCL.Function;
import org.xtext.cPHLCL.Global;
import org.xtext.cPHLCL.Iff;
import org.xtext.cPHLCL.Implies;
import org.xtext.cPHLCL.IntConstant;
import org.xtext.cPHLCL.Interval;
import org.xtext.cPHLCL.ListOfIDs;
import org.xtext.cPHLCL.ListOfListValues;
import org.xtext.cPHLCL.ListOfValues;
import org.xtext.cPHLCL.Minus;
import org.xtext.cPHLCL.Model;
import org.xtext.cPHLCL.MulOrDiv;
import org.xtext.cPHLCL.Negation;
import org.xtext.cPHLCL.NonEnumerableValue;
import org.xtext.cPHLCL.Or;
import org.xtext.cPHLCL.Plus;
import org.xtext.cPHLCL.Relational;
import org.xtext.cPHLCL.Symbol;
import org.xtext.cPHLCL.Unary;
import org.xtext.cPHLCL.Value;
import org.xtext.cPHLCL.Variable;
import org.xtext.cPHLCL.VariableRef;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CPHLCLFactoryImpl extends EFactoryImpl implements CPHLCLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CPHLCLFactory init()
  {
    try
    {
      CPHLCLFactory theCPHLCLFactory = (CPHLCLFactory)EPackage.Registry.INSTANCE.getEFactory(CPHLCLPackage.eNS_URI);
      if (theCPHLCLFactory != null)
      {
        return theCPHLCLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CPHLCLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CPHLCLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CPHLCLPackage.MODEL: return createModel();
      case CPHLCLPackage.VARIABLE: return createVariable();
      case CPHLCLPackage.DOMAIN_DECLARATION: return createDomainDeclaration();
      case CPHLCLPackage.INTERVAL: return createInterval();
      case CPHLCLPackage.ENUMERATION: return createEnumeration();
      case CPHLCLPackage.CONSTRAINT: return createConstraint();
      case CPHLCLPackage.EXPRESSION: return createExpression();
      case CPHLCLPackage.RELATIONAL: return createRelational();
      case CPHLCLPackage.GLOBAL: return createGlobal();
      case CPHLCLPackage.BOOL_VAL: return createBoolVal();
      case CPHLCLPackage.NUMBER: return createNumber();
      case CPHLCLPackage.SYMBOL: return createSymbol();
      case CPHLCLPackage.VALUE: return createValue();
      case CPHLCLPackage.NON_ENUMERABLE_VALUE: return createNonEnumerableValue();
      case CPHLCLPackage.LIST_OF_VALUES: return createListOfValues();
      case CPHLCLPackage.LIST_OF_LIST_VALUES: return createListOfListValues();
      case CPHLCLPackage.LIST_OF_IDS: return createListOfIDs();
      case CPHLCLPackage.IFF: return createIff();
      case CPHLCLPackage.IMPLIES: return createImplies();
      case CPHLCLPackage.OR: return createOr();
      case CPHLCLPackage.AND: return createAnd();
      case CPHLCLPackage.EQUALITY: return createEquality();
      case CPHLCLPackage.COMPARISON: return createComparison();
      case CPHLCLPackage.PLUS: return createPlus();
      case CPHLCLPackage.MINUS: return createMinus();
      case CPHLCLPackage.MUL_OR_DIV: return createMulOrDiv();
      case CPHLCLPackage.NEGATION: return createNegation();
      case CPHLCLPackage.UNARY: return createUnary();
      case CPHLCLPackage.FUNCTION: return createFunction();
      case CPHLCLPackage.BOOL_CONSTANT: return createBoolConstant();
      case CPHLCLPackage.VARIABLE_REF: return createVariableRef();
      case CPHLCLPackage.INT_CONSTANT: return createIntConstant();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainDeclaration createDomainDeclaration()
  {
    DomainDeclarationImpl domainDeclaration = new DomainDeclarationImpl();
    return domainDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Interval createInterval()
  {
    IntervalImpl interval = new IntervalImpl();
    return interval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Enumeration createEnumeration()
  {
    EnumerationImpl enumeration = new EnumerationImpl();
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relational createRelational()
  {
    RelationalImpl relational = new RelationalImpl();
    return relational;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Global createGlobal()
  {
    GlobalImpl global = new GlobalImpl();
    return global;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolVal createBoolVal()
  {
    BoolValImpl boolVal = new BoolValImpl();
    return boolVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.xtext.cPHLCL.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Symbol createSymbol()
  {
    SymbolImpl symbol = new SymbolImpl();
    return symbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NonEnumerableValue createNonEnumerableValue()
  {
    NonEnumerableValueImpl nonEnumerableValue = new NonEnumerableValueImpl();
    return nonEnumerableValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListOfValues createListOfValues()
  {
    ListOfValuesImpl listOfValues = new ListOfValuesImpl();
    return listOfValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListOfListValues createListOfListValues()
  {
    ListOfListValuesImpl listOfListValues = new ListOfListValuesImpl();
    return listOfListValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListOfIDs createListOfIDs()
  {
    ListOfIDsImpl listOfIDs = new ListOfIDsImpl();
    return listOfIDs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Iff createIff()
  {
    IffImpl iff = new IffImpl();
    return iff;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Implies createImplies()
  {
    ImpliesImpl implies = new ImpliesImpl();
    return implies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Equality createEquality()
  {
    EqualityImpl equality = new EqualityImpl();
    return equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comparison createComparison()
  {
    ComparisonImpl comparison = new ComparisonImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MulOrDiv createMulOrDiv()
  {
    MulOrDivImpl mulOrDiv = new MulOrDivImpl();
    return mulOrDiv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Negation createNegation()
  {
    NegationImpl negation = new NegationImpl();
    return negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Unary createUnary()
  {
    UnaryImpl unary = new UnaryImpl();
    return unary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolConstant createBoolConstant()
  {
    BoolConstantImpl boolConstant = new BoolConstantImpl();
    return boolConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableRef createVariableRef()
  {
    VariableRefImpl variableRef = new VariableRefImpl();
    return variableRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntConstant createIntConstant()
  {
    IntConstantImpl intConstant = new IntConstantImpl();
    return intConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CPHLCLPackage getCPHLCLPackage()
  {
    return (CPHLCLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CPHLCLPackage getPackage()
  {
    return CPHLCLPackage.eINSTANCE;
  }

} //CPHLCLFactoryImpl
