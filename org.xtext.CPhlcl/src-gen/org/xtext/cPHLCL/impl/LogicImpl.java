/**
 * generated by Xtext 2.12.0
 */
package org.xtext.cPHLCL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.cPHLCL.BoolExpression;
import org.xtext.cPHLCL.CPHLCLPackage;
import org.xtext.cPHLCL.Logic;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Logic</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.cPHLCL.impl.LogicImpl#getLogicLeft <em>Logic Left</em>}</li>
 *   <li>{@link org.xtext.cPHLCL.impl.LogicImpl#getLogicOp <em>Logic Op</em>}</li>
 *   <li>{@link org.xtext.cPHLCL.impl.LogicImpl#getLogicRight <em>Logic Right</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LogicImpl extends ExpressionImpl implements Logic
{
  /**
   * The cached value of the '{@link #getLogicLeft() <em>Logic Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicLeft()
   * @generated
   * @ordered
   */
  protected BoolExpression logicLeft;

  /**
   * The default value of the '{@link #getLogicOp() <em>Logic Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicOp()
   * @generated
   * @ordered
   */
  protected static final String LOGIC_OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLogicOp() <em>Logic Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicOp()
   * @generated
   * @ordered
   */
  protected String logicOp = LOGIC_OP_EDEFAULT;

  /**
   * The cached value of the '{@link #getLogicRight() <em>Logic Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicRight()
   * @generated
   * @ordered
   */
  protected BoolExpression logicRight;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LogicImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CPHLCLPackage.Literals.LOGIC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolExpression getLogicLeft()
  {
    return logicLeft;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLogicLeft(BoolExpression newLogicLeft, NotificationChain msgs)
  {
    BoolExpression oldLogicLeft = logicLeft;
    logicLeft = newLogicLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPHLCLPackage.LOGIC__LOGIC_LEFT, oldLogicLeft, newLogicLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLogicLeft(BoolExpression newLogicLeft)
  {
    if (newLogicLeft != logicLeft)
    {
      NotificationChain msgs = null;
      if (logicLeft != null)
        msgs = ((InternalEObject)logicLeft).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.LOGIC__LOGIC_LEFT, null, msgs);
      if (newLogicLeft != null)
        msgs = ((InternalEObject)newLogicLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.LOGIC__LOGIC_LEFT, null, msgs);
      msgs = basicSetLogicLeft(newLogicLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPHLCLPackage.LOGIC__LOGIC_LEFT, newLogicLeft, newLogicLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLogicOp()
  {
    return logicOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLogicOp(String newLogicOp)
  {
    String oldLogicOp = logicOp;
    logicOp = newLogicOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPHLCLPackage.LOGIC__LOGIC_OP, oldLogicOp, logicOp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolExpression getLogicRight()
  {
    return logicRight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLogicRight(BoolExpression newLogicRight, NotificationChain msgs)
  {
    BoolExpression oldLogicRight = logicRight;
    logicRight = newLogicRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPHLCLPackage.LOGIC__LOGIC_RIGHT, oldLogicRight, newLogicRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLogicRight(BoolExpression newLogicRight)
  {
    if (newLogicRight != logicRight)
    {
      NotificationChain msgs = null;
      if (logicRight != null)
        msgs = ((InternalEObject)logicRight).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.LOGIC__LOGIC_RIGHT, null, msgs);
      if (newLogicRight != null)
        msgs = ((InternalEObject)newLogicRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPHLCLPackage.LOGIC__LOGIC_RIGHT, null, msgs);
      msgs = basicSetLogicRight(newLogicRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPHLCLPackage.LOGIC__LOGIC_RIGHT, newLogicRight, newLogicRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CPHLCLPackage.LOGIC__LOGIC_LEFT:
        return basicSetLogicLeft(null, msgs);
      case CPHLCLPackage.LOGIC__LOGIC_RIGHT:
        return basicSetLogicRight(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CPHLCLPackage.LOGIC__LOGIC_LEFT:
        return getLogicLeft();
      case CPHLCLPackage.LOGIC__LOGIC_OP:
        return getLogicOp();
      case CPHLCLPackage.LOGIC__LOGIC_RIGHT:
        return getLogicRight();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CPHLCLPackage.LOGIC__LOGIC_LEFT:
        setLogicLeft((BoolExpression)newValue);
        return;
      case CPHLCLPackage.LOGIC__LOGIC_OP:
        setLogicOp((String)newValue);
        return;
      case CPHLCLPackage.LOGIC__LOGIC_RIGHT:
        setLogicRight((BoolExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CPHLCLPackage.LOGIC__LOGIC_LEFT:
        setLogicLeft((BoolExpression)null);
        return;
      case CPHLCLPackage.LOGIC__LOGIC_OP:
        setLogicOp(LOGIC_OP_EDEFAULT);
        return;
      case CPHLCLPackage.LOGIC__LOGIC_RIGHT:
        setLogicRight((BoolExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CPHLCLPackage.LOGIC__LOGIC_LEFT:
        return logicLeft != null;
      case CPHLCLPackage.LOGIC__LOGIC_OP:
        return LOGIC_OP_EDEFAULT == null ? logicOp != null : !LOGIC_OP_EDEFAULT.equals(logicOp);
      case CPHLCLPackage.LOGIC__LOGIC_RIGHT:
        return logicRight != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (logicOp: ");
    result.append(logicOp);
    result.append(')');
    return result.toString();
  }

} //LogicImpl
