/*
 * generated by Xtext 2.12.0
 */
grammar InternalCPHLCL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.CPHLCLGrammarAccess;

}

@parser::members {

 	private CPHLCLGrammarAccess grammarAccess;

    public InternalCPHLCLParser(TokenStream input, CPHLCLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected CPHLCLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='model'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='variables:'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelAccess().getVariablesKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getVarsVarDeclarationParserRuleCall_3_0());
				}
				lv_vars_3_0=ruleVarDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"vars",
						lv_vars_3_0,
						"org.xtext.CPHLCL.VarDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='constraints:'
		{
			newLeafNode(otherlv_4, grammarAccess.getModelAccess().getConstraintsKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getConstraintsConstraintParserRuleCall_5_0());
				}
				lv_constraints_5_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_5_0,
						"org.xtext.CPHLCL.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6='strategy:'
		{
			newLeafNode(otherlv_6, grammarAccess.getModelAccess().getStrategyKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getStrategyStrategyParserRuleCall_7_0());
				}
				lv_strategy_7_0=ruleStrategy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"strategy",
						lv_strategy_7_0,
						"org.xtext.CPHLCL.Strategy");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAccess().getTypeVarTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleVarType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.CPHLCL.VarType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='domain:'
		{
			newLeafNode(otherlv_2, grammarAccess.getVarDeclarationAccess().getDomainKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAccess().getDomainDomainDeclarationParserRuleCall_3_0());
				}
				lv_domain_3_0=ruleDomainDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
					}
					set(
						$current,
						"domain",
						lv_domain_3_0,
						"org.xtext.CPHLCL.DomainDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDomainDeclaration
entryRuleDomainDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainDeclarationRule()); }
	iv_ruleDomainDeclaration=ruleDomainDeclaration
	{ $current=$iv_ruleDomainDeclaration.current; }
	EOF;

// Rule DomainDeclaration
ruleDomainDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDomainDeclarationAccess().getIntervalParserRuleCall_0());
		}
		this_Interval_0=ruleInterval
		{
			$current = $this_Interval_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDomainDeclarationAccess().getEnumerationParserRuleCall_1());
		}
		this_Enumeration_1=ruleEnumeration
		{
			$current = $this_Enumeration_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInterval
entryRuleInterval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntervalRule()); }
	iv_ruleInterval=ruleInterval
	{ $current=$iv_ruleInterval.current; }
	EOF;

// Rule Interval
ruleInterval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIntervalAccess().getStartEnumerableValueParserRuleCall_0_0());
				}
				lv_start_0_0=ruleEnumerableValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntervalRule());
					}
					set(
						$current,
						"start",
						lv_start_0_0,
						"org.xtext.CPHLCL.EnumerableValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='..'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntervalAccess().getFullStopFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntervalAccess().getEndEnumerableValueParserRuleCall_2_0());
				}
				lv_end_2_0=ruleEnumerableValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntervalRule());
					}
					set(
						$current,
						"end",
						lv_end_2_0,
						"org.xtext.CPHLCL.EnumerableValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationRule()); }
	iv_ruleEnumeration=ruleEnumeration
	{ $current=$iv_ruleEnumeration.current; }
	EOF;

// Rule Enumeration
ruleEnumeration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumerationAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationAccess().getListListOfValuesParserRuleCall_1_0());
				}
				lv_list_1_0=ruleListOfValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationRule());
					}
					set(
						$current,
						"list",
						lv_list_1_0,
						"org.xtext.CPHLCL.ListOfValues");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getEnumerationAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getConstraintAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getExpExpressionParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"org.xtext.CPHLCL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getGlobalParserRuleCall_0());
		}
		this_Global_0=ruleGlobal
		{
			$current = $this_Global_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			((
				ruleBoolTerm
			)
			)=>
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getLogicParserRuleCall_1());
			}
			this_Logic_1=ruleLogic
			{
				$current = $this_Logic_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			((
				ruleNumericTerm
			)
			)=>
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getRelationalParserRuleCall_2());
			}
			this_Relational_2=ruleRelational
			{
				$current = $this_Relational_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getControlParserRuleCall_3());
		}
		this_Control_3=ruleControl
		{
			$current = $this_Control_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolTerm
entryRuleBoolTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolTermRule()); }
	iv_ruleBoolTerm=ruleBoolTerm
	{ $current=$iv_ruleBoolTerm.current; }
	EOF;

// Rule BoolTerm
ruleBoolTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getBoolTermAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getBoolTermAccess().getComplexTermParserRuleCall_0_1());
			}
			this_ComplexTerm_1=ruleComplexTerm
			{
				$current = $this_ComplexTerm_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getBoolTermAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getBoolTermAccess().getBoolVarParserRuleCall_1());
		}
		this_BoolVar_3=ruleBoolVar
		{
			$current = $this_BoolVar_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleComplexTerm
entryRuleComplexTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexTermRule()); }
	iv_ruleComplexTerm=ruleComplexTerm
	{ $current=$iv_ruleComplexTerm.current; }
	EOF;

// Rule ComplexTerm
ruleComplexTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleBoolTerm
			)
			)=>
			{
				newCompositeNode(grammarAccess.getComplexTermAccess().getLogicParserRuleCall_0());
			}
			this_Logic_0=ruleLogic
			{
				$current = $this_Logic_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			((
				ruleNumericTerm
			)
			)=>
			{
				newCompositeNode(grammarAccess.getComplexTermAccess().getRelationalParserRuleCall_1());
			}
			this_Relational_1=ruleRelational
			{
				$current = $this_Relational_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getComplexTermAccess().getLogicUnParserRuleCall_2());
		}
		this_LogicUn_2=ruleLogicUn
		{
			$current = $this_LogicUn_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLogic
entryRuleLogic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicRule()); }
	iv_ruleLogic=ruleLogic
	{ $current=$iv_ruleLogic.current; }
	EOF;

// Rule Logic
ruleLogic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleBoolTerm
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getLogicAccess().getLogicLeftBoolTermParserRuleCall_0_0());
				}
				lv_logicLeft_0_0=ruleBoolTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicRule());
					}
					set(
						$current,
						"logicLeft",
						lv_logicLeft_0_0,
						"org.xtext.CPHLCL.BoolTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicAccess().getLogicOpLogicOpBinParserRuleCall_1_0());
				}
				lv_logicOp_1_0=ruleLogicOpBin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicRule());
					}
					set(
						$current,
						"logicOp",
						lv_logicOp_1_0,
						"org.xtext.CPHLCL.LogicOpBin");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			((
				ruleBoolTerm
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getLogicAccess().getLogicRightBoolTermParserRuleCall_2_0());
				}
				lv_logicRight_2_0=ruleBoolTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicRule());
					}
					set(
						$current,
						"logicRight",
						lv_logicRight_2_0,
						"org.xtext.CPHLCL.BoolTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLogicUn
entryRuleLogicUn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicUnRule()); }
	iv_ruleLogicUn=ruleLogicUn
	{ $current=$iv_ruleLogicUn.current; }
	EOF;

// Rule LogicUn
ruleLogicUn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicUnAccess().getLogicOpLogicOpUnParserRuleCall_0_0());
				}
				lv_logicOp_0_0=ruleLogicOpUn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicUnRule());
					}
					set(
						$current,
						"logicOp",
						lv_logicOp_0_0,
						"org.xtext.CPHLCL.LogicOpUn");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLogicUnAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicUnAccess().getExpBoolTermParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleBoolTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicUnRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"org.xtext.CPHLCL.BoolTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getLogicUnAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleRelational
entryRuleRelational returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalRule()); }
	iv_ruleRelational=ruleRelational
	{ $current=$iv_ruleRelational.current; }
	EOF;

// Rule Relational
ruleRelational returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleNumericTerm
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getRelationalAccess().getRelationalLeftNumericTermParserRuleCall_0_0());
				}
				lv_relationalLeft_0_0=ruleNumericTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalRule());
					}
					set(
						$current,
						"relationalLeft",
						lv_relationalLeft_0_0,
						"org.xtext.CPHLCL.NumericTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalAccess().getRelationalOpRelationalOpParserRuleCall_1_0());
				}
				lv_relationalOp_1_0=ruleRelationalOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalRule());
					}
					set(
						$current,
						"relationalOp",
						lv_relationalOp_1_0,
						"org.xtext.CPHLCL.RelationalOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			((
				ruleNumericTerm
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getRelationalAccess().getRelationalRightNumericTermParserRuleCall_2_0());
				}
				lv_relationalRight_2_0=ruleNumericTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalRule());
					}
					set(
						$current,
						"relationalRight",
						lv_relationalRight_2_0,
						"org.xtext.CPHLCL.NumericTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNumericTerm
entryRuleNumericTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericTermRule()); }
	iv_ruleNumericTerm=ruleNumericTerm
	{ $current=$iv_ruleNumericTerm.current; }
	EOF;

// Rule NumericTerm
ruleNumericTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getNumericTermAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getNumericTermAccess().getArithmeticParserRuleCall_0_1());
			}
			this_Arithmetic_1=ruleArithmetic
			{
				$current = $this_Arithmetic_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getNumericTermAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getNumericTermAccess().getNumberParserRuleCall_1());
		}
		this_Number_3=ruleNumber
		{
			$current = $this_Number_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericTermAccess().getIntVarParserRuleCall_2());
		}
		this_IntVar_4=ruleIntVar
		{
			$current = $this_IntVar_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArithmetic
entryRuleArithmetic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticRule()); }
	iv_ruleArithmetic=ruleArithmetic
	{ $current=$iv_ruleArithmetic.current; }
	EOF;

// Rule Arithmetic
ruleArithmetic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArithmeticAccess().getLeftNumericTermParserRuleCall_0_0());
				}
				lv_left_0_0=ruleNumericTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithmeticRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"org.xtext.CPHLCL.NumericTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArithmeticAccess().getArithOperatorArithmeticOpParserRuleCall_1_0());
				}
				lv_arithOperator_1_0=ruleArithmeticOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithmeticRule());
					}
					set(
						$current,
						"arithOperator",
						lv_arithOperator_1_0,
						"org.xtext.CPHLCL.ArithmeticOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArithmeticAccess().getRightNumericTermParserRuleCall_2_0());
				}
				lv_right_2_0=ruleNumericTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithmeticRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"org.xtext.CPHLCL.NumericTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGlobal
entryRuleGlobal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGlobalRule()); }
	iv_ruleGlobal=ruleGlobal
	{ $current=$iv_ruleGlobal.current; }
	EOF;

// Rule Global
ruleGlobal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGlobalAccess().getOpGlobalOpParserRuleCall_0_0());
				}
				lv_op_0_0=ruleGlobalOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGlobalRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"org.xtext.CPHLCL.GlobalOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getGlobalAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGlobalAccess().getVarsListOfIDsParserRuleCall_2_0());
				}
				lv_vars_2_0=ruleListOfIDs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGlobalRule());
					}
					set(
						$current,
						"vars",
						lv_vars_2_0,
						"org.xtext.CPHLCL.ListOfIDs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getGlobalAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleControl
entryRuleControl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getControlRule()); }
	iv_ruleControl=ruleControl
	{ $current=$iv_ruleControl.current; }
	EOF;

// Rule Control
ruleControl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getControlAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getControlAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getControlAccess().getCondBoolTermParserRuleCall_2_0());
				}
				lv_cond_2_0=ruleBoolTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getControlRule());
					}
					set(
						$current,
						"cond",
						lv_cond_2_0,
						"org.xtext.CPHLCL.BoolTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getControlAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='then'
		{
			newLeafNode(otherlv_4, grammarAccess.getControlAccess().getThenKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getControlAccess().getTrueStatementExpressionParserRuleCall_5_0());
				}
				lv_trueStatement_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getControlRule());
					}
					set(
						$current,
						"trueStatement",
						lv_trueStatement_5_0,
						"org.xtext.CPHLCL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='else'
		{
			newLeafNode(otherlv_6, grammarAccess.getControlAccess().getElseKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getControlAccess().getElseStatementExpressionParserRuleCall_7_0());
				}
				lv_elseStatement_7_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getControlRule());
					}
					set(
						$current,
						"elseStatement",
						lv_elseStatement_7_0,
						"org.xtext.CPHLCL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='end_if'
		{
			newLeafNode(otherlv_8, grammarAccess.getControlAccess().getEnd_ifKeyword_8());
		}
	)
;

// Entry rule entryRuleStrategy
entryRuleStrategy returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStrategyRule()); }
	iv_ruleStrategy=ruleStrategy
	{ $current=$iv_ruleStrategy.current.getText(); }
	EOF;

// Rule Strategy
ruleStrategy returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='one'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStrategyAccess().getOneKeyword_0());
		}
		    |
		kw='two'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStrategyAccess().getTwoKeyword_1());
		}
	)
;

// Entry rule entryRuleBoolVal
entryRuleBoolVal returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBoolValRule()); }
	iv_ruleBoolVal=ruleBoolVal
	{ $current=$iv_ruleBoolVal.current.getText(); }
	EOF;

// Rule BoolVal
ruleBoolVal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolValAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolValAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleBoolVar
entryRuleBoolVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolVarRule()); }
	iv_ruleBoolVar=ruleBoolVar
	{ $current=$iv_ruleBoolVar.current; }
	EOF;

// Rule BoolVar
ruleBoolVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_id_0_0=RULE_ID
			{
				newLeafNode(lv_id_0_0, grammarAccess.getBoolVarAccess().getIdIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBoolVarRule());
				}
				setWithLastConsumed(
					$current,
					"id",
					lv_id_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current; }
	EOF;

// Rule Number
ruleNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_num_0_0=RULE_INT
			{
				newLeafNode(lv_num_0_0, grammarAccess.getNumberAccess().getNumINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumberRule());
				}
				setWithLastConsumed(
					$current,
					"num",
					lv_num_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleIntVar
entryRuleIntVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntVarRule()); }
	iv_ruleIntVar=ruleIntVar
	{ $current=$iv_ruleIntVar.current; }
	EOF;

// Rule IntVar
ruleIntVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_id_0_0=RULE_ID
			{
				newLeafNode(lv_id_0_0, grammarAccess.getIntVarAccess().getIdIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntVarRule());
				}
				setWithLastConsumed(
					$current,
					"id",
					lv_id_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleLogicOpBin
entryRuleLogicOpBin returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogicOpBinRule()); }
	iv_ruleLogicOpBin=ruleLogicOpBin
	{ $current=$iv_ruleLogicOpBin.current.getText(); }
	EOF;

// Rule LogicOpBin
ruleLogicOpBin returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='AND'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicOpBinAccess().getANDKeyword_0());
		}
		    |
		kw='OR'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicOpBinAccess().getORKeyword_1());
		}
		    |
		kw='XOR'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicOpBinAccess().getXORKeyword_2());
		}
		    |
		kw='=>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicOpBinAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		    |
		kw='<=>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicOpBinAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_4());
		}
	)
;

// Entry rule entryRuleLogicOpUn
entryRuleLogicOpUn returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogicOpUnRule()); }
	iv_ruleLogicOpUn=ruleLogicOpUn
	{ $current=$iv_ruleLogicOpUn.current.getText(); }
	EOF;

// Rule LogicOpUn
ruleLogicOpUn returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='NOT'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLogicOpUnAccess().getNOTKeyword());
	}
;

// Entry rule entryRuleRelationalOp
entryRuleRelationalOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); }
	iv_ruleRelationalOp=ruleRelationalOp
	{ $current=$iv_ruleRelationalOp.current.getText(); }
	EOF;

// Rule RelationalOp
ruleRelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_0());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_1());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_2());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_3());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getEqualsSignKeyword_4());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getExclamationMarkEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleGlobalOp
entryRuleGlobalOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGlobalOpRule()); }
	iv_ruleGlobalOp=ruleGlobalOp
	{ $current=$iv_ruleGlobalOp.current.getText(); }
	EOF;

// Rule GlobalOp
ruleGlobalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='at_most'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGlobalOpAccess().getAt_mostKeyword_0());
		}
		    |
		kw='all_different'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGlobalOpAccess().getAll_differentKeyword_1());
		}
	)
;

// Entry rule entryRuleArithmeticOp
entryRuleArithmeticOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticOpRule()); }
	iv_ruleArithmeticOp=ruleArithmeticOp
	{ $current=$iv_ruleArithmeticOp.current.getText(); }
	EOF;

// Rule ArithmeticOp
ruleArithmeticOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOpAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOpAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOpAccess().getAsteriskKeyword_2());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOpAccess().getSolidusKeyword_3());
		}
		    |
		kw='mod'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOpAccess().getModKeyword_4());
		}
		    |
		kw='pow'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOpAccess().getPowKeyword_5());
		}
		    |
		kw='dist'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOpAccess().getDistKeyword_6());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current.getText(); }
	EOF;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueAccess().getEnumerableValueParserRuleCall_0());
		}
		this_EnumerableValue_0=ruleEnumerableValue
		{
			$current.merge(this_EnumerableValue_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getNonEnumerableValueParserRuleCall_1());
		}
		this_NonEnumerableValue_1=ruleNonEnumerableValue
		{
			$current.merge(this_NonEnumerableValue_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEnumerableValue
entryRuleEnumerableValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEnumerableValueRule()); }
	iv_ruleEnumerableValue=ruleEnumerableValue
	{ $current=$iv_ruleEnumerableValue.current.getText(); }
	EOF;

// Rule EnumerableValue
ruleEnumerableValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getEnumerableValueAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleNonEnumerableValue
entryRuleNonEnumerableValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNonEnumerableValueRule()); }
	iv_ruleNonEnumerableValue=ruleNonEnumerableValue
	{ $current=$iv_ruleNonEnumerableValue.current.getText(); }
	EOF;

// Rule NonEnumerableValue
ruleNonEnumerableValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNonEnumerableValueAccess().getBoolValParserRuleCall_0());
		}
		this_BoolVal_0=ruleBoolVal
		{
			$current.merge(this_BoolVal_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getNonEnumerableValueAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleVarType
entryRuleVarType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarTypeRule()); }
	iv_ruleVarType=ruleVarType
	{ $current=$iv_ruleVarType.current.getText(); }
	EOF;

// Rule VarType
ruleVarType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='bool'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeAccess().getBoolKeyword_0());
		}
		    |
		kw='integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeAccess().getIntegerKeyword_1());
		}
		    |
		kw='symbolic'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeAccess().getSymbolicKeyword_2());
		}
	)
;

// Entry rule entryRuleListOfValues
entryRuleListOfValues returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListOfValuesRule()); }
	iv_ruleListOfValues=ruleListOfValues
	{ $current=$iv_ruleListOfValues.current; }
	EOF;

// Rule ListOfValues
ruleListOfValues returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getListOfValuesAccess().getValuesValueParserRuleCall_0_0());
				}
				lv_values_0_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListOfValuesRule());
					}
					add(
						$current,
						"values",
						lv_values_0_0,
						"org.xtext.CPHLCL.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1=','
				{
					newLeafNode(otherlv_1, grammarAccess.getListOfValuesAccess().getCommaKeyword_1_0());
				}
			)+
			(
				(
					{
						newCompositeNode(grammarAccess.getListOfValuesAccess().getValuesValueParserRuleCall_1_1_0());
					}
					lv_values_2_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListOfValuesRule());
						}
						add(
							$current,
							"values",
							lv_values_2_0,
							"org.xtext.CPHLCL.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleListOfIDs
entryRuleListOfIDs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListOfIDsRule()); }
	iv_ruleListOfIDs=ruleListOfIDs
	{ $current=$iv_ruleListOfIDs.current; }
	EOF;

// Rule ListOfIDs
ruleListOfIDs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_ids_0_0=RULE_ID
			{
				newLeafNode(lv_ids_0_0, grammarAccess.getListOfIDsAccess().getIdsIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getListOfIDsRule());
				}
				addWithLastConsumed(
					$current,
					"ids",
					lv_ids_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)+
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
