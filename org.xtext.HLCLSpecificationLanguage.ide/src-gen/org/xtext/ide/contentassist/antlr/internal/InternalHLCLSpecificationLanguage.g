/*
 * generated by Xtext 2.12.0
 */
grammar InternalHLCLSpecificationLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.HLCLSpecificationLanguageGrammarAccess;

}
@parser::members {
	private HLCLSpecificationLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(HLCLSpecificationLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
		(rule__VarDeclaration__Group__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModifier
entryRuleModifier
:
{ before(grammarAccess.getModifierRule()); }
	 ruleModifier
{ after(grammarAccess.getModifierRule()); } 
	 EOF 
;

// Rule Modifier
ruleModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModifierAccess().getUnorderedGroup()); }
		(rule__Modifier__UnorderedGroup)
		{ after(grammarAccess.getModifierAccess().getUnorderedGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariantDeclaration
entryRuleVariantDeclaration
:
{ before(grammarAccess.getVariantDeclarationRule()); }
	 ruleVariantDeclaration
{ after(grammarAccess.getVariantDeclarationRule()); } 
	 EOF 
;

// Rule VariantDeclaration
ruleVariantDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariantDeclarationAccess().getAlternatives()); }
		(rule__VariantDeclaration__Alternatives)
		{ after(grammarAccess.getVariantDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevariantsInterval
entryRulevariantsInterval
:
{ before(grammarAccess.getVariantsIntervalRule()); }
	 rulevariantsInterval
{ after(grammarAccess.getVariantsIntervalRule()); } 
	 EOF 
;

// Rule variantsInterval
rulevariantsInterval 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariantsIntervalAccess().getGroup()); }
		(rule__VariantsInterval__Group__0)
		{ after(grammarAccess.getVariantsIntervalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevariantsEnumeration
entryRulevariantsEnumeration
:
{ before(grammarAccess.getVariantsEnumerationRule()); }
	 rulevariantsEnumeration
{ after(grammarAccess.getVariantsEnumerationRule()); } 
	 EOF 
;

// Rule variantsEnumeration
rulevariantsEnumeration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariantsEnumerationAccess().getGroup()); }
		(rule__VariantsEnumeration__Group__0)
		{ after(grammarAccess.getVariantsEnumerationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumeration
entryRuleEnumeration
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerationAccess().getAlternatives()); }
		(rule__Enumeration__Alternatives)
		{ after(grammarAccess.getEnumerationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup()); }
		(rule__Constraint__Group__0)
		{ after(grammarAccess.getConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConsExpression
entryRuleConsExpression
:
{ before(grammarAccess.getConsExpressionRule()); }
	 ruleConsExpression
{ after(grammarAccess.getConsExpressionRule()); } 
	 EOF 
;

// Rule ConsExpression
ruleConsExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConsExpressionAccess().getAlternatives()); }
		(rule__ConsExpression__Alternatives)
		{ after(grammarAccess.getConsExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerminalExp
entryRuleTerminalExp
:
{ before(grammarAccess.getTerminalExpRule()); }
	 ruleTerminalExp
{ after(grammarAccess.getTerminalExpRule()); } 
	 EOF 
;

// Rule TerminalExp
ruleTerminalExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminalExpAccess().getAlternatives()); }
		(rule__TerminalExp__Alternatives)
		{ after(grammarAccess.getTerminalExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIDCons
entryRuleIDCons
:
{ before(grammarAccess.getIDConsRule()); }
	 ruleIDCons
{ after(grammarAccess.getIDConsRule()); } 
	 EOF 
;

// Rule IDCons
ruleIDCons 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIDConsAccess().getNameAssignment()); }
		(rule__IDCons__NameAssignment)
		{ after(grammarAccess.getIDConsAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRefinement
entryRuleRefinement
:
{ before(grammarAccess.getRefinementRule()); }
	 ruleRefinement
{ after(grammarAccess.getRefinementRule()); } 
	 EOF 
;

// Rule Refinement
ruleRefinement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRefinementAccess().getAlternatives()); }
		(rule__Refinement__Alternatives)
		{ after(grammarAccess.getRefinementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarRefinement
entryRuleVarRefinement
:
{ before(grammarAccess.getVarRefinementRule()); }
	 ruleVarRefinement
{ after(grammarAccess.getVarRefinementRule()); } 
	 EOF 
;

// Rule VarRefinement
ruleVarRefinement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarRefinementAccess().getGroup()); }
		(rule__VarRefinement__Group__0)
		{ after(grammarAccess.getVarRefinementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetRefinement
entryRuleSetRefinement
:
{ before(grammarAccess.getSetRefinementRule()); }
	 ruleSetRefinement
{ after(grammarAccess.getSetRefinementRule()); } 
	 EOF 
;

// Rule SetRefinement
ruleSetRefinement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetRefinementAccess().getGroup()); }
		(rule__SetRefinement__Group__0)
		{ after(grammarAccess.getSetRefinementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSPLNotation
entryRuleSPLNotation
:
{ before(grammarAccess.getSPLNotationRule()); }
	 ruleSPLNotation
{ after(grammarAccess.getSPLNotationRule()); } 
	 EOF 
;

// Rule SPLNotation
ruleSPLNotation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSPLNotationAccess().getGroup()); }
		(rule__SPLNotation__Group__0)
		{ after(grammarAccess.getSPLNotationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarType
entryRuleVarType
:
{ before(grammarAccess.getVarTypeRule()); }
	 ruleVarType
{ after(grammarAccess.getVarTypeRule()); } 
	 EOF 
;

// Rule VarType
ruleVarType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarTypeAccess().getAlternatives()); }
		(rule__VarType__Alternatives)
		{ after(grammarAccess.getVarTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOfValues
entryRuleListOfValues
:
{ before(grammarAccess.getListOfValuesRule()); }
	 ruleListOfValues
{ after(grammarAccess.getListOfValuesRule()); } 
	 EOF 
;

// Rule ListOfValues
ruleListOfValues 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListOfValuesAccess().getGroup()); }
		(rule__ListOfValues__Group__0)
		{ after(grammarAccess.getListOfValuesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOfIDs
entryRuleListOfIDs
:
{ before(grammarAccess.getListOfIDsRule()); }
	 ruleListOfIDs
{ after(grammarAccess.getListOfIDsRule()); } 
	 EOF 
;

// Rule ListOfIDs
ruleListOfIDs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListOfIDsAccess().getGroup()); }
		(rule__ListOfIDs__Group__0)
		{ after(grammarAccess.getListOfIDsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSPLop
entryRuleSPLop
:
{ before(grammarAccess.getSPLopRule()); }
	 ruleSPLop
{ after(grammarAccess.getSPLopRule()); } 
	 EOF 
;

// Rule SPLop
ruleSPLop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSPLopAccess().getAlternatives()); }
		(rule__SPLop__Alternatives)
		{ after(grammarAccess.getSPLopAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantDeclaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariantDeclarationAccess().getVariantsIntervalParserRuleCall_0()); }
		rulevariantsInterval
		{ after(grammarAccess.getVariantDeclarationAccess().getVariantsIntervalParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariantDeclarationAccess().getVariantsEnumerationParserRuleCall_1()); }
		rulevariantsEnumeration
		{ after(grammarAccess.getVariantDeclarationAccess().getVariantsEnumerationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getListOfValuesParserRuleCall_0()); }
		ruleListOfValues
		{ after(grammarAccess.getEnumerationAccess().getListOfValuesParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEnumerationAccess().getListOfIDsParserRuleCall_1()); }
		ruleListOfIDs
		{ after(grammarAccess.getEnumerationAccess().getListOfIDsParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConsExpressionAccess().getIDConsParserRuleCall_0()); }
		ruleIDCons
		{ after(grammarAccess.getConsExpressionAccess().getIDConsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConsExpressionAccess().getRefinementParserRuleCall_1()); }
		ruleRefinement
		{ after(grammarAccess.getConsExpressionAccess().getRefinementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getConsExpressionAccess().getRuleParserRuleCall_2()); }
		ruleRule
		{ after(grammarAccess.getConsExpressionAccess().getRuleParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getConsExpressionAccess().getSPLNotationParserRuleCall_3()); }
		ruleSPLNotation
		{ after(grammarAccess.getConsExpressionAccess().getSPLNotationParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalExpAccess().getGroup_0()); }
		(rule__TerminalExp__Group_0__0)
		{ after(grammarAccess.getTerminalExpAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalExpAccess().getIDConsParserRuleCall_1()); }
		ruleIDCons
		{ after(grammarAccess.getTerminalExpAccess().getIDConsParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Refinement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRefinementAccess().getAssignmentParserRuleCall_0()); }
		ruleAssignment
		{ after(grammarAccess.getRefinementAccess().getAssignmentParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRefinementAccess().getVarRefinementParserRuleCall_1()); }
		ruleVarRefinement
		{ after(grammarAccess.getRefinementAccess().getVarRefinementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRefinementAccess().getSetRefinementParserRuleCall_2()); }
		ruleSetRefinement
		{ after(grammarAccess.getRefinementAccess().getSetRefinementParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getValueAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getSelectedKeyword_1()); }
		'selected'
		{ after(grammarAccess.getValueAccess().getSelectedKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getUnselectedKeyword_2()); }
		'unselected'
		{ after(grammarAccess.getValueAccess().getUnselectedKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTypeAccess().getBooleanKeyword_0()); }
		'boolean'
		{ after(grammarAccess.getVarTypeAccess().getBooleanKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getNumericKeyword_1()); }
		'numeric'
		{ after(grammarAccess.getVarTypeAccess().getNumericKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPLop__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSPLopAccess().getOptionalKeyword_0()); }
		'optional'
		{ after(grammarAccess.getSPLopAccess().getOptionalKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSPLopAccess().getMandatoryKeyword_1()); }
		'mandatory'
		{ after(grammarAccess.getSPLopAccess().getMandatoryKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSPLopAccess().getRequiresKeyword_2()); }
		'requires'
		{ after(grammarAccess.getSPLopAccess().getRequiresKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getSPLopAccess().getExcludesKeyword_3()); }
		'excludes'
		{ after(grammarAccess.getSPLopAccess().getExcludesKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelKeyword_0()); }
	'model'
	{ after(grammarAccess.getModelAccess().getModelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
	(rule__Model__NameAssignment_1)
	{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getVariablesKeyword_2()); }
	'variables:'
	{ after(grammarAccess.getModelAccess().getVariablesKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getVarsAssignment_3()); }
		(rule__Model__VarsAssignment_3)
		{ after(grammarAccess.getModelAccess().getVarsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getVarsAssignment_3()); }
		(rule__Model__VarsAssignment_3)*
		{ after(grammarAccess.getModelAccess().getVarsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getConstraintsKeyword_4()); }
	'constraints:'
	{ after(grammarAccess.getModelAccess().getConstraintsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getConstraintsAssignment_5()); }
		(rule__Model__ConstraintsAssignment_5)
		{ after(grammarAccess.getModelAccess().getConstraintsAssignment_5()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getConstraintsAssignment_5()); }
		(rule__Model__ConstraintsAssignment_5)*
		{ after(grammarAccess.getModelAccess().getConstraintsAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getModifierParserRuleCall_0()); }
	ruleModifier
	{ after(grammarAccess.getVarDeclarationAccess().getModifierParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__1__Impl
	rule__VarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getNameAssignment_1()); }
	(rule__VarDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVarDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__2__Impl
	rule__VarDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getVariantsKeyword_2()); }
	'variants:'
	{ after(grammarAccess.getVarDeclarationAccess().getVariantsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getDomAssignment_3()); }
	(rule__VarDeclaration__DomAssignment_3)
	{ after(grammarAccess.getVarDeclarationAccess().getDomAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariantsInterval__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantsInterval__Group__0__Impl
	rule__VariantsInterval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsInterval__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsIntervalAccess().getVariantsIntervalAction_0()); }
	()
	{ after(grammarAccess.getVariantsIntervalAccess().getVariantsIntervalAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsInterval__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantsInterval__Group__1__Impl
	rule__VariantsInterval__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsInterval__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsIntervalAccess().getStartAssignment_1()); }
	(rule__VariantsInterval__StartAssignment_1)
	{ after(grammarAccess.getVariantsIntervalAccess().getStartAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsInterval__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantsInterval__Group__2__Impl
	rule__VariantsInterval__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsInterval__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsIntervalAccess().getColonColonKeyword_2()); }
	'::'
	{ after(grammarAccess.getVariantsIntervalAccess().getColonColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsInterval__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantsInterval__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsInterval__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsIntervalAccess().getEndAssignment_3()); }
	(rule__VariantsInterval__EndAssignment_3)
	{ after(grammarAccess.getVariantsIntervalAccess().getEndAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariantsEnumeration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantsEnumeration__Group__0__Impl
	rule__VariantsEnumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsEnumeration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsEnumerationAccess().getVariantsEnumerationAction_0()); }
	()
	{ after(grammarAccess.getVariantsEnumerationAccess().getVariantsEnumerationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsEnumeration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantsEnumeration__Group__1__Impl
	rule__VariantsEnumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsEnumeration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsEnumerationAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getVariantsEnumerationAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsEnumeration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantsEnumeration__Group__2__Impl
	rule__VariantsEnumeration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsEnumeration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsEnumerationAccess().getListAssignment_2()); }
	(rule__VariantsEnumeration__ListAssignment_2)
	{ after(grammarAccess.getVariantsEnumerationAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsEnumeration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantsEnumeration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsEnumeration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantsEnumerationAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getVariantsEnumerationAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getNameAssignment_0()); }
	(rule__Constraint__NameAssignment_0)
	{ after(grammarAccess.getConstraintAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getConstraintAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getExpAssignment_2()); }
	(rule__Constraint__ExpAssignment_2)
	{ after(grammarAccess.getConstraintAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExp__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalExp__Group_0__0__Impl
	rule__TerminalExp__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExp__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalExpAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getTerminalExpAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExp__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalExp__Group_0__1__Impl
	rule__TerminalExp__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExp__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalExpAccess().getConsExpressionParserRuleCall_0_1()); }
	ruleConsExpression
	{ after(grammarAccess.getTerminalExpAccess().getConsExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExp__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalExp__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExp__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalExpAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getTerminalExpAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getVarAssignment_0()); }
	(rule__Assignment__VarAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getIsKeyword_1()); }
	'is'
	{ after(grammarAccess.getAssignmentAccess().getIsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
	(rule__Assignment__ValueAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarRefinement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarRefinement__Group__0__Impl
	rule__VarRefinement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRefinement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarRefinementAccess().getVarAssignment_0()); }
	(rule__VarRefinement__VarAssignment_0)
	{ after(grammarAccess.getVarRefinementAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRefinement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarRefinement__Group__1__Impl
	rule__VarRefinement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRefinement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarRefinementAccess().getInKeyword_1()); }
	'in'
	{ after(grammarAccess.getVarRefinementAccess().getInKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRefinement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarRefinement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRefinement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarRefinementAccess().getVariantsAssignment_2()); }
	(rule__VarRefinement__VariantsAssignment_2)
	{ after(grammarAccess.getVarRefinementAccess().getVariantsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetRefinement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group__0__Impl
	rule__SetRefinement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getSetRefinementAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group__1__Impl
	rule__SetRefinement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getVarsAssignment_1()); }
	(rule__SetRefinement__VarsAssignment_1)
	{ after(grammarAccess.getSetRefinementAccess().getVarsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group__2__Impl
	rule__SetRefinement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getSetRefinementAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group__3__Impl
	rule__SetRefinement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getVariantsKeyword_3()); }
	'variants'
	{ after(grammarAccess.getSetRefinementAccess().getVariantsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group__4__Impl
	rule__SetRefinement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getLeftSquareBracketKeyword_4()); }
	'['
	{ after(grammarAccess.getSetRefinementAccess().getLeftSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group__5__Impl
	rule__SetRefinement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getLeftParenthesisKeyword_5()); }
	'('
	{ after(grammarAccess.getSetRefinementAccess().getLeftParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group__6__Impl
	rule__SetRefinement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getHeadAssignment_6()); }
	(rule__SetRefinement__HeadAssignment_6)
	{ after(grammarAccess.getSetRefinementAccess().getHeadAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group__7__Impl
	rule__SetRefinement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getSetRefinementAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group__8__Impl
	rule__SetRefinement__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSetRefinementAccess().getGroup_8()); }
		(rule__SetRefinement__Group_8__0)
		{ after(grammarAccess.getSetRefinementAccess().getGroup_8()); }
	)
	(
		{ before(grammarAccess.getSetRefinementAccess().getGroup_8()); }
		(rule__SetRefinement__Group_8__0)*
		{ after(grammarAccess.getSetRefinementAccess().getGroup_8()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getRightSquareBracketKeyword_9()); }
	']'
	{ after(grammarAccess.getSetRefinementAccess().getRightSquareBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetRefinement__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group_8__0__Impl
	rule__SetRefinement__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getCommaKeyword_8_0()); }
	','
	{ after(grammarAccess.getSetRefinementAccess().getCommaKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group_8__1__Impl
	rule__SetRefinement__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getLeftParenthesisKeyword_8_1()); }
	'('
	{ after(grammarAccess.getSetRefinementAccess().getLeftParenthesisKeyword_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group_8__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group_8__2__Impl
	rule__SetRefinement__Group_8__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group_8__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getTailAssignment_8_2()); }
	(rule__SetRefinement__TailAssignment_8_2)
	{ after(grammarAccess.getSetRefinementAccess().getTailAssignment_8_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group_8__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRefinement__Group_8__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__Group_8__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRefinementAccess().getRightParenthesisKeyword_8_3()); }
	')'
	{ after(grammarAccess.getSetRefinementAccess().getRightParenthesisKeyword_8_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getConditionAssignment_0()); }
	(rule__Rule__ConditionAssignment_0)
	{ after(grammarAccess.getRuleAccess().getConditionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_1()); }
	'-->'
	{ after(grammarAccess.getRuleAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getConsequenceAssignment_2()); }
	(rule__Rule__ConsequenceAssignment_2)
	{ after(grammarAccess.getRuleAccess().getConsequenceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SPLNotation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SPLNotation__Group__0__Impl
	rule__SPLNotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SPLNotation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSPLNotationAccess().getVar1Assignment_0()); }
	(rule__SPLNotation__Var1Assignment_0)
	{ after(grammarAccess.getSPLNotationAccess().getVar1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPLNotation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SPLNotation__Group__1__Impl
	rule__SPLNotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SPLNotation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSPLNotationAccess().getOpAssignment_1()); }
	(rule__SPLNotation__OpAssignment_1)
	{ after(grammarAccess.getSPLNotationAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPLNotation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SPLNotation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SPLNotation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSPLNotationAccess().getVar2Assignment_2()); }
	(rule__SPLNotation__Var2Assignment_2)
	{ after(grammarAccess.getSPLNotationAccess().getVar2Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOfValues__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfValues__Group__0__Impl
	rule__ListOfValues__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfValuesAccess().getValueParserRuleCall_0()); }
	ruleValue
	{ after(grammarAccess.getListOfValuesAccess().getValueParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfValues__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getListOfValuesAccess().getGroup_1()); }
		(rule__ListOfValues__Group_1__0)
		{ after(grammarAccess.getListOfValuesAccess().getGroup_1()); }
	)
	(
		{ before(grammarAccess.getListOfValuesAccess().getGroup_1()); }
		(rule__ListOfValues__Group_1__0)*
		{ after(grammarAccess.getListOfValuesAccess().getGroup_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOfValues__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfValues__Group_1__0__Impl
	rule__ListOfValues__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfValuesAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getListOfValuesAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfValues__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfValues__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfValuesAccess().getValueParserRuleCall_1_1()); }
	ruleValue
	{ after(grammarAccess.getListOfValuesAccess().getValueParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOfIDs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfIDs__Group__0__Impl
	rule__ListOfIDs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfIDs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfIDsAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getListOfIDsAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfIDs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfIDs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfIDs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getListOfIDsAccess().getGroup_1()); }
		(rule__ListOfIDs__Group_1__0)
		{ after(grammarAccess.getListOfIDsAccess().getGroup_1()); }
	)
	(
		{ before(grammarAccess.getListOfIDsAccess().getGroup_1()); }
		(rule__ListOfIDs__Group_1__0)*
		{ after(grammarAccess.getListOfIDsAccess().getGroup_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListOfIDs__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfIDs__Group_1__0__Impl
	rule__ListOfIDs__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfIDs__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfIDsAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getListOfIDsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfIDs__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListOfIDs__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOfIDs__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListOfIDsAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getListOfIDsAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Modifier__UnorderedGroup
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getModifierAccess().getUnorderedGroup());
	}
:
	rule__Modifier__UnorderedGroup__0
	{getUnorderedGroupHelper().canLeave(grammarAccess.getModifierAccess().getUnorderedGroup())}?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getModifierAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__Modifier__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModifierAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModifierAccess().getUnorderedGroup(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getModifierAccess().getInstantiableAssignment_0()); }
					(rule__Modifier__InstantiableAssignment_0)
					{ after(grammarAccess.getModifierAccess().getInstantiableAssignment_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModifierAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModifierAccess().getUnorderedGroup(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getModifierAccess().getTypeAssignment_1()); }
					(rule__Modifier__TypeAssignment_1)
					{ after(grammarAccess.getModifierAccess().getTypeAssignment_1()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifierAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__Modifier__UnorderedGroup__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modifier__UnorderedGroup__Impl
	rule__Modifier__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__UnorderedGroup__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modifier__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__VarsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getVarsVarDeclarationParserRuleCall_3_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getModelAccess().getVarsVarDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ConstraintsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getConstraintsConstraintParserRuleCall_5_0()); }
		ruleConstraint
		{ after(grammarAccess.getModelAccess().getConstraintsConstraintParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__DomAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getDomVariantDeclarationParserRuleCall_3_0()); }
		ruleVariantDeclaration
		{ after(grammarAccess.getVarDeclarationAccess().getDomVariantDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__InstantiableAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifierAccess().getInstantiableInstantiableKeyword_0_0()); }
		(
			{ before(grammarAccess.getModifierAccess().getInstantiableInstantiableKeyword_0_0()); }
			'instantiable'
			{ after(grammarAccess.getModifierAccess().getInstantiableInstantiableKeyword_0_0()); }
		)
		{ after(grammarAccess.getModifierAccess().getInstantiableInstantiableKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifierAccess().getTypeVarTypeParserRuleCall_1_0()); }
		ruleVarType
		{ after(grammarAccess.getModifierAccess().getTypeVarTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsInterval__StartAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariantsIntervalAccess().getStartValueParserRuleCall_1_0()); }
		ruleValue
		{ after(grammarAccess.getVariantsIntervalAccess().getStartValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsInterval__EndAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariantsIntervalAccess().getEndValueParserRuleCall_3_0()); }
		ruleValue
		{ after(grammarAccess.getVariantsIntervalAccess().getEndValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantsEnumeration__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariantsEnumerationAccess().getListEnumerationParserRuleCall_2_0()); }
		ruleEnumeration
		{ after(grammarAccess.getVariantsEnumerationAccess().getListEnumerationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getExpConsExpressionParserRuleCall_2_0()); }
		ruleConsExpression
		{ after(grammarAccess.getConstraintAccess().getExpConsExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IDCons__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIDConsAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getIDConsAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getVarIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAssignmentAccess().getVarIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_2_0()); }
		ruleValue
		{ after(grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRefinement__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarRefinementAccess().getVarIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVarRefinementAccess().getVarIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRefinement__VariantsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarRefinementAccess().getVariantsVariantDeclarationParserRuleCall_2_0()); }
		ruleVariantDeclaration
		{ after(grammarAccess.getVarRefinementAccess().getVariantsVariantDeclarationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__VarsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetRefinementAccess().getVarsListOfIDsParserRuleCall_1_0()); }
		ruleListOfIDs
		{ after(grammarAccess.getSetRefinementAccess().getVarsListOfIDsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__HeadAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetRefinementAccess().getHeadListOfValuesParserRuleCall_6_0()); }
		ruleListOfValues
		{ after(grammarAccess.getSetRefinementAccess().getHeadListOfValuesParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRefinement__TailAssignment_8_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetRefinementAccess().getTailListOfValuesParserRuleCall_8_2_0()); }
		ruleListOfValues
		{ after(grammarAccess.getSetRefinementAccess().getTailListOfValuesParserRuleCall_8_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getConditionTerminalExpParserRuleCall_0_0()); }
		ruleTerminalExp
		{ after(grammarAccess.getRuleAccess().getConditionTerminalExpParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConsequenceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getConsequenceTerminalExpParserRuleCall_2_0()); }
		ruleTerminalExp
		{ after(grammarAccess.getRuleAccess().getConsequenceTerminalExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPLNotation__Var1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSPLNotationAccess().getVar1IDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSPLNotationAccess().getVar1IDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPLNotation__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSPLNotationAccess().getOpSPLopParserRuleCall_1_0()); }
		ruleSPLop
		{ after(grammarAccess.getSPLNotationAccess().getOpSPLopParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPLNotation__Var2Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSPLNotationAccess().getVar2IDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getSPLNotationAccess().getVar2IDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
