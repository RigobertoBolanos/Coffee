//Java imports
import java.util.HashMap;
import java.util.List;
//imports for hlcl 
import com.variamos.hlcl.core.HlclProgram; 
import com.variamos.hlcl.model.expressions.HlclFactory; 
import com.variamos.hlcl.model.domains.BinaryDomain;
import com.variamos.hlcl.model.domains.IntervalDomain;
import com.variamos.hlcl.model.domains.RangeDomain;
import com.variamos.hlcl.model.domains.StringDomain;
import com.variamos.hlcl.model.expressions.Identifier;
import com.variamos.hlcl.model.expressions.IntBooleanExpression;
import com.variamos.hlcl.model.expressions.NumericIdentifier;
import com.variamos.hlcl.model.expressions.SymbolicExpression;
import com.variamos.hlcl.model.expressions.IntNumericExpression;

//imports for solver
import com.variamos.solver.core.SWIPrologSolver;
import com.variamos.solver.core.compiler.Hlcl2SWIProlog;
import com.variamos.solver.model.SolverSolution;

/**
* This class is automatically generated from a product line model described in 
* constraint programming HLCL
* @author Angela Villota 
* @version CP-HLCL Version1
*
*/
public class Tienda_Virtual { 			
	
	private String modelName;
	private HlclFactory factory;
	private HlclProgram hlclProgram;
	private SWIPrologSolver swiSolver;
	private String prologProgram;
	private HashMap<String,IntBooleanExpression> constraints;
	private HashMap<String,Identifier> variables;
	private HashMap<String,NumericIdentifier> numbers;
	/**
	* This is an autogenerated method* Constructor method
	* @param modelName is the name of the model in the  CP-HLCL specification
	*/
	public Tienda_Virtual(String modelName){ 				
		
		this.modelName= modelName;
		hlclProgram= new HlclProgram();
		factory = new HlclFactory();
		variables= new HashMap<String,Identifier>();
		constraints= new HashMap<String,IntBooleanExpression>();
		numbers= new HashMap<String,NumericIdentifier>();
		NumericIdentifier one = factory.number(1);
		NumericIdentifier zero= factory.number(0);
		numbers.put("1", one);
		numbers.put("0", zero);
	} 			
	public static void main(String[] args) {
		Tienda_Virtual obj = new Tienda_Virtual("Tienda_Virtual");
		obj.run();
	}
	public void run(){
		// first obtain a HlclProgram from the specification
		transformVars();
		transformConstraints(); 
		// use the solver to solve the constraint program
		evaluateSatisfiability();
		//show the output
		System.out.println(prologProgram);
	}
	public void transformVars() {
//declaring variable Tienda_Virtual
Identifier Tienda_Virtual = factory.newIdentifier("Tienda_Virtual");
  			BinaryDomain Tienda_VirtualDom= new BinaryDomain();
Tienda_Virtual.setDomain(Tienda_VirtualDom);	
variables.put("Tienda_Virtual", Tienda_Virtual); //including the variable in the map
//declaring variable Envios
Identifier Envios = factory.newIdentifier("Envios");
  			BinaryDomain EnviosDom= new BinaryDomain();
Envios.setDomain(EnviosDom);	
variables.put("Envios", Envios); //including the variable in the map
//declaring variable Costo_envio
Identifier Costo_envio = factory.newIdentifier("Costo_envio");
  			BinaryDomain Costo_envioDom= new BinaryDomain();
Costo_envio.setDomain(Costo_envioDom);	
variables.put("Costo_envio", Costo_envio); //including the variable in the map
//declaring variable Servicio_de_Entrega
Identifier Servicio_de_Entrega = factory.newIdentifier("Servicio_de_Entrega");
  			BinaryDomain Servicio_de_EntregaDom= new BinaryDomain();
Servicio_de_Entrega.setDomain(Servicio_de_EntregaDom);	
variables.put("Servicio_de_Entrega", Servicio_de_Entrega); //including the variable in the map
//declaring variable Pagos
Identifier Pagos = factory.newIdentifier("Pagos");
  			BinaryDomain PagosDom= new BinaryDomain();
Pagos.setDomain(PagosDom);	
variables.put("Pagos", Pagos); //including the variable in the map
//declaring variable Pagar
Identifier Pagar = factory.newIdentifier("Pagar");
  			BinaryDomain PagarDom= new BinaryDomain();
Pagar.setDomain(PagarDom);	
variables.put("Pagar", Pagar); //including the variable in the map
//declaring variable Pago_Offline
Identifier Pago_Offline = factory.newIdentifier("Pago_Offline");
  			BinaryDomain Pago_OfflineDom= new BinaryDomain();
Pago_Offline.setDomain(Pago_OfflineDom);	
variables.put("Pago_Offline", Pago_Offline); //including the variable in the map
//declaring variable Consignacion
Identifier Consignacion = factory.newIdentifier("Consignacion");
  			BinaryDomain ConsignacionDom= new BinaryDomain();
Consignacion.setDomain(ConsignacionDom);	
variables.put("Consignacion", Consignacion); //including the variable in the map
//declaring variable Servicio_ContraMinusentrega
Identifier Servicio_ContraMinusentrega = factory.newIdentifier("Servicio_ContraMinusentrega");
  			BinaryDomain Servicio_ContraMinusentregaDom= new BinaryDomain();
Servicio_ContraMinusentrega.setDomain(Servicio_ContraMinusentregaDom);	
variables.put("Servicio_ContraMinusentrega", Servicio_ContraMinusentrega); //including the variable in the map
//declaring variable Pago_Online
Identifier Pago_Online = factory.newIdentifier("Pago_Online");
  			BinaryDomain Pago_OnlineDom= new BinaryDomain();
Pago_Online.setDomain(Pago_OnlineDom);	
variables.put("Pago_Online", Pago_Online); //including the variable in the map
//declaring variable PayPal
Identifier PayPal = factory.newIdentifier("PayPal");
  			BinaryDomain PayPalDom= new BinaryDomain();
PayPal.setDomain(PayPalDom);	
variables.put("PayPal", PayPal); //including the variable in the map
//declaring variable Tarjeta_Credito
Identifier Tarjeta_Credito = factory.newIdentifier("Tarjeta_Credito");
  			BinaryDomain Tarjeta_CreditoDom= new BinaryDomain();
Tarjeta_Credito.setDomain(Tarjeta_CreditoDom);	
variables.put("Tarjeta_Credito", Tarjeta_Credito); //including the variable in the map
//declaring variable Tarjeta_Debito
Identifier Tarjeta_Debito = factory.newIdentifier("Tarjeta_Debito");
  			BinaryDomain Tarjeta_DebitoDom= new BinaryDomain();
Tarjeta_Debito.setDomain(Tarjeta_DebitoDom);	
variables.put("Tarjeta_Debito", Tarjeta_Debito); //including the variable in the map
//declaring variable Cupon
Identifier Cupon = factory.newIdentifier("Cupon");
  			BinaryDomain CuponDom= new BinaryDomain();
Cupon.setDomain(CuponDom);	
variables.put("Cupon", Cupon); //including the variable in the map
//declaring variable Cheque
Identifier Cheque = factory.newIdentifier("Cheque");
  			BinaryDomain ChequeDom= new BinaryDomain();
Cheque.setDomain(ChequeDom);	
variables.put("Cheque", Cheque); //including the variable in the map
//declaring variable Facturacion
Identifier Facturacion = factory.newIdentifier("Facturacion");
  			BinaryDomain FacturacionDom= new BinaryDomain();
Facturacion.setDomain(FacturacionDom);	
variables.put("Facturacion", Facturacion); //including the variable in the map
//declaring variable Factura_Fisica
Identifier Factura_Fisica = factory.newIdentifier("Factura_Fisica");
  			BinaryDomain Factura_FisicaDom= new BinaryDomain();
Factura_Fisica.setDomain(Factura_FisicaDom);	
variables.put("Factura_Fisica", Factura_Fisica); //including the variable in the map
//declaring variable Factura_Online
Identifier Factura_Online = factory.newIdentifier("Factura_Online");
  			BinaryDomain Factura_OnlineDom= new BinaryDomain();
Factura_Online.setDomain(Factura_OnlineDom);	
variables.put("Factura_Online", Factura_Online); //including the variable in the map
//declaring variable Certificado_Compra
Identifier Certificado_Compra = factory.newIdentifier("Certificado_Compra");
  			BinaryDomain Certificado_CompraDom= new BinaryDomain();
Certificado_Compra.setDomain(Certificado_CompraDom);	
variables.put("Certificado_Compra", Certificado_Compra); //including the variable in the map
//declaring variable Notificar_Pagos
Identifier Notificar_Pagos = factory.newIdentifier("Notificar_Pagos");
  			BinaryDomain Notificar_PagosDom= new BinaryDomain();
Notificar_Pagos.setDomain(Notificar_PagosDom);	
variables.put("Notificar_Pagos", Notificar_Pagos); //including the variable in the map
//declaring variable Compras
Identifier Compras = factory.newIdentifier("Compras");
  			BinaryDomain ComprasDom= new BinaryDomain();
Compras.setDomain(ComprasDom);	
variables.put("Compras", Compras); //including the variable in the map
//declaring variable Carro_de_Compras
Identifier Carro_de_Compras = factory.newIdentifier("Carro_de_Compras");
  			BinaryDomain Carro_de_ComprasDom= new BinaryDomain();
Carro_de_Compras.setDomain(Carro_de_ComprasDom);	
variables.put("Carro_de_Compras", Carro_de_Compras); //including the variable in the map
//declaring variable Recuperar_Compras
Identifier Recuperar_Compras = factory.newIdentifier("Recuperar_Compras");
  			BinaryDomain Recuperar_ComprasDom= new BinaryDomain();
Recuperar_Compras.setDomain(Recuperar_ComprasDom);	
variables.put("Recuperar_Compras", Recuperar_Compras); //including the variable in the map
//declaring variable Historial_de_Compras
Identifier Historial_de_Compras = factory.newIdentifier("Historial_de_Compras");
  			BinaryDomain Historial_de_ComprasDom= new BinaryDomain();
Historial_de_Compras.setDomain(Historial_de_ComprasDom);	
variables.put("Historial_de_Compras", Historial_de_Compras); //including the variable in the map
//declaring variable Listas_Mensajeria
Identifier Listas_Mensajeria = factory.newIdentifier("Listas_Mensajeria");
  			BinaryDomain Listas_MensajeriaDom= new BinaryDomain();
Listas_Mensajeria.setDomain(Listas_MensajeriaDom);	
variables.put("Listas_Mensajeria", Listas_Mensajeria); //including the variable in the map
//declaring variable Notificaciones
Identifier Notificaciones = factory.newIdentifier("Notificaciones");
  			BinaryDomain NotificacionesDom= new BinaryDomain();
Notificaciones.setDomain(NotificacionesDom);	
variables.put("Notificaciones", Notificaciones); //including the variable in the map
//declaring variable Productos
Identifier Productos = factory.newIdentifier("Productos");
  			BinaryDomain ProductosDom= new BinaryDomain();
Productos.setDomain(ProductosDom);	
variables.put("Productos", Productos); //including the variable in the map
//declaring variable Descuentos
Identifier Descuentos = factory.newIdentifier("Descuentos");
  			BinaryDomain DescuentosDom= new BinaryDomain();
Descuentos.setDomain(DescuentosDom);	
variables.put("Descuentos", Descuentos); //including the variable in the map
//declaring variable Catalogo
Identifier Catalogo = factory.newIdentifier("Catalogo");
  			BinaryDomain CatalogoDom= new BinaryDomain();
Catalogo.setDomain(CatalogoDom);	
variables.put("Catalogo", Catalogo); //including the variable in the map
//declaring variable Busquedas
Identifier Busquedas = factory.newIdentifier("Busquedas");
  			BinaryDomain BusquedasDom= new BinaryDomain();
Busquedas.setDomain(BusquedasDom);	
variables.put("Busquedas", Busquedas); //including the variable in the map
//declaring variable Compartir
Identifier Compartir = factory.newIdentifier("Compartir");
  			BinaryDomain CompartirDom= new BinaryDomain();
Compartir.setDomain(CompartirDom);	
variables.put("Compartir", Compartir); //including the variable in the map
//declaring variable Por_Correo_Electronico
Identifier Por_Correo_Electronico = factory.newIdentifier("Por_Correo_Electronico");
  			BinaryDomain Por_Correo_ElectronicoDom= new BinaryDomain();
Por_Correo_Electronico.setDomain(Por_Correo_ElectronicoDom);	
variables.put("Por_Correo_Electronico", Por_Correo_Electronico); //including the variable in the map
//declaring variable Por_Redes_Sociales
Identifier Por_Redes_Sociales = factory.newIdentifier("Por_Redes_Sociales");
  			BinaryDomain Por_Redes_SocialesDom= new BinaryDomain();
Por_Redes_Sociales.setDomain(Por_Redes_SocialesDom);	
variables.put("Por_Redes_Sociales", Por_Redes_Sociales); //including the variable in the map
//declaring variable Publicidad_Productos
Identifier Publicidad_Productos = factory.newIdentifier("Publicidad_Productos");
  			BinaryDomain Publicidad_ProductosDom= new BinaryDomain();
Publicidad_Productos.setDomain(Publicidad_ProductosDom);	
variables.put("Publicidad_Productos", Publicidad_Productos); //including the variable in the map
//declaring variable Publicidad_Externa
Identifier Publicidad_Externa = factory.newIdentifier("Publicidad_Externa");
  			BinaryDomain Publicidad_ExternaDom= new BinaryDomain();
Publicidad_Externa.setDomain(Publicidad_ExternaDom);	
variables.put("Publicidad_Externa", Publicidad_Externa); //including the variable in the map
//declaring variable Publicidad_Interna
Identifier Publicidad_Interna = factory.newIdentifier("Publicidad_Interna");
  			BinaryDomain Publicidad_InternaDom= new BinaryDomain();
Publicidad_Interna.setDomain(Publicidad_InternaDom);	
variables.put("Publicidad_Interna", Publicidad_Interna); //including the variable in the map
//declaring variable Sugerencias
Identifier Sugerencias = factory.newIdentifier("Sugerencias");
  			BinaryDomain SugerenciasDom= new BinaryDomain();
Sugerencias.setDomain(SugerenciasDom);	
variables.put("Sugerencias", Sugerencias); //including the variable in the map
//declaring variable Publicacion_Productos
Identifier Publicacion_Productos = factory.newIdentifier("Publicacion_Productos");
  			BinaryDomain Publicacion_ProductosDom= new BinaryDomain();
Publicacion_Productos.setDomain(Publicacion_ProductosDom);	
variables.put("Publicacion_Productos", Publicacion_Productos); //including the variable in the map
//declaring variable Categorias
Identifier Categorias = factory.newIdentifier("Categorias");
  			BinaryDomain CategoriasDom= new BinaryDomain();
Categorias.setDomain(CategoriasDom);	
variables.put("Categorias", Categorias); //including the variable in the map
//declaring variable Administracion_Sitio_Web
Identifier Administracion_Sitio_Web = factory.newIdentifier("Administracion_Sitio_Web");
  			BinaryDomain Administracion_Sitio_WebDom= new BinaryDomain();
Administracion_Sitio_Web.setDomain(Administracion_Sitio_WebDom);	
variables.put("Administracion_Sitio_Web", Administracion_Sitio_Web); //including the variable in the map
//declaring variable Administracion_Pagina
Identifier Administracion_Pagina = factory.newIdentifier("Administracion_Pagina");
  			BinaryDomain Administracion_PaginaDom= new BinaryDomain();
Administracion_Pagina.setDomain(Administracion_PaginaDom);	
variables.put("Administracion_Pagina", Administracion_Pagina); //including the variable in the map
//declaring variable Gestion_de_la_Estructura
Identifier Gestion_de_la_Estructura = factory.newIdentifier("Gestion_de_la_Estructura");
  			BinaryDomain Gestion_de_la_EstructuraDom= new BinaryDomain();
Gestion_de_la_Estructura.setDomain(Gestion_de_la_EstructuraDom);	
variables.put("Gestion_de_la_Estructura", Gestion_de_la_Estructura); //including the variable in the map
//declaring variable Gestion_del_Contenido
Identifier Gestion_del_Contenido = factory.newIdentifier("Gestion_del_Contenido");
  			BinaryDomain Gestion_del_ContenidoDom= new BinaryDomain();
Gestion_del_Contenido.setDomain(Gestion_del_ContenidoDom);	
variables.put("Gestion_del_Contenido", Gestion_del_Contenido); //including the variable in the map
//declaring variable Usuarios
Identifier Usuarios = factory.newIdentifier("Usuarios");
  			BinaryDomain UsuariosDom= new BinaryDomain();
Usuarios.setDomain(UsuariosDom);	
variables.put("Usuarios", Usuarios); //including the variable in the map
//declaring variable Autenticacion_Externa
Identifier Autenticacion_Externa = factory.newIdentifier("Autenticacion_Externa");
  			BinaryDomain Autenticacion_ExternaDom= new BinaryDomain();
Autenticacion_Externa.setDomain(Autenticacion_ExternaDom);	
variables.put("Autenticacion_Externa", Autenticacion_Externa); //including the variable in the map
//declaring variable Autenticacion_Interna
Identifier Autenticacion_Interna = factory.newIdentifier("Autenticacion_Interna");
  			BinaryDomain Autenticacion_InternaDom= new BinaryDomain();
Autenticacion_Interna.setDomain(Autenticacion_InternaDom);	
variables.put("Autenticacion_Interna", Autenticacion_Interna); //including the variable in the map
//declaring variable Servicio_al_Cliente
Identifier Servicio_al_Cliente = factory.newIdentifier("Servicio_al_Cliente");
  			BinaryDomain Servicio_al_ClienteDom= new BinaryDomain();
Servicio_al_Cliente.setDomain(Servicio_al_ClienteDom);	
variables.put("Servicio_al_Cliente", Servicio_al_Cliente); //including the variable in the map
//declaring variable Comentarios
Identifier Comentarios = factory.newIdentifier("Comentarios");
  			BinaryDomain ComentariosDom= new BinaryDomain();
Comentarios.setDomain(ComentariosDom);	
variables.put("Comentarios", Comentarios); //including the variable in the map
//declaring variable Ayuda_en_Linea
Identifier Ayuda_en_Linea = factory.newIdentifier("Ayuda_en_Linea");
  			BinaryDomain Ayuda_en_LineaDom= new BinaryDomain();
Ayuda_en_Linea.setDomain(Ayuda_en_LineaDom);	
variables.put("Ayuda_en_Linea", Ayuda_en_Linea); //including the variable in the map
//declaring variable Buzon_de_Sugerencias
Identifier Buzon_de_Sugerencias = factory.newIdentifier("Buzon_de_Sugerencias");
  			BinaryDomain Buzon_de_SugerenciasDom= new BinaryDomain();
Buzon_de_Sugerencias.setDomain(Buzon_de_SugerenciasDom);	
variables.put("Buzon_de_Sugerencias", Buzon_de_Sugerencias); //including the variable in the map
//declaring variable Lista_de_Deseos
Identifier Lista_de_Deseos = factory.newIdentifier("Lista_de_Deseos");
  			BinaryDomain Lista_de_DeseosDom= new BinaryDomain();
Lista_de_Deseos.setDomain(Lista_de_DeseosDom);	
variables.put("Lista_de_Deseos", Lista_de_Deseos); //including the variable in the map
//declaring variable Trazabilidad_de_Pedidos
Identifier Trazabilidad_de_Pedidos = factory.newIdentifier("Trazabilidad_de_Pedidos");
  			BinaryDomain Trazabilidad_de_PedidosDom= new BinaryDomain();
Trazabilidad_de_Pedidos.setDomain(Trazabilidad_de_PedidosDom);	
variables.put("Trazabilidad_de_Pedidos", Trazabilidad_de_Pedidos); //including the variable in the map
//declaring variable Calificacion_de_Productos
Identifier Calificacion_de_Productos = factory.newIdentifier("Calificacion_de_Productos");
  			BinaryDomain Calificacion_de_ProductosDom= new BinaryDomain();
Calificacion_de_Productos.setDomain(Calificacion_de_ProductosDom);	
variables.put("Calificacion_de_Productos", Calificacion_de_Productos); //including the variable in the map
	}
	public void transformConstraints() {
//
//declaring constraint C_Tienda_Virtual


Identifier C_Tienda_Virtual_left = variables.get("Tienda_Virtual");

NumericIdentifier C_Tienda_Virtual_right = getValue("1");
IntBooleanExpression C_Tienda_Virtual=
factory.equals(C_Tienda_Virtual_left, C_Tienda_Virtual_right);
constraints.put("C_Tienda_Virtual", C_Tienda_Virtual);
hlclProgram.add(C_Tienda_Virtual);
//
//declaring constraint C5


Identifier C5_left = variables.get("Pagos");

Identifier C5_right = variables.get("Pagar");
IntBooleanExpression C5=
factory.equals(C5_left, C5_right);
constraints.put("C5", C5);
hlclProgram.add(C5);
//
//declaring constraint C9


Identifier C9_left = variables.get("Pagos");

Identifier C9_right = variables.get("Facturacion");
IntBooleanExpression C9=
factory.equals(C9_left, C9_right);
constraints.put("C9", C9);
hlclProgram.add(C9);
//
//declaring constraint C11


Identifier C11_left = variables.get("Facturacion");

Identifier C11_right = variables.get("Certificado_Compra");
IntBooleanExpression C11=
factory.equals(C11_left, C11_right);
constraints.put("C11", C11);
hlclProgram.add(C11);
//
//declaring constraint C17


Identifier C17_left = variables.get("Tienda_Virtual");

Identifier C17_right = variables.get("Productos");
IntBooleanExpression C17=
factory.equals(C17_left, C17_right);
constraints.put("C17", C17);
hlclProgram.add(C17);
//
//declaring constraint C19


Identifier C19_left = variables.get("Productos");

Identifier C19_right = variables.get("Catalogo");
IntBooleanExpression C19=
factory.equals(C19_left, C19_right);
constraints.put("C19", C19);
hlclProgram.add(C19);
//
//declaring constraint C20


Identifier C20_left = variables.get("Catalogo");

Identifier C20_right = variables.get("Busquedas");
IntBooleanExpression C20=
factory.equals(C20_left, C20_right);
constraints.put("C20", C20);
hlclProgram.add(C20);
//
//declaring constraint C21


Identifier C21_left = variables.get("Catalogo");

Identifier C21_right = variables.get("Compartir");
IntBooleanExpression C21=
factory.equals(C21_left, C21_right);
constraints.put("C21", C21);
hlclProgram.add(C21);
//
//declaring constraint C23


Identifier C23_left = variables.get("Catalogo");

Identifier C23_right = variables.get("Publicidad_Productos");
IntBooleanExpression C23=
factory.equals(C23_left, C23_right);
constraints.put("C23", C23);
hlclProgram.add(C23);
//
//declaring constraint C25


Identifier C25_left = variables.get("Catalogo");

Identifier C25_right = variables.get("Sugerencias");
IntBooleanExpression C25=
factory.equals(C25_left, C25_right);
constraints.put("C25", C25);
hlclProgram.add(C25);
//
//declaring constraint C26


Identifier C26_left = variables.get("Catalogo");

Identifier C26_right = variables.get("Publicacion_Productos");
IntBooleanExpression C26=
factory.equals(C26_left, C26_right);
constraints.put("C26", C26);
hlclProgram.add(C26);
//
//declaring constraint C27


Identifier C27_left = variables.get("Productos");

Identifier C27_right = variables.get("Categorias");
IntBooleanExpression C27=
factory.equals(C27_left, C27_right);
constraints.put("C27", C27);
hlclProgram.add(C27);
//
//declaring constraint C28


Identifier C28_left = variables.get("Tienda_Virtual");

Identifier C28_right = variables.get("Administracion_Sitio_Web");
IntBooleanExpression C28=
factory.equals(C28_left, C28_right);
constraints.put("C28", C28);
hlclProgram.add(C28);
//
//declaring constraint C29


Identifier C29_left = variables.get("Administracion_Sitio_Web");

Identifier C29_right = variables.get("Administracion_Pagina");
IntBooleanExpression C29=
factory.equals(C29_left, C29_right);
constraints.put("C29", C29);
hlclProgram.add(C29);
//
//declaring constraint C31


Identifier C31_left = variables.get("Administracion_Sitio_Web");

Identifier C31_right = variables.get("Usuarios");
IntBooleanExpression C31=
factory.equals(C31_left, C31_right);
constraints.put("C31", C31);
hlclProgram.add(C31);
//
//declaring constraint C1


Identifier C1_left = variables.get("Tienda_Virtual");

Identifier C1_right = variables.get("Envios");
IntBooleanExpression C1=
factory.greaterOrEqualsThan(C1_left, C1_right);
constraints.put("C1", C1);
hlclProgram.add(C1);
//
//declaring constraint C2


Identifier C2_left = variables.get("Envios");

Identifier C2_right = variables.get("Costo_envio");
IntBooleanExpression C2=
factory.greaterOrEqualsThan(C2_left, C2_right);
constraints.put("C2", C2);
hlclProgram.add(C2);
//
//declaring constraint C3


Identifier C3_left = variables.get("Envios");

Identifier C3_right = variables.get("Servicio_de_Entrega");
IntBooleanExpression C3=
factory.greaterOrEqualsThan(C3_left, C3_right);
constraints.put("C3", C3);
hlclProgram.add(C3);
//
//declaring constraint C4


Identifier C4_left = variables.get("Tienda_Virtual");

Identifier C4_right = variables.get("Pagos");
IntBooleanExpression C4=
factory.greaterOrEqualsThan(C4_left, C4_right);
constraints.put("C4", C4);
hlclProgram.add(C4);
//
//declaring constraint C12


Identifier C12_left = variables.get("Pagos");

Identifier C12_right = variables.get("Notificar_Pagos");
IntBooleanExpression C12=
factory.greaterOrEqualsThan(C12_left, C12_right);
constraints.put("C12", C12);
hlclProgram.add(C12);
//
//declaring constraint C13


Identifier C13_left = variables.get("Tienda_Virtual");

Identifier C13_right = variables.get("Compras");
IntBooleanExpression C13=
factory.greaterOrEqualsThan(C13_left, C13_right);
constraints.put("C13", C13);
hlclProgram.add(C13);
//
//declaring constraint C15


Identifier C15_left = variables.get("Tienda_Virtual");

Identifier C15_right = variables.get("Listas_Mensajeria");
IntBooleanExpression C15=
factory.greaterOrEqualsThan(C15_left, C15_right);
constraints.put("C15", C15);
hlclProgram.add(C15);
//
//declaring constraint C16


Identifier C16_left = variables.get("Tienda_Virtual");

Identifier C16_right = variables.get("Notificaciones");
IntBooleanExpression C16=
factory.greaterOrEqualsThan(C16_left, C16_right);
constraints.put("C16", C16);
hlclProgram.add(C16);
//
//declaring constraint C18


Identifier C18_left = variables.get("Productos");

Identifier C18_right = variables.get("Descuentos");
IntBooleanExpression C18=
factory.greaterOrEqualsThan(C18_left, C18_right);
constraints.put("C18", C18);
hlclProgram.add(C18);
//
//declaring constraint C33


Identifier C33_left = variables.get("Tienda_Virtual");

Identifier C33_right = variables.get("Servicio_al_Cliente");
IntBooleanExpression C33=
factory.greaterOrEqualsThan(C33_left, C33_right);
constraints.put("C33", C33);
hlclProgram.add(C33);
//
//declaring constraint C35


Identifier C35_left = variables.get("Factura_Fisica");

Identifier C35_right = variables.get("Envios");
IntBooleanExpression C35=factory.implies(C35_left, C35_right);		
constraints.put("C35", C35);
hlclProgram.add(C35);
//
//declaring constraint C36


Identifier C36_left = variables.get("Listas_Mensajeria");

Identifier C36_right = variables.get("Notificaciones");
IntBooleanExpression C36=factory.implies(C36_left, C36_right);		
constraints.put("C36", C36);
hlclProgram.add(C36);
//
//declaring constraint C37


Identifier C37_left = variables.get("Publicacion_Productos");

Identifier C37_right = variables.get("Gestion_de_la_Estructura");
IntBooleanExpression C37=factory.implies(C37_left, C37_right);		
constraints.put("C37", C37);
hlclProgram.add(C37);
//
//declaring constraint C38


Identifier C38_left = variables.get("Factura_Online");

Identifier C38_right = variables.get("Notificaciones");
IntBooleanExpression C38=factory.implies(C38_left, C38_right);		
constraints.put("C38", C38);
hlclProgram.add(C38);
//
//declaring constraint C39


Identifier C39_left = variables.get("Por_Correo_Electronico");

Identifier C39_right = variables.get("Notificaciones");
IntBooleanExpression C39=factory.implies(C39_left, C39_right);		
constraints.put("C39", C39);
hlclProgram.add(C39);
//
//declaring constraint C40


Identifier C40_left = variables.get("Notificar_Pagos");

Identifier C40_right = variables.get("Notificaciones");
IntBooleanExpression C40=factory.implies(C40_left, C40_right);		
constraints.put("C40", C40);
hlclProgram.add(C40);
//
//declaring constraint C41


Identifier C41_left = variables.get("Certificado_Compra");

Identifier C41_right = variables.get("Notificaciones");
IntBooleanExpression C41=factory.implies(C41_left, C41_right);		
constraints.put("C41", C41);
hlclProgram.add(C41);
//
//declaring constraint C6






Identifier C6_left_left_left_left_left = variables.get("Pago_Offline");

Identifier C6_left_left_left_left_right = variables.get("Pagar");
IntBooleanExpression C6_left_left_left_left=factory.implies(C6_left_left_left_left_left, C6_left_left_left_left_right);		


Identifier C6_left_left_left_right_left = variables.get("Pago_Online");

Identifier C6_left_left_left_right_right = variables.get("Pagar");
IntBooleanExpression C6_left_left_left_right=factory.implies(C6_left_left_left_right_left, C6_left_left_left_right_right);		
IntBooleanExpression C6_left_left_left=factory.and(C6_left_left_left_left, C6_left_left_left_right);		


Identifier C6_left_left_right_left = variables.get("Pagar");

NumericIdentifier C6_left_left_right_right = getValue("1");
IntBooleanExpression C6_left_left_right=
factory.greaterOrEqualsThan(C6_left_left_right_left, C6_left_left_right_right);
IntBooleanExpression C6_left_left=factory.and(C6_left_left_left, C6_left_left_right);		




Identifier C6_left_right_left_left_left = variables.get("Pago_Offline");

Identifier C6_left_right_left_left_right = variables.get("Pago_Online");
IntNumericExpression C6_left_right_left_left=factory.sum(C6_left_right_left_left_left, C6_left_right_left_left_right);	

NumericIdentifier C6_left_right_left_right = getValue("1");
IntBooleanExpression C6_left_right_left=
factory.greaterOrEqualsThan(C6_left_right_left_left, C6_left_right_left_right);


Identifier C6_left_right_right_left = variables.get("Pagar");

NumericIdentifier C6_left_right_right_right = getValue("1");
IntBooleanExpression C6_left_right_right=
factory.greaterOrEqualsThan(C6_left_right_right_left, C6_left_right_right_right);
IntBooleanExpression C6_left_right=factory.and(C6_left_right_left, C6_left_right_right);		
IntBooleanExpression C6_left=factory.implies(C6_left_left, C6_left_right);		



Identifier C6_right_left_left = variables.get("Pago_Offline");

Identifier C6_right_left_right = variables.get("Pago_Online");
IntNumericExpression C6_right_left=factory.sum(C6_right_left_left, C6_right_left_right);	

NumericIdentifier C6_right_right = getValue("2");
IntBooleanExpression C6_right=
factory.lessOrEqualsThan(C6_right_left, C6_right_right);
IntBooleanExpression C6=factory.implies(C6_left, C6_right);		
constraints.put("C6", C6);
hlclProgram.add(C6);
//
//declaring constraint C7






Identifier C7_left_left_left_left_left = variables.get("Consignacion");

Identifier C7_left_left_left_left_right = variables.get("Pago_Offline");
IntBooleanExpression C7_left_left_left_left=factory.implies(C7_left_left_left_left_left, C7_left_left_left_left_right);		


Identifier C7_left_left_left_right_left = variables.get("Servicio_ContraMinusentrega");

Identifier C7_left_left_left_right_right = variables.get("Pago_Offline");
IntBooleanExpression C7_left_left_left_right=factory.implies(C7_left_left_left_right_left, C7_left_left_left_right_right);		
IntBooleanExpression C7_left_left_left=factory.and(C7_left_left_left_left, C7_left_left_left_right);		


Identifier C7_left_left_right_left = variables.get("Pago_Offline");

NumericIdentifier C7_left_left_right_right = getValue("1");
IntBooleanExpression C7_left_left_right=
factory.greaterOrEqualsThan(C7_left_left_right_left, C7_left_left_right_right);
IntBooleanExpression C7_left_left=factory.and(C7_left_left_left, C7_left_left_right);		




Identifier C7_left_right_left_left_left = variables.get("Consignacion");

Identifier C7_left_right_left_left_right = variables.get("Servicio_ContraMinusentrega");
IntNumericExpression C7_left_right_left_left=factory.sum(C7_left_right_left_left_left, C7_left_right_left_left_right);	

NumericIdentifier C7_left_right_left_right = getValue("1");
IntBooleanExpression C7_left_right_left=
factory.greaterOrEqualsThan(C7_left_right_left_left, C7_left_right_left_right);


Identifier C7_left_right_right_left = variables.get("Pago_Offline");

NumericIdentifier C7_left_right_right_right = getValue("1");
IntBooleanExpression C7_left_right_right=
factory.greaterOrEqualsThan(C7_left_right_right_left, C7_left_right_right_right);
IntBooleanExpression C7_left_right=factory.and(C7_left_right_left, C7_left_right_right);		
IntBooleanExpression C7_left=factory.implies(C7_left_left, C7_left_right);		



Identifier C7_right_left_left = variables.get("Consignacion");

Identifier C7_right_left_right = variables.get("Servicio_ContraMinusentrega");
IntNumericExpression C7_right_left=factory.sum(C7_right_left_left, C7_right_left_right);	

NumericIdentifier C7_right_right = getValue("2");
IntBooleanExpression C7_right=
factory.lessOrEqualsThan(C7_right_left, C7_right_right);
IntBooleanExpression C7=factory.implies(C7_left, C7_right);		
constraints.put("C7", C7);
hlclProgram.add(C7);
//
//declaring constraint C8









Identifier C8_left_left_left_left_left_left_left_left = variables.get("PayPal");

Identifier C8_left_left_left_left_left_left_left_right = variables.get("Pago_Online");
IntBooleanExpression C8_left_left_left_left_left_left_left=factory.implies(C8_left_left_left_left_left_left_left_left, C8_left_left_left_left_left_left_left_right);		


Identifier C8_left_left_left_left_left_left_right_left = variables.get("Tarjeta_Credito");

Identifier C8_left_left_left_left_left_left_right_right = variables.get("Pago_Online");
IntBooleanExpression C8_left_left_left_left_left_left_right=factory.implies(C8_left_left_left_left_left_left_right_left, C8_left_left_left_left_left_left_right_right);		
IntBooleanExpression C8_left_left_left_left_left_left=factory.and(C8_left_left_left_left_left_left_left, C8_left_left_left_left_left_left_right);		


Identifier C8_left_left_left_left_left_right_left = variables.get("Tarjeta_Debito");

Identifier C8_left_left_left_left_left_right_right = variables.get("Pago_Online");
IntBooleanExpression C8_left_left_left_left_left_right=factory.implies(C8_left_left_left_left_left_right_left, C8_left_left_left_left_left_right_right);		
IntBooleanExpression C8_left_left_left_left_left=factory.and(C8_left_left_left_left_left_left, C8_left_left_left_left_left_right);		


Identifier C8_left_left_left_left_right_left = variables.get("Cupon");

Identifier C8_left_left_left_left_right_right = variables.get("Pago_Online");
IntBooleanExpression C8_left_left_left_left_right=factory.implies(C8_left_left_left_left_right_left, C8_left_left_left_left_right_right);		
IntBooleanExpression C8_left_left_left_left=factory.and(C8_left_left_left_left_left, C8_left_left_left_left_right);		


Identifier C8_left_left_left_right_left = variables.get("Cheque");

Identifier C8_left_left_left_right_right = variables.get("Pago_Online");
IntBooleanExpression C8_left_left_left_right=factory.implies(C8_left_left_left_right_left, C8_left_left_left_right_right);		
IntBooleanExpression C8_left_left_left=factory.and(C8_left_left_left_left, C8_left_left_left_right);		


Identifier C8_left_left_right_left = variables.get("Pago_Online");

NumericIdentifier C8_left_left_right_right = getValue("1");
IntBooleanExpression C8_left_left_right=
factory.greaterOrEqualsThan(C8_left_left_right_left, C8_left_left_right_right);
IntBooleanExpression C8_left_left=factory.and(C8_left_left_left, C8_left_left_right);		







Identifier C8_left_right_left_left_left_left_left_left = variables.get("PayPal");

Identifier C8_left_right_left_left_left_left_left_right = variables.get("Tarjeta_Credito");
IntNumericExpression C8_left_right_left_left_left_left_left=factory.sum(C8_left_right_left_left_left_left_left_left, C8_left_right_left_left_left_left_left_right);	

Identifier C8_left_right_left_left_left_left_right = variables.get("Tarjeta_Debito");
IntNumericExpression C8_left_right_left_left_left_left=factory.sum(C8_left_right_left_left_left_left_left, C8_left_right_left_left_left_left_right);	

Identifier C8_left_right_left_left_left_right = variables.get("Cupon");
IntNumericExpression C8_left_right_left_left_left=factory.sum(C8_left_right_left_left_left_left, C8_left_right_left_left_left_right);	

Identifier C8_left_right_left_left_right = variables.get("Cheque");
IntNumericExpression C8_left_right_left_left=factory.sum(C8_left_right_left_left_left, C8_left_right_left_left_right);	

NumericIdentifier C8_left_right_left_right = getValue("1");
IntBooleanExpression C8_left_right_left=
factory.greaterOrEqualsThan(C8_left_right_left_left, C8_left_right_left_right);


Identifier C8_left_right_right_left = variables.get("Pago_Online");

NumericIdentifier C8_left_right_right_right = getValue("1");
IntBooleanExpression C8_left_right_right=
factory.greaterOrEqualsThan(C8_left_right_right_left, C8_left_right_right_right);
IntBooleanExpression C8_left_right=factory.and(C8_left_right_left, C8_left_right_right);		
IntBooleanExpression C8_left=factory.implies(C8_left_left, C8_left_right);		






Identifier C8_right_left_left_left_left_left = variables.get("PayPal");

Identifier C8_right_left_left_left_left_right = variables.get("Tarjeta_Credito");
IntNumericExpression C8_right_left_left_left_left=factory.sum(C8_right_left_left_left_left_left, C8_right_left_left_left_left_right);	

Identifier C8_right_left_left_left_right = variables.get("Tarjeta_Debito");
IntNumericExpression C8_right_left_left_left=factory.sum(C8_right_left_left_left_left, C8_right_left_left_left_right);	

Identifier C8_right_left_left_right = variables.get("Cupon");
IntNumericExpression C8_right_left_left=factory.sum(C8_right_left_left_left, C8_right_left_left_right);	

Identifier C8_right_left_right = variables.get("Cheque");
IntNumericExpression C8_right_left=factory.sum(C8_right_left_left, C8_right_left_right);	

NumericIdentifier C8_right_right = getValue("5");
IntBooleanExpression C8_right=
factory.lessOrEqualsThan(C8_right_left, C8_right_right);
IntBooleanExpression C8=factory.implies(C8_left, C8_right);		
constraints.put("C8", C8);
hlclProgram.add(C8);
//
//declaring constraint C10






Identifier C10_left_left_left_left_left = variables.get("Factura_Fisica");

Identifier C10_left_left_left_left_right = variables.get("Facturacion");
IntBooleanExpression C10_left_left_left_left=factory.implies(C10_left_left_left_left_left, C10_left_left_left_left_right);		


Identifier C10_left_left_left_right_left = variables.get("Factura_Online");

Identifier C10_left_left_left_right_right = variables.get("Facturacion");
IntBooleanExpression C10_left_left_left_right=factory.implies(C10_left_left_left_right_left, C10_left_left_left_right_right);		
IntBooleanExpression C10_left_left_left=factory.and(C10_left_left_left_left, C10_left_left_left_right);		


Identifier C10_left_left_right_left = variables.get("Facturacion");

NumericIdentifier C10_left_left_right_right = getValue("1");
IntBooleanExpression C10_left_left_right=
factory.greaterOrEqualsThan(C10_left_left_right_left, C10_left_left_right_right);
IntBooleanExpression C10_left_left=factory.and(C10_left_left_left, C10_left_left_right);		




Identifier C10_left_right_left_left_left = variables.get("Factura_Fisica");

Identifier C10_left_right_left_left_right = variables.get("Factura_Online");
IntNumericExpression C10_left_right_left_left=factory.sum(C10_left_right_left_left_left, C10_left_right_left_left_right);	

NumericIdentifier C10_left_right_left_right = getValue("1");
IntBooleanExpression C10_left_right_left=
factory.greaterOrEqualsThan(C10_left_right_left_left, C10_left_right_left_right);


Identifier C10_left_right_right_left = variables.get("Facturacion");

NumericIdentifier C10_left_right_right_right = getValue("1");
IntBooleanExpression C10_left_right_right=
factory.greaterOrEqualsThan(C10_left_right_right_left, C10_left_right_right_right);
IntBooleanExpression C10_left_right=factory.and(C10_left_right_left, C10_left_right_right);		
IntBooleanExpression C10_left=factory.implies(C10_left_left, C10_left_right);		



Identifier C10_right_left_left = variables.get("Factura_Fisica");

Identifier C10_right_left_right = variables.get("Factura_Online");
IntNumericExpression C10_right_left=factory.sum(C10_right_left_left, C10_right_left_right);	

NumericIdentifier C10_right_right = getValue("1");
IntBooleanExpression C10_right=
factory.lessOrEqualsThan(C10_right_left, C10_right_right);
IntBooleanExpression C10=factory.implies(C10_left, C10_right);		
constraints.put("C10", C10);
hlclProgram.add(C10);
//
//declaring constraint C14







Identifier C14_left_left_left_left_left_left = variables.get("Carro_de_Compras");

Identifier C14_left_left_left_left_left_right = variables.get("Compras");
IntBooleanExpression C14_left_left_left_left_left=factory.implies(C14_left_left_left_left_left_left, C14_left_left_left_left_left_right);		


Identifier C14_left_left_left_left_right_left = variables.get("Recuperar_Compras");

Identifier C14_left_left_left_left_right_right = variables.get("Compras");
IntBooleanExpression C14_left_left_left_left_right=factory.implies(C14_left_left_left_left_right_left, C14_left_left_left_left_right_right);		
IntBooleanExpression C14_left_left_left_left=factory.and(C14_left_left_left_left_left, C14_left_left_left_left_right);		


Identifier C14_left_left_left_right_left = variables.get("Historial_de_Compras");

Identifier C14_left_left_left_right_right = variables.get("Compras");
IntBooleanExpression C14_left_left_left_right=factory.implies(C14_left_left_left_right_left, C14_left_left_left_right_right);		
IntBooleanExpression C14_left_left_left=factory.and(C14_left_left_left_left, C14_left_left_left_right);		


Identifier C14_left_left_right_left = variables.get("Compras");

NumericIdentifier C14_left_left_right_right = getValue("1");
IntBooleanExpression C14_left_left_right=
factory.greaterOrEqualsThan(C14_left_left_right_left, C14_left_left_right_right);
IntBooleanExpression C14_left_left=factory.and(C14_left_left_left, C14_left_left_right);		





Identifier C14_left_right_left_left_left_left = variables.get("Carro_de_Compras");

Identifier C14_left_right_left_left_left_right = variables.get("Recuperar_Compras");
IntNumericExpression C14_left_right_left_left_left=factory.sum(C14_left_right_left_left_left_left, C14_left_right_left_left_left_right);	

Identifier C14_left_right_left_left_right = variables.get("Historial_de_Compras");
IntNumericExpression C14_left_right_left_left=factory.sum(C14_left_right_left_left_left, C14_left_right_left_left_right);	

NumericIdentifier C14_left_right_left_right = getValue("1");
IntBooleanExpression C14_left_right_left=
factory.greaterOrEqualsThan(C14_left_right_left_left, C14_left_right_left_right);


Identifier C14_left_right_right_left = variables.get("Compras");

NumericIdentifier C14_left_right_right_right = getValue("1");
IntBooleanExpression C14_left_right_right=
factory.greaterOrEqualsThan(C14_left_right_right_left, C14_left_right_right_right);
IntBooleanExpression C14_left_right=factory.and(C14_left_right_left, C14_left_right_right);		
IntBooleanExpression C14_left=factory.implies(C14_left_left, C14_left_right);		




Identifier C14_right_left_left_left = variables.get("Carro_de_Compras");

Identifier C14_right_left_left_right = variables.get("Recuperar_Compras");
IntNumericExpression C14_right_left_left=factory.sum(C14_right_left_left_left, C14_right_left_left_right);	

Identifier C14_right_left_right = variables.get("Historial_de_Compras");
IntNumericExpression C14_right_left=factory.sum(C14_right_left_left, C14_right_left_right);	

NumericIdentifier C14_right_right = getValue("3");
IntBooleanExpression C14_right=
factory.lessOrEqualsThan(C14_right_left, C14_right_right);
IntBooleanExpression C14=factory.implies(C14_left, C14_right);		
constraints.put("C14", C14);
hlclProgram.add(C14);
//
//declaring constraint C22






Identifier C22_left_left_left_left_left = variables.get("Por_Correo_Electronico");

Identifier C22_left_left_left_left_right = variables.get("Compartir");
IntBooleanExpression C22_left_left_left_left=factory.implies(C22_left_left_left_left_left, C22_left_left_left_left_right);		


Identifier C22_left_left_left_right_left = variables.get("Por_Redes_Sociales");

Identifier C22_left_left_left_right_right = variables.get("Compartir");
IntBooleanExpression C22_left_left_left_right=factory.implies(C22_left_left_left_right_left, C22_left_left_left_right_right);		
IntBooleanExpression C22_left_left_left=factory.and(C22_left_left_left_left, C22_left_left_left_right);		


Identifier C22_left_left_right_left = variables.get("Compartir");

NumericIdentifier C22_left_left_right_right = getValue("1");
IntBooleanExpression C22_left_left_right=
factory.greaterOrEqualsThan(C22_left_left_right_left, C22_left_left_right_right);
IntBooleanExpression C22_left_left=factory.and(C22_left_left_left, C22_left_left_right);		




Identifier C22_left_right_left_left_left = variables.get("Por_Correo_Electronico");

Identifier C22_left_right_left_left_right = variables.get("Por_Redes_Sociales");
IntNumericExpression C22_left_right_left_left=factory.sum(C22_left_right_left_left_left, C22_left_right_left_left_right);	

NumericIdentifier C22_left_right_left_right = getValue("1");
IntBooleanExpression C22_left_right_left=
factory.greaterOrEqualsThan(C22_left_right_left_left, C22_left_right_left_right);


Identifier C22_left_right_right_left = variables.get("Compartir");

NumericIdentifier C22_left_right_right_right = getValue("1");
IntBooleanExpression C22_left_right_right=
factory.greaterOrEqualsThan(C22_left_right_right_left, C22_left_right_right_right);
IntBooleanExpression C22_left_right=factory.and(C22_left_right_left, C22_left_right_right);		
IntBooleanExpression C22_left=factory.implies(C22_left_left, C22_left_right);		



Identifier C22_right_left_left = variables.get("Por_Correo_Electronico");

Identifier C22_right_left_right = variables.get("Por_Redes_Sociales");
IntNumericExpression C22_right_left=factory.sum(C22_right_left_left, C22_right_left_right);	

NumericIdentifier C22_right_right = getValue("2");
IntBooleanExpression C22_right=
factory.lessOrEqualsThan(C22_right_left, C22_right_right);
IntBooleanExpression C22=factory.implies(C22_left, C22_right);		
constraints.put("C22", C22);
hlclProgram.add(C22);
//
//declaring constraint C24






Identifier C24_left_left_left_left_left = variables.get("Publicidad_Externa");

Identifier C24_left_left_left_left_right = variables.get("Publicidad_Productos");
IntBooleanExpression C24_left_left_left_left=factory.implies(C24_left_left_left_left_left, C24_left_left_left_left_right);		


Identifier C24_left_left_left_right_left = variables.get("Publicidad_Interna");

Identifier C24_left_left_left_right_right = variables.get("Publicidad_Productos");
IntBooleanExpression C24_left_left_left_right=factory.implies(C24_left_left_left_right_left, C24_left_left_left_right_right);		
IntBooleanExpression C24_left_left_left=factory.and(C24_left_left_left_left, C24_left_left_left_right);		


Identifier C24_left_left_right_left = variables.get("Publicidad_Productos");

NumericIdentifier C24_left_left_right_right = getValue("1");
IntBooleanExpression C24_left_left_right=
factory.greaterOrEqualsThan(C24_left_left_right_left, C24_left_left_right_right);
IntBooleanExpression C24_left_left=factory.and(C24_left_left_left, C24_left_left_right);		




Identifier C24_left_right_left_left_left = variables.get("Publicidad_Externa");

Identifier C24_left_right_left_left_right = variables.get("Publicidad_Interna");
IntNumericExpression C24_left_right_left_left=factory.sum(C24_left_right_left_left_left, C24_left_right_left_left_right);	

NumericIdentifier C24_left_right_left_right = getValue("1");
IntBooleanExpression C24_left_right_left=
factory.greaterOrEqualsThan(C24_left_right_left_left, C24_left_right_left_right);


Identifier C24_left_right_right_left = variables.get("Publicidad_Productos");

NumericIdentifier C24_left_right_right_right = getValue("1");
IntBooleanExpression C24_left_right_right=
factory.greaterOrEqualsThan(C24_left_right_right_left, C24_left_right_right_right);
IntBooleanExpression C24_left_right=factory.and(C24_left_right_left, C24_left_right_right);		
IntBooleanExpression C24_left=factory.implies(C24_left_left, C24_left_right);		



Identifier C24_right_left_left = variables.get("Publicidad_Externa");

Identifier C24_right_left_right = variables.get("Publicidad_Interna");
IntNumericExpression C24_right_left=factory.sum(C24_right_left_left, C24_right_left_right);	

NumericIdentifier C24_right_right = getValue("2");
IntBooleanExpression C24_right=
factory.lessOrEqualsThan(C24_right_left, C24_right_right);
IntBooleanExpression C24=factory.implies(C24_left, C24_right);		
constraints.put("C24", C24);
hlclProgram.add(C24);
//
//declaring constraint C30






Identifier C30_left_left_left_left_left = variables.get("Gestion_de_la_Estructura");

Identifier C30_left_left_left_left_right = variables.get("Administracion_Pagina");
IntBooleanExpression C30_left_left_left_left=factory.implies(C30_left_left_left_left_left, C30_left_left_left_left_right);		


Identifier C30_left_left_left_right_left = variables.get("Gestion_del_Contenido");

Identifier C30_left_left_left_right_right = variables.get("Administracion_Pagina");
IntBooleanExpression C30_left_left_left_right=factory.implies(C30_left_left_left_right_left, C30_left_left_left_right_right);		
IntBooleanExpression C30_left_left_left=factory.and(C30_left_left_left_left, C30_left_left_left_right);		


Identifier C30_left_left_right_left = variables.get("Administracion_Pagina");

NumericIdentifier C30_left_left_right_right = getValue("1");
IntBooleanExpression C30_left_left_right=
factory.greaterOrEqualsThan(C30_left_left_right_left, C30_left_left_right_right);
IntBooleanExpression C30_left_left=factory.and(C30_left_left_left, C30_left_left_right);		




Identifier C30_left_right_left_left_left = variables.get("Gestion_de_la_Estructura");

Identifier C30_left_right_left_left_right = variables.get("Gestion_del_Contenido");
IntNumericExpression C30_left_right_left_left=factory.sum(C30_left_right_left_left_left, C30_left_right_left_left_right);	

NumericIdentifier C30_left_right_left_right = getValue("1");
IntBooleanExpression C30_left_right_left=
factory.greaterOrEqualsThan(C30_left_right_left_left, C30_left_right_left_right);


Identifier C30_left_right_right_left = variables.get("Administracion_Pagina");

NumericIdentifier C30_left_right_right_right = getValue("1");
IntBooleanExpression C30_left_right_right=
factory.greaterOrEqualsThan(C30_left_right_right_left, C30_left_right_right_right);
IntBooleanExpression C30_left_right=factory.and(C30_left_right_left, C30_left_right_right);		
IntBooleanExpression C30_left=factory.implies(C30_left_left, C30_left_right);		



Identifier C30_right_left_left = variables.get("Gestion_de_la_Estructura");

Identifier C30_right_left_right = variables.get("Gestion_del_Contenido");
IntNumericExpression C30_right_left=factory.sum(C30_right_left_left, C30_right_left_right);	

NumericIdentifier C30_right_right = getValue("2");
IntBooleanExpression C30_right=
factory.lessOrEqualsThan(C30_right_left, C30_right_right);
IntBooleanExpression C30=factory.implies(C30_left, C30_right);		
constraints.put("C30", C30);
hlclProgram.add(C30);
//
//declaring constraint C32






Identifier C32_left_left_left_left_left = variables.get("Autenticacion_Externa");

Identifier C32_left_left_left_left_right = variables.get("Usuarios");
IntBooleanExpression C32_left_left_left_left=factory.implies(C32_left_left_left_left_left, C32_left_left_left_left_right);		


Identifier C32_left_left_left_right_left = variables.get("Autenticacion_Interna");

Identifier C32_left_left_left_right_right = variables.get("Usuarios");
IntBooleanExpression C32_left_left_left_right=factory.implies(C32_left_left_left_right_left, C32_left_left_left_right_right);		
IntBooleanExpression C32_left_left_left=factory.and(C32_left_left_left_left, C32_left_left_left_right);		


Identifier C32_left_left_right_left = variables.get("Usuarios");

NumericIdentifier C32_left_left_right_right = getValue("1");
IntBooleanExpression C32_left_left_right=
factory.greaterOrEqualsThan(C32_left_left_right_left, C32_left_left_right_right);
IntBooleanExpression C32_left_left=factory.and(C32_left_left_left, C32_left_left_right);		




Identifier C32_left_right_left_left_left = variables.get("Autenticacion_Externa");

Identifier C32_left_right_left_left_right = variables.get("Autenticacion_Interna");
IntNumericExpression C32_left_right_left_left=factory.sum(C32_left_right_left_left_left, C32_left_right_left_left_right);	

NumericIdentifier C32_left_right_left_right = getValue("1");
IntBooleanExpression C32_left_right_left=
factory.greaterOrEqualsThan(C32_left_right_left_left, C32_left_right_left_right);


Identifier C32_left_right_right_left = variables.get("Usuarios");

NumericIdentifier C32_left_right_right_right = getValue("1");
IntBooleanExpression C32_left_right_right=
factory.greaterOrEqualsThan(C32_left_right_right_left, C32_left_right_right_right);
IntBooleanExpression C32_left_right=factory.and(C32_left_right_left, C32_left_right_right);		
IntBooleanExpression C32_left=factory.implies(C32_left_left, C32_left_right);		



Identifier C32_right_left_left = variables.get("Autenticacion_Externa");

Identifier C32_right_left_right = variables.get("Autenticacion_Interna");
IntNumericExpression C32_right_left=factory.sum(C32_right_left_left, C32_right_left_right);	

NumericIdentifier C32_right_right = getValue("1");
IntBooleanExpression C32_right=
factory.lessOrEqualsThan(C32_right_left, C32_right_right);
IntBooleanExpression C32=factory.implies(C32_left, C32_right);		
constraints.put("C32", C32);
hlclProgram.add(C32);
//
//declaring constraint C34










Identifier C34_left_left_left_left_left_left_left_left_left = variables.get("Comentarios");

Identifier C34_left_left_left_left_left_left_left_left_right = variables.get("Servicio_al_Cliente");
IntBooleanExpression C34_left_left_left_left_left_left_left_left=factory.implies(C34_left_left_left_left_left_left_left_left_left, C34_left_left_left_left_left_left_left_left_right);		


Identifier C34_left_left_left_left_left_left_left_right_left = variables.get("Ayuda_en_Linea");

Identifier C34_left_left_left_left_left_left_left_right_right = variables.get("Servicio_al_Cliente");
IntBooleanExpression C34_left_left_left_left_left_left_left_right=factory.implies(C34_left_left_left_left_left_left_left_right_left, C34_left_left_left_left_left_left_left_right_right);		
IntBooleanExpression C34_left_left_left_left_left_left_left=factory.and(C34_left_left_left_left_left_left_left_left, C34_left_left_left_left_left_left_left_right);		


Identifier C34_left_left_left_left_left_left_right_left = variables.get("Buzon_de_Sugerencias");

Identifier C34_left_left_left_left_left_left_right_right = variables.get("Servicio_al_Cliente");
IntBooleanExpression C34_left_left_left_left_left_left_right=factory.implies(C34_left_left_left_left_left_left_right_left, C34_left_left_left_left_left_left_right_right);		
IntBooleanExpression C34_left_left_left_left_left_left=factory.and(C34_left_left_left_left_left_left_left, C34_left_left_left_left_left_left_right);		


Identifier C34_left_left_left_left_left_right_left = variables.get("Lista_de_Deseos");

Identifier C34_left_left_left_left_left_right_right = variables.get("Servicio_al_Cliente");
IntBooleanExpression C34_left_left_left_left_left_right=factory.implies(C34_left_left_left_left_left_right_left, C34_left_left_left_left_left_right_right);		
IntBooleanExpression C34_left_left_left_left_left=factory.and(C34_left_left_left_left_left_left, C34_left_left_left_left_left_right);		


Identifier C34_left_left_left_left_right_left = variables.get("Trazabilidad_de_Pedidos");

Identifier C34_left_left_left_left_right_right = variables.get("Servicio_al_Cliente");
IntBooleanExpression C34_left_left_left_left_right=factory.implies(C34_left_left_left_left_right_left, C34_left_left_left_left_right_right);		
IntBooleanExpression C34_left_left_left_left=factory.and(C34_left_left_left_left_left, C34_left_left_left_left_right);		


Identifier C34_left_left_left_right_left = variables.get("Calificacion_de_Productos");

Identifier C34_left_left_left_right_right = variables.get("Servicio_al_Cliente");
IntBooleanExpression C34_left_left_left_right=factory.implies(C34_left_left_left_right_left, C34_left_left_left_right_right);		
IntBooleanExpression C34_left_left_left=factory.and(C34_left_left_left_left, C34_left_left_left_right);		


Identifier C34_left_left_right_left = variables.get("Servicio_al_Cliente");

NumericIdentifier C34_left_left_right_right = getValue("1");
IntBooleanExpression C34_left_left_right=
factory.greaterOrEqualsThan(C34_left_left_right_left, C34_left_left_right_right);
IntBooleanExpression C34_left_left=factory.and(C34_left_left_left, C34_left_left_right);		








Identifier C34_left_right_left_left_left_left_left_left_left = variables.get("Comentarios");

Identifier C34_left_right_left_left_left_left_left_left_right = variables.get("Ayuda_en_Linea");
IntNumericExpression C34_left_right_left_left_left_left_left_left=factory.sum(C34_left_right_left_left_left_left_left_left_left, C34_left_right_left_left_left_left_left_left_right);	

Identifier C34_left_right_left_left_left_left_left_right = variables.get("Buzon_de_Sugerencias");
IntNumericExpression C34_left_right_left_left_left_left_left=factory.sum(C34_left_right_left_left_left_left_left_left, C34_left_right_left_left_left_left_left_right);	

Identifier C34_left_right_left_left_left_left_right = variables.get("Lista_de_Deseos");
IntNumericExpression C34_left_right_left_left_left_left=factory.sum(C34_left_right_left_left_left_left_left, C34_left_right_left_left_left_left_right);	

Identifier C34_left_right_left_left_left_right = variables.get("Trazabilidad_de_Pedidos");
IntNumericExpression C34_left_right_left_left_left=factory.sum(C34_left_right_left_left_left_left, C34_left_right_left_left_left_right);	

Identifier C34_left_right_left_left_right = variables.get("Calificacion_de_Productos");
IntNumericExpression C34_left_right_left_left=factory.sum(C34_left_right_left_left_left, C34_left_right_left_left_right);	

NumericIdentifier C34_left_right_left_right = getValue("1");
IntBooleanExpression C34_left_right_left=
factory.greaterOrEqualsThan(C34_left_right_left_left, C34_left_right_left_right);


Identifier C34_left_right_right_left = variables.get("Servicio_al_Cliente");

NumericIdentifier C34_left_right_right_right = getValue("1");
IntBooleanExpression C34_left_right_right=
factory.greaterOrEqualsThan(C34_left_right_right_left, C34_left_right_right_right);
IntBooleanExpression C34_left_right=factory.and(C34_left_right_left, C34_left_right_right);		
IntBooleanExpression C34_left=factory.implies(C34_left_left, C34_left_right);		







Identifier C34_right_left_left_left_left_left_left = variables.get("Comentarios");

Identifier C34_right_left_left_left_left_left_right = variables.get("Ayuda_en_Linea");
IntNumericExpression C34_right_left_left_left_left_left=factory.sum(C34_right_left_left_left_left_left_left, C34_right_left_left_left_left_left_right);	

Identifier C34_right_left_left_left_left_right = variables.get("Buzon_de_Sugerencias");
IntNumericExpression C34_right_left_left_left_left=factory.sum(C34_right_left_left_left_left_left, C34_right_left_left_left_left_right);	

Identifier C34_right_left_left_left_right = variables.get("Lista_de_Deseos");
IntNumericExpression C34_right_left_left_left=factory.sum(C34_right_left_left_left_left, C34_right_left_left_left_right);	

Identifier C34_right_left_left_right = variables.get("Trazabilidad_de_Pedidos");
IntNumericExpression C34_right_left_left=factory.sum(C34_right_left_left_left, C34_right_left_left_right);	

Identifier C34_right_left_right = variables.get("Calificacion_de_Productos");
IntNumericExpression C34_right_left=factory.sum(C34_right_left_left, C34_right_left_right);	

NumericIdentifier C34_right_right = getValue("6");
IntBooleanExpression C34_right=
factory.lessOrEqualsThan(C34_right_left, C34_right_right);
IntBooleanExpression C34=factory.implies(C34_left, C34_right);		
constraints.put("C34", C34);
hlclProgram.add(C34);
	}
	public boolean evaluateSatisfiability(){
		// the output
		boolean evaluation= false;
		// //to transform the hllcl program into a prolog  file, 
		// //these lines are commented because they are useful for debugging 
		Hlcl2SWIProlog swiPrologTransformer = new Hlcl2SWIProlog(); 
		prologProgram = swiPrologTransformer.transform(hlclProgram);
		System.out.println(prologProgram);		
		// an instance of the solver for Swiprolog 
		swiSolver= new SWIPrologSolver();
		swiSolver.setHLCLProgram(hlclProgram); //passing the hlcl program to the solver
		swiSolver.solve(); // This methhod prepares the solver 
		System.out.println("before the solution");
		SolverSolution sol=  swiSolver.getSolution(); 
		System.out.println(sol.toString());
//		List<SolverSolution> solutions = swiSolver.getAllSolutions(); // Consulting if the solver has one solution
//			evaluation= solutions.size()>0;
//			for (SolverSolution solverSolution : solutions) {
//				System.out.println(solverSolution.toString());
//			}	
			System.out.println("after the solution");
		return evaluation;
	}
	/** 
	* To obtain the NumericIdentifier representation of a value 
	* @param id the string with the value 
	* @return the NumericIdentifier 
	*/
	public NumericIdentifier getValue(String id) {	NumericIdentifier value= numbers.get(id); 
	 	if (value==null) { 
	 		if (id.equals("selected")) { 
	 			value= numbers.get("1"); 
	 		} 
	 		else if(id.equals("unselected")) {
				value= numbers.get("0"); 
			} 
			else { 
				value= factory.number(Integer.parseInt(id)); 
				numbers.put(id, value);
			}
	 	} 
	 	return value; 
	 } 
		public String getModelName() {
			return modelName;
		}
		public void setModelName(String modelName) {
			this.modelName = modelName;
		}
		public HlclFactory getFactory() {
			return factory;
		}
		public void setFactory(HlclFactory factory) {
			this.factory = factory;
		}
		public HlclProgram getHlclProgram() {
			return hlclProgram;
		}
		public void setHlclProgram(HlclProgram hlclProgram) {
			this.hlclProgram = hlclProgram;
		}
} 	