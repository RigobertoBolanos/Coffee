//Java imports
import java.util.HashMap;
import java.util.List;
//imports for hlcl 
import com.variamos.hlcl.core.HlclProgram; 
import com.variamos.hlcl.model.expressions.HlclFactory; 
import com.variamos.hlcl.model.domains.BinaryDomain;
import com.variamos.hlcl.model.domains.IntervalDomain;
import com.variamos.hlcl.model.domains.RangeDomain;
import com.variamos.hlcl.model.domains.StringDomain;
import com.variamos.hlcl.model.expressions.Identifier;
import com.variamos.hlcl.model.expressions.IntBooleanExpression;
import com.variamos.hlcl.model.expressions.NumericIdentifier;
import com.variamos.hlcl.model.expressions.SymbolicExpression;
import com.variamos.hlcl.model.expressions.IntNumericExpression;

//imports for solver
import com.variamos.solver.core.SWIPrologSolver;
import com.variamos.solver.core.compiler.Hlcl2SWIProlog;
import com.variamos.solver.model.SolverSolution;

/**
* This class is automatically generated from a product line model described in 
* constraint programming HLCL
* @author Angela Villota 
* @version CP-HLCL Version1
*
*/
public class GPL { 			
	
	private String modelName;
	private HlclFactory factory;
	private HlclProgram hlclProgram;
	private SWIPrologSolver swiSolver;
	private String prologProgram;
	private HashMap<String,IntBooleanExpression> constraints;
	private HashMap<String,Identifier> variables;
	private HashMap<String,NumericIdentifier> numbers;
	/**
	* This is an autogenerated method* Constructor method
	* @param modelName is the name of the model in the  CP-HLCL specification
	*/
	public GPL(String modelName){ 				
		
		this.modelName= modelName;
		hlclProgram= new HlclProgram();
		factory = new HlclFactory();
		variables= new HashMap<String,Identifier>();
		constraints= new HashMap<String,IntBooleanExpression>();
		numbers= new HashMap<String,NumericIdentifier>();
		NumericIdentifier one = factory.number(1);
		NumericIdentifier zero= factory.number(0);
		numbers.put("1", one);
		numbers.put("0", zero);
	} 			
	public static void main(String[] args) {
		GPL obj = new GPL("GPL");
		obj.run();
	}
	public void run(){
		// first obtain a HlclProgram from the specification
		transformVars();
		transformConstraints(); 
		// use the solver to solve the constraint program
		evaluateSatisfiability();
		//show the output
		System.out.println(prologProgram);
	}
	public void transformVars() {
//declaring variable GPL
Identifier GPL = factory.newIdentifier("GPL");
  			BinaryDomain GPLDom= new BinaryDomain();
GPL.setDomain(GPLDom);	
variables.put("GPL", GPL); //including the variable in the map
//declaring variable GType
Identifier GType = factory.newIdentifier("GType");
  			BinaryDomain GTypeDom= new BinaryDomain();
GType.setDomain(GTypeDom);	
variables.put("GType", GType); //including the variable in the map
//declaring variable Weight
Identifier Weight = factory.newIdentifier("Weight");
  			BinaryDomain WeightDom= new BinaryDomain();
Weight.setDomain(WeightDom);	
variables.put("Weight", Weight); //including the variable in the map
//declaring variable Search
Identifier Search = factory.newIdentifier("Search");
  			BinaryDomain SearchDom= new BinaryDomain();
Search.setDomain(SearchDom);	
variables.put("Search", Search); //including the variable in the map
//declaring variable Algorithms
Identifier Algorithms = factory.newIdentifier("Algorithms");
  			BinaryDomain AlgorithmsDom= new BinaryDomain();
Algorithms.setDomain(AlgorithmsDom);	
variables.put("Algorithms", Algorithms); //including the variable in the map
//declaring variable Directed
Identifier Directed = factory.newIdentifier("Directed");
  			BinaryDomain DirectedDom= new BinaryDomain();
Directed.setDomain(DirectedDom);	
variables.put("Directed", Directed); //including the variable in the map
//declaring variable Undirected
Identifier Undirected = factory.newIdentifier("Undirected");
  			BinaryDomain UndirectedDom= new BinaryDomain();
Undirected.setDomain(UndirectedDom);	
variables.put("Undirected", Undirected); //including the variable in the map
//declaring variable Weighted
Identifier Weighted = factory.newIdentifier("Weighted");
  			BinaryDomain WeightedDom= new BinaryDomain();
Weighted.setDomain(WeightedDom);	
variables.put("Weighted", Weighted); //including the variable in the map
//declaring variable Unweighted
Identifier Unweighted = factory.newIdentifier("Unweighted");
  			BinaryDomain UnweightedDom= new BinaryDomain();
Unweighted.setDomain(UnweightedDom);	
variables.put("Unweighted", Unweighted); //including the variable in the map
//declaring variable BFS
Identifier BFS = factory.newIdentifier("BFS");
  			BinaryDomain BFSDom= new BinaryDomain();
BFS.setDomain(BFSDom);	
variables.put("BFS", BFS); //including the variable in the map
//declaring variable DFS
Identifier DFS = factory.newIdentifier("DFS");
  			BinaryDomain DFSDom= new BinaryDomain();
DFS.setDomain(DFSDom);	
variables.put("DFS", DFS); //including the variable in the map
//declaring variable Kruskal
Identifier Kruskal = factory.newIdentifier("Kruskal");
  			BinaryDomain KruskalDom= new BinaryDomain();
Kruskal.setDomain(KruskalDom);	
variables.put("Kruskal", Kruskal); //including the variable in the map
//declaring variable CycleCheck
Identifier CycleCheck = factory.newIdentifier("CycleCheck");
  			BinaryDomain CycleCheckDom= new BinaryDomain();
CycleCheck.setDomain(CycleCheckDom);	
variables.put("CycleCheck", CycleCheck); //including the variable in the map
//declaring variable StronglyCon
Identifier StronglyCon = factory.newIdentifier("StronglyCon");
  			BinaryDomain StronglyConDom= new BinaryDomain();
StronglyCon.setDomain(StronglyConDom);	
variables.put("StronglyCon", StronglyCon); //including the variable in the map
//declaring variable VertexNum
Identifier VertexNum = factory.newIdentifier("VertexNum");
  			BinaryDomain VertexNumDom= new BinaryDomain();
VertexNum.setDomain(VertexNumDom);	
variables.put("VertexNum", VertexNum); //including the variable in the map
//declaring variable ConnComp
Identifier ConnComp = factory.newIdentifier("ConnComp");
  			BinaryDomain ConnCompDom= new BinaryDomain();
ConnComp.setDomain(ConnCompDom);	
variables.put("ConnComp", ConnComp); //including the variable in the map
//declaring variable SSP
Identifier SSP = factory.newIdentifier("SSP");
  			BinaryDomain SSPDom= new BinaryDomain();
SSP.setDomain(SSPDom);	
variables.put("SSP", SSP); //including the variable in the map
//declaring variable Prim
Identifier Prim = factory.newIdentifier("Prim");
  			BinaryDomain PrimDom= new BinaryDomain();
Prim.setDomain(PrimDom);	
variables.put("Prim", Prim); //including the variable in the map
//declaring variable MST
Identifier MST = factory.newIdentifier("MST");
  			BinaryDomain MSTDom= new BinaryDomain();
MST.setDomain(MSTDom);	
variables.put("MST", MST); //including the variable in the map
	}
	public void transformConstraints() {
//
//declaring constraint C_GPL


Identifier C_GPL_left = variables.get("GPL");

NumericIdentifier C_GPL_right = getValue("1");
IntBooleanExpression C_GPL=
factory.equals(C_GPL_left, C_GPL_right);
constraints.put("C_GPL", C_GPL);
hlclProgram.add(C_GPL);
//
//declaring constraint c2


Identifier c2_left = variables.get("GPL");

Identifier c2_right = variables.get("GType");
IntBooleanExpression c2=
factory.equals(c2_left, c2_right);
constraints.put("c2", c2);
hlclProgram.add(c2);
//
//declaring constraint c3


Identifier c3_left = variables.get("GPL");

Identifier c3_right = variables.get("Algorithms");
IntBooleanExpression c3=
factory.equals(c3_left, c3_right);
constraints.put("c3", c3);
hlclProgram.add(c3);
//
//declaring constraint c4


Identifier c4_left = variables.get("GPL");

Identifier c4_right = variables.get("Weight");
IntBooleanExpression c4=
factory.greaterOrEqualsThan(c4_left, c4_right);
constraints.put("c4", c4);
hlclProgram.add(c4);
//
//declaring constraint c5


Identifier c5_left = variables.get("GPL");

Identifier c5_right = variables.get("Search");
IntBooleanExpression c5=
factory.greaterOrEqualsThan(c5_left, c5_right);
constraints.put("c5", c5);
hlclProgram.add(c5);
//
//declaring constraint c6






Identifier c6_left_left_left_left_left = variables.get("Directed");

Identifier c6_left_left_left_left_right = variables.get("GType");
IntBooleanExpression c6_left_left_left_left=factory.implies(c6_left_left_left_left_left, c6_left_left_left_left_right);		


Identifier c6_left_left_left_right_left = variables.get("Undirected");

Identifier c6_left_left_left_right_right = variables.get("GType");
IntBooleanExpression c6_left_left_left_right=factory.implies(c6_left_left_left_right_left, c6_left_left_left_right_right);		
IntBooleanExpression c6_left_left_left=factory.and(c6_left_left_left_left, c6_left_left_left_right);		


Identifier c6_left_left_right_left = variables.get("GType");

NumericIdentifier c6_left_left_right_right = getValue("1");
IntBooleanExpression c6_left_left_right=
factory.greaterOrEqualsThan(c6_left_left_right_left, c6_left_left_right_right);
IntBooleanExpression c6_left_left=factory.and(c6_left_left_left, c6_left_left_right);		




Identifier c6_left_right_left_left_left = variables.get("Directed");

Identifier c6_left_right_left_left_right = variables.get("Undirected");
IntNumericExpression c6_left_right_left_left=factory.sum(c6_left_right_left_left_left, c6_left_right_left_left_right);	

NumericIdentifier c6_left_right_left_right = getValue("1");
IntBooleanExpression c6_left_right_left=
factory.greaterOrEqualsThan(c6_left_right_left_left, c6_left_right_left_right);


Identifier c6_left_right_right_left = variables.get("GType");

NumericIdentifier c6_left_right_right_right = getValue("1");
IntBooleanExpression c6_left_right_right=
factory.greaterOrEqualsThan(c6_left_right_right_left, c6_left_right_right_right);
IntBooleanExpression c6_left_right=factory.and(c6_left_right_left, c6_left_right_right);		
IntBooleanExpression c6_left=factory.implies(c6_left_left, c6_left_right);		



Identifier c6_right_left_left = variables.get("Directed");

Identifier c6_right_left_right = variables.get("Undirected");
IntNumericExpression c6_right_left=factory.sum(c6_right_left_left, c6_right_left_right);	

NumericIdentifier c6_right_right = getValue("1");
IntBooleanExpression c6_right=
factory.lessOrEqualsThan(c6_right_left, c6_right_right);
IntBooleanExpression c6=factory.implies(c6_left, c6_right);		
constraints.put("c6", c6);
hlclProgram.add(c6);
//
//declaring constraint c7






Identifier c7_left_left_left_left_left = variables.get("Weighted");

Identifier c7_left_left_left_left_right = variables.get("Weight");
IntBooleanExpression c7_left_left_left_left=factory.implies(c7_left_left_left_left_left, c7_left_left_left_left_right);		


Identifier c7_left_left_left_right_left = variables.get("Unweighted");

Identifier c7_left_left_left_right_right = variables.get("Weight");
IntBooleanExpression c7_left_left_left_right=factory.implies(c7_left_left_left_right_left, c7_left_left_left_right_right);		
IntBooleanExpression c7_left_left_left=factory.and(c7_left_left_left_left, c7_left_left_left_right);		


Identifier c7_left_left_right_left = variables.get("Weight");

NumericIdentifier c7_left_left_right_right = getValue("1");
IntBooleanExpression c7_left_left_right=
factory.greaterOrEqualsThan(c7_left_left_right_left, c7_left_left_right_right);
IntBooleanExpression c7_left_left=factory.and(c7_left_left_left, c7_left_left_right);		




Identifier c7_left_right_left_left_left = variables.get("Weighted");

Identifier c7_left_right_left_left_right = variables.get("Unweighted");
IntNumericExpression c7_left_right_left_left=factory.sum(c7_left_right_left_left_left, c7_left_right_left_left_right);	

NumericIdentifier c7_left_right_left_right = getValue("1");
IntBooleanExpression c7_left_right_left=
factory.greaterOrEqualsThan(c7_left_right_left_left, c7_left_right_left_right);


Identifier c7_left_right_right_left = variables.get("Weight");

NumericIdentifier c7_left_right_right_right = getValue("1");
IntBooleanExpression c7_left_right_right=
factory.greaterOrEqualsThan(c7_left_right_right_left, c7_left_right_right_right);
IntBooleanExpression c7_left_right=factory.and(c7_left_right_left, c7_left_right_right);		
IntBooleanExpression c7_left=factory.implies(c7_left_left, c7_left_right);		



Identifier c7_right_left_left = variables.get("Weighted");

Identifier c7_right_left_right = variables.get("Unweighted");
IntNumericExpression c7_right_left=factory.sum(c7_right_left_left, c7_right_left_right);	

NumericIdentifier c7_right_right = getValue("1");
IntBooleanExpression c7_right=
factory.lessOrEqualsThan(c7_right_left, c7_right_right);
IntBooleanExpression c7=factory.implies(c7_left, c7_right);		
constraints.put("c7", c7);
hlclProgram.add(c7);
//
//declaring constraint c8






Identifier c8_left_left_left_left_left = variables.get("BFS");

Identifier c8_left_left_left_left_right = variables.get("Search");
IntBooleanExpression c8_left_left_left_left=factory.implies(c8_left_left_left_left_left, c8_left_left_left_left_right);		


Identifier c8_left_left_left_right_left = variables.get("DFS");

Identifier c8_left_left_left_right_right = variables.get("Search");
IntBooleanExpression c8_left_left_left_right=factory.implies(c8_left_left_left_right_left, c8_left_left_left_right_right);		
IntBooleanExpression c8_left_left_left=factory.and(c8_left_left_left_left, c8_left_left_left_right);		


Identifier c8_left_left_right_left = variables.get("Search");

NumericIdentifier c8_left_left_right_right = getValue("1");
IntBooleanExpression c8_left_left_right=
factory.greaterOrEqualsThan(c8_left_left_right_left, c8_left_left_right_right);
IntBooleanExpression c8_left_left=factory.and(c8_left_left_left, c8_left_left_right);		




Identifier c8_left_right_left_left_left = variables.get("BFS");

Identifier c8_left_right_left_left_right = variables.get("DFS");
IntNumericExpression c8_left_right_left_left=factory.sum(c8_left_right_left_left_left, c8_left_right_left_left_right);	

NumericIdentifier c8_left_right_left_right = getValue("1");
IntBooleanExpression c8_left_right_left=
factory.greaterOrEqualsThan(c8_left_right_left_left, c8_left_right_left_right);


Identifier c8_left_right_right_left = variables.get("Search");

NumericIdentifier c8_left_right_right_right = getValue("1");
IntBooleanExpression c8_left_right_right=
factory.greaterOrEqualsThan(c8_left_right_right_left, c8_left_right_right_right);
IntBooleanExpression c8_left_right=factory.and(c8_left_right_left, c8_left_right_right);		
IntBooleanExpression c8_left=factory.implies(c8_left_left, c8_left_right);		



Identifier c8_right_left_left = variables.get("BFS");

Identifier c8_right_left_right = variables.get("DFS");
IntNumericExpression c8_right_left=factory.sum(c8_right_left_left, c8_right_left_right);	

NumericIdentifier c8_right_right = getValue("1");
IntBooleanExpression c8_right=
factory.lessOrEqualsThan(c8_right_left, c8_right_right);
IntBooleanExpression c8=factory.implies(c8_left, c8_right);		
constraints.put("c8", c8);
hlclProgram.add(c8);
//
//declaring constraint c9









Identifier c9_left_left_left_left_left_left_left_left = variables.get("CycleCheck");

Identifier c9_left_left_left_left_left_left_left_right = variables.get("Algorithms");
IntBooleanExpression c9_left_left_left_left_left_left_left=factory.implies(c9_left_left_left_left_left_left_left_left, c9_left_left_left_left_left_left_left_right);		


Identifier c9_left_left_left_left_left_left_right_left = variables.get("StronglyCon");

Identifier c9_left_left_left_left_left_left_right_right = variables.get("Algorithms");
IntBooleanExpression c9_left_left_left_left_left_left_right=factory.implies(c9_left_left_left_left_left_left_right_left, c9_left_left_left_left_left_left_right_right);		
IntBooleanExpression c9_left_left_left_left_left_left=factory.and(c9_left_left_left_left_left_left_left, c9_left_left_left_left_left_left_right);		


Identifier c9_left_left_left_left_left_right_left = variables.get("VertexNum");

Identifier c9_left_left_left_left_left_right_right = variables.get("Algorithms");
IntBooleanExpression c9_left_left_left_left_left_right=factory.implies(c9_left_left_left_left_left_right_left, c9_left_left_left_left_left_right_right);		
IntBooleanExpression c9_left_left_left_left_left=factory.and(c9_left_left_left_left_left_left, c9_left_left_left_left_left_right);		


Identifier c9_left_left_left_left_right_left = variables.get("ConnComp");

Identifier c9_left_left_left_left_right_right = variables.get("Algorithms");
IntBooleanExpression c9_left_left_left_left_right=factory.implies(c9_left_left_left_left_right_left, c9_left_left_left_left_right_right);		
IntBooleanExpression c9_left_left_left_left=factory.and(c9_left_left_left_left_left, c9_left_left_left_left_right);		


Identifier c9_left_left_left_right_left = variables.get("SSP");

Identifier c9_left_left_left_right_right = variables.get("Algorithms");
IntBooleanExpression c9_left_left_left_right=factory.implies(c9_left_left_left_right_left, c9_left_left_left_right_right);		
IntBooleanExpression c9_left_left_left=factory.and(c9_left_left_left_left, c9_left_left_left_right);		


Identifier c9_left_left_right_left = variables.get("Algorithms");

NumericIdentifier c9_left_left_right_right = getValue("1");
IntBooleanExpression c9_left_left_right=
factory.greaterOrEqualsThan(c9_left_left_right_left, c9_left_left_right_right);
IntBooleanExpression c9_left_left=factory.and(c9_left_left_left, c9_left_left_right);		







Identifier c9_left_right_left_left_left_left_left_left = variables.get("CycleCheck");

Identifier c9_left_right_left_left_left_left_left_right = variables.get("StronglyCon");
IntNumericExpression c9_left_right_left_left_left_left_left=factory.sum(c9_left_right_left_left_left_left_left_left, c9_left_right_left_left_left_left_left_right);	

Identifier c9_left_right_left_left_left_left_right = variables.get("VertexNum");
IntNumericExpression c9_left_right_left_left_left_left=factory.sum(c9_left_right_left_left_left_left_left, c9_left_right_left_left_left_left_right);	

Identifier c9_left_right_left_left_left_right = variables.get("ConnComp");
IntNumericExpression c9_left_right_left_left_left=factory.sum(c9_left_right_left_left_left_left, c9_left_right_left_left_left_right);	

Identifier c9_left_right_left_left_right = variables.get("SSP");
IntNumericExpression c9_left_right_left_left=factory.sum(c9_left_right_left_left_left, c9_left_right_left_left_right);	

NumericIdentifier c9_left_right_left_right = getValue("0");
IntBooleanExpression c9_left_right_left=
factory.greaterOrEqualsThan(c9_left_right_left_left, c9_left_right_left_right);


Identifier c9_left_right_right_left = variables.get("Algorithms");

NumericIdentifier c9_left_right_right_right = getValue("1");
IntBooleanExpression c9_left_right_right=
factory.greaterOrEqualsThan(c9_left_right_right_left, c9_left_right_right_right);
IntBooleanExpression c9_left_right=factory.and(c9_left_right_left, c9_left_right_right);		
IntBooleanExpression c9_left=factory.implies(c9_left_left, c9_left_right);		






Identifier c9_right_left_left_left_left_left = variables.get("CycleCheck");

Identifier c9_right_left_left_left_left_right = variables.get("StronglyCon");
IntNumericExpression c9_right_left_left_left_left=factory.sum(c9_right_left_left_left_left_left, c9_right_left_left_left_left_right);	

Identifier c9_right_left_left_left_right = variables.get("VertexNum");
IntNumericExpression c9_right_left_left_left=factory.sum(c9_right_left_left_left_left, c9_right_left_left_left_right);	

Identifier c9_right_left_left_right = variables.get("ConnComp");
IntNumericExpression c9_right_left_left=factory.sum(c9_right_left_left_left, c9_right_left_left_right);	

Identifier c9_right_left_right = variables.get("SSP");
IntNumericExpression c9_right_left=factory.sum(c9_right_left_left, c9_right_left_right);	

NumericIdentifier c9_right_right = getValue("5");
IntBooleanExpression c9_right=
factory.lessOrEqualsThan(c9_right_left, c9_right_right);
IntBooleanExpression c9=factory.implies(c9_left, c9_right);		
constraints.put("c9", c9);
hlclProgram.add(c9);
//
//declaring constraint C92


Identifier C92_left = variables.get("Algorithms");

Identifier C92_right = variables.get("MST");
IntBooleanExpression C92=
factory.equals(C92_left, C92_right);
constraints.put("C92", C92);
hlclProgram.add(C92);
//
//declaring constraint cNew






Identifier cNew_left_left_left_left_left = variables.get("Kruskal");

Identifier cNew_left_left_left_left_right = variables.get("MST");
IntBooleanExpression cNew_left_left_left_left=factory.implies(cNew_left_left_left_left_left, cNew_left_left_left_left_right);		


Identifier cNew_left_left_left_right_left = variables.get("Prim");

Identifier cNew_left_left_left_right_right = variables.get("MST");
IntBooleanExpression cNew_left_left_left_right=factory.implies(cNew_left_left_left_right_left, cNew_left_left_left_right_right);		
IntBooleanExpression cNew_left_left_left=factory.and(cNew_left_left_left_left, cNew_left_left_left_right);		


Identifier cNew_left_left_right_left = variables.get("MST");

NumericIdentifier cNew_left_left_right_right = getValue("1");
IntBooleanExpression cNew_left_left_right=
factory.greaterOrEqualsThan(cNew_left_left_right_left, cNew_left_left_right_right);
IntBooleanExpression cNew_left_left=factory.and(cNew_left_left_left, cNew_left_left_right);		




Identifier cNew_left_right_left_left_left = variables.get("Kruskal");

Identifier cNew_left_right_left_left_right = variables.get("Prim");
IntNumericExpression cNew_left_right_left_left=factory.sum(cNew_left_right_left_left_left, cNew_left_right_left_left_right);	

NumericIdentifier cNew_left_right_left_right = getValue("0");
IntBooleanExpression cNew_left_right_left=
factory.greaterOrEqualsThan(cNew_left_right_left_left, cNew_left_right_left_right);


Identifier cNew_left_right_right_left = variables.get("MST");

NumericIdentifier cNew_left_right_right_right = getValue("1");
IntBooleanExpression cNew_left_right_right=
factory.greaterOrEqualsThan(cNew_left_right_right_left, cNew_left_right_right_right);
IntBooleanExpression cNew_left_right=factory.and(cNew_left_right_left, cNew_left_right_right);		
IntBooleanExpression cNew_left=factory.implies(cNew_left_left, cNew_left_right);		



Identifier cNew_right_left_left = variables.get("Kruskal");

Identifier cNew_right_left_right = variables.get("Prim");
IntNumericExpression cNew_right_left=factory.sum(cNew_right_left_left, cNew_right_left_right);	

NumericIdentifier cNew_right_right = getValue("2");
IntBooleanExpression cNew_right=
factory.lessOrEqualsThan(cNew_right_left, cNew_right_right);
IntBooleanExpression cNew=factory.implies(cNew_left, cNew_right);		
constraints.put("cNew", cNew);
hlclProgram.add(cNew);
//
//declaring constraint c10


Identifier c10_left = variables.get("CycleCheck");

Identifier c10_right = variables.get("DFS");
IntBooleanExpression c10=factory.implies(c10_left, c10_right);		
constraints.put("c10", c10);
hlclProgram.add(c10);
//
//declaring constraint c11


Identifier c11_left = variables.get("StronglyCon");

Identifier c11_right = variables.get("Directed");
IntBooleanExpression c11=factory.implies(c11_left, c11_right);		
constraints.put("c11", c11);
hlclProgram.add(c11);
//
//declaring constraint c12


Identifier c12_left = variables.get("StronglyCon");

Identifier c12_right = variables.get("DFS");
IntBooleanExpression c12=factory.implies(c12_left, c12_right);		
constraints.put("c12", c12);
hlclProgram.add(c12);
//
//declaring constraint c13


Identifier c13_left = variables.get("VertexNum");

Identifier c13_right = variables.get("Search");
IntBooleanExpression c13=factory.implies(c13_left, c13_right);		
constraints.put("c13", c13);
hlclProgram.add(c13);
//
//declaring constraint c14


Identifier c14_left = variables.get("ConnComp");

Identifier c14_right = variables.get("Undirected");
IntBooleanExpression c14=factory.implies(c14_left, c14_right);		
constraints.put("c14", c14);
hlclProgram.add(c14);
//
//declaring constraint c15


Identifier c15_left = variables.get("Kruskal");

Identifier c15_right = variables.get("Undirected");
IntBooleanExpression c15=factory.implies(c15_left, c15_right);		
constraints.put("c15", c15);
hlclProgram.add(c15);
//
//declaring constraint c16


Identifier c16_left = variables.get("Kruskal");

Identifier c16_right = variables.get("Weighted");
IntBooleanExpression c16=factory.implies(c16_left, c16_right);		
constraints.put("c16", c16);
hlclProgram.add(c16);
//
//declaring constraint c17


Identifier c17_left = variables.get("Prim");

Identifier c17_right = variables.get("Undirected");
IntBooleanExpression c17=factory.implies(c17_left, c17_right);		
constraints.put("c17", c17);
hlclProgram.add(c17);
//
//declaring constraint c18


Identifier c18_left = variables.get("Prim");

Identifier c18_right = variables.get("Weighted");
IntBooleanExpression c18=factory.implies(c18_left, c18_right);		
constraints.put("c18", c18);
hlclProgram.add(c18);
//
//declaring constraint c19


Identifier c19_left = variables.get("SSP");

Identifier c19_right = variables.get("Directed");
IntBooleanExpression c19=factory.implies(c19_left, c19_right);		
constraints.put("c19", c19);
hlclProgram.add(c19);
//
//declaring constraint c20


Identifier c20_left = variables.get("SSP");

Identifier c20_right = variables.get("Weighted");
IntBooleanExpression c20=factory.implies(c20_left, c20_right);		
constraints.put("c20", c20);
hlclProgram.add(c20);
//
//declaring constraint c21



Identifier c21_left_left = variables.get("StronglyCon");

Identifier c21_left_right = variables.get("ConnComp");
IntNumericExpression c21_left=factory.sum(c21_left_left, c21_left_right);	

NumericIdentifier c21_right = getValue("1");
IntBooleanExpression c21=
factory.lessOrEqualsThan(c21_left, c21_right);
constraints.put("c21", c21);
hlclProgram.add(c21);
//
//declaring constraint c22



Identifier c22_left_left = variables.get("StronglyCon");

Identifier c22_left_right = variables.get("Kruskal");
IntNumericExpression c22_left=factory.sum(c22_left_left, c22_left_right);	

NumericIdentifier c22_right = getValue("1");
IntBooleanExpression c22=
factory.lessOrEqualsThan(c22_left, c22_right);
constraints.put("c22", c22);
hlclProgram.add(c22);
//
//declaring constraint c23



Identifier c23_left_left = variables.get("StronglyCon");

Identifier c23_left_right = variables.get("Prim");
IntNumericExpression c23_left=factory.sum(c23_left_left, c23_left_right);	

NumericIdentifier c23_right = getValue("1");
IntBooleanExpression c23=
factory.lessOrEqualsThan(c23_left, c23_right);
constraints.put("c23", c23);
hlclProgram.add(c23);
//
//declaring constraint c24



Identifier c24_left_left = variables.get("SSP");

Identifier c24_left_right = variables.get("ConnComp");
IntNumericExpression c24_left=factory.sum(c24_left_left, c24_left_right);	

NumericIdentifier c24_right = getValue("1");
IntBooleanExpression c24=
factory.lessOrEqualsThan(c24_left, c24_right);
constraints.put("c24", c24);
hlclProgram.add(c24);
//
//declaring constraint c25



Identifier c25_left_left = variables.get("SSP");

Identifier c25_left_right = variables.get("Kruskal");
IntNumericExpression c25_left=factory.sum(c25_left_left, c25_left_right);	

NumericIdentifier c25_right = getValue("1");
IntBooleanExpression c25=
factory.lessOrEqualsThan(c25_left, c25_right);
constraints.put("c25", c25);
hlclProgram.add(c25);
//
//declaring constraint c26



Identifier c26_left_left = variables.get("SSP");

Identifier c26_left_right = variables.get("Prim");
IntNumericExpression c26_left=factory.sum(c26_left_left, c26_left_right);	

NumericIdentifier c26_right = getValue("1");
IntBooleanExpression c26=
factory.lessOrEqualsThan(c26_left, c26_right);
constraints.put("c26", c26);
hlclProgram.add(c26);
	}
	public boolean evaluateSatisfiability(){
		// the output
		boolean evaluation= false;
		// //to transform the hllcl program into a prolog  file, 
		// //these lines are commented because they are useful for debugging 
		Hlcl2SWIProlog swiPrologTransformer = new Hlcl2SWIProlog(); 
		prologProgram = swiPrologTransformer.transform(hlclProgram);
				
		// an instance of the solver for Swiprolog 
		swiSolver= new SWIPrologSolver();
		swiSolver.setHLCLProgram(hlclProgram); //passing the hlcl program to the solver
		swiSolver.solve(); // This methhod prepares the solver 
		List<SolverSolution> solutions = swiSolver.getAllSolutions(); // Consulting if the solver has one solution
			evaluation= solutions.size()>0;
			for (SolverSolution solverSolution : solutions) {
				System.out.println(solverSolution.toString());
			}	return evaluation;
	}
	/** 
	* To obtain the NumericIdentifier representation of a value 
	* @param id the string with the value 
	* @return the NumericIdentifier 
	*/
	public NumericIdentifier getValue(String id) {	NumericIdentifier value= numbers.get(id); 
	 	if (value==null) { 
	 		if (id.equals("selected")) { 
	 			value= numbers.get("1"); 
	 		} 
	 		else if(id.equals("unselected")) {
				value= numbers.get("0"); 
			} 
			else { 
				value= factory.number(Integer.parseInt(id)); 
				numbers.put(id, value);
			}
	 	} 
	 	return value; 
	 } 
		public String getModelName() {
			return modelName;
		}
		public void setModelName(String modelName) {
			this.modelName = modelName;
		}
		public HlclFactory getFactory() {
			return factory;
		}
		public void setFactory(HlclFactory factory) {
			this.factory = factory;
		}
		public HlclProgram getHlclProgram() {
			return hlclProgram;
		}
		public void setHlclProgram(HlclProgram hlclProgram) {
			this.hlclProgram = hlclProgram;
		}
} 	