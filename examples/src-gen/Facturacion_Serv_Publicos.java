//Java imports
import java.util.HashMap;
import java.util.List;

//imports for hlcl 
import com.variamos.hlcl.core.HlclProgram; 
import com.variamos.hlcl.model.expressions.HlclFactory; 
import com.variamos.hlcl.model.domains.BinaryDomain;
import com.variamos.hlcl.model.domains.IntervalDomain;
import com.variamos.hlcl.model.domains.RangeDomain;
import com.variamos.hlcl.model.expressions.Identifier;
import com.variamos.hlcl.model.expressions.IntBooleanExpression;
import com.variamos.hlcl.model.expressions.NumericIdentifier;
import com.variamos.hlcl.model.expressions.SymbolicExpression;
import com.variamos.hlcl.model.expressions.IntNumericExpression;

//imports for solver
import com.variamos.solver.core.SWIPrologSolver;
import com.variamos.solver.core.compiler.Hlcl2SWIProlog;
import com.variamos.solver.model.SolverSolution;

/**
* This class is automatically generated from a product line model described in 
* extended HLCL
* @author Angela Villota 
* @version PL-HLCL Version1
*
*/
public class Facturacion_Serv_Publicos { 				
	
	private String modelName;
	private HlclFactory factory;
	private HlclProgram hlclProgram;
	private SWIPrologSolver swiSolver;
	private String prologProgram;
	private HashMap<String,IntBooleanExpression> constraints;
	private HashMap<String,Identifier> variables;
	private HashMap<String,NumericIdentifier> numbers;
	/**
	* This is an autogenerated method* Constructor method
	* @param modelName is the name of the model in the Extended HLCL specification
	*/
	public Facturacion_Serv_Publicos(String modelName){ 					
		
		this.modelName= modelName;
		hlclProgram= new HlclProgram();
		factory = new HlclFactory();
		variables= new HashMap<String,Identifier>();
		constraints= new HashMap<String,IntBooleanExpression>();
		numbers= new HashMap<String,NumericIdentifier>();
		NumericIdentifier one = factory.number(1);
		NumericIdentifier zero= factory.number(0);
		numbers.put("1", one);
		numbers.put("0", zero);
	} 				
	public static void main(String[] args) {
		Facturacion_Serv_Publicos obj = new Facturacion_Serv_Publicos("Facturacion_Serv_Publicos");
		obj.run();
	}
	public void run(){
		// first obtain a HlclProgram from the specification
		transformVars();
		transformConstraints(); 
		// use the solver to solve the constraint program
		evaluateSatisfiability();
		//show the output
		System.out.println(prologProgram);
	}
	public void transformVars() {
		//declaring the variable for the model
		Identifier Facturacion_Serv_PublicosVar = factory.newIdentifier("Facturacion_Serv_Publicos");
		BinaryDomain Facturacion_Serv_PublicosDom= new BinaryDomain();
		Facturacion_Serv_PublicosVar.setDomain(Facturacion_Serv_PublicosDom);	
		variables.put("Facturacion_Serv_PublicosVar", Facturacion_Serv_PublicosVar); //including the variable in the map
		//
		//declaring variable Tipo_de_Servicio
		Identifier Tipo_de_Servicio = factory.newIdentifier("Tipo_de_Servicio");
		BinaryDomain Tipo_de_ServicioDom= new BinaryDomain();
		Tipo_de_Servicio.setDomain(Tipo_de_ServicioDom);	
		variables.put("Tipo_de_Servicio", Tipo_de_Servicio); //including the variable in the map
		//
		//declaring variable Energia
		Identifier Energia = factory.newIdentifier("Energia");
		BinaryDomain EnergiaDom= new BinaryDomain();
		Energia.setDomain(EnergiaDom);	
		variables.put("Energia", Energia); //including the variable in the map
		//
		//declaring variable Agua
		Identifier Agua = factory.newIdentifier("Agua");
		BinaryDomain AguaDom= new BinaryDomain();
		Agua.setDomain(AguaDom);	
		variables.put("Agua", Agua); //including the variable in the map
		//
		//declaring variable Alcantarillado
		Identifier Alcantarillado = factory.newIdentifier("Alcantarillado");
		BinaryDomain AlcantarilladoDom= new BinaryDomain();
		Alcantarillado.setDomain(AlcantarilladoDom);	
		variables.put("Alcantarillado", Alcantarillado); //including the variable in the map
		//
		//declaring variable Aseo
		Identifier Aseo = factory.newIdentifier("Aseo");
		BinaryDomain AseoDom= new BinaryDomain();
		Aseo.setDomain(AseoDom);	
		variables.put("Aseo", Aseo); //including the variable in the map
		//
		//declaring variable Gas
		Identifier Gas = factory.newIdentifier("Gas");
		BinaryDomain GasDom= new BinaryDomain();
		Gas.setDomain(GasDom);	
		variables.put("Gas", Gas); //including the variable in the map
		//
		//declaring variable Alumbrado_Publico
		Identifier Alumbrado_Publico = factory.newIdentifier("Alumbrado_Publico");
		BinaryDomain Alumbrado_PublicoDom= new BinaryDomain();
		Alumbrado_Publico.setDomain(Alumbrado_PublicoDom);	
		variables.put("Alumbrado_Publico", Alumbrado_Publico); //including the variable in the map
		//
		//declaring variable Registro_Consumo
		Identifier Registro_Consumo = factory.newIdentifier("Registro_Consumo");
		BinaryDomain Registro_ConsumoDom= new BinaryDomain();
		Registro_Consumo.setDomain(Registro_ConsumoDom);	
		variables.put("Registro_Consumo", Registro_Consumo); //including the variable in the map
		//
		//declaring variable RegAutomatico
		Identifier RegAutomatico = factory.newIdentifier("RegAutomatico");
		BinaryDomain RegAutomaticoDom= new BinaryDomain();
		RegAutomatico.setDomain(RegAutomaticoDom);	
		variables.put("RegAutomatico", RegAutomatico); //including the variable in the map
		//
		//declaring variable RegManual
		Identifier RegManual = factory.newIdentifier("RegManual");
		BinaryDomain RegManualDom= new BinaryDomain();
		RegManual.setDomain(RegManualDom);	
		variables.put("RegManual", RegManual); //including the variable in the map
		//
		//declaring variable RegPrepago
		Identifier RegPrepago = factory.newIdentifier("RegPrepago");
		BinaryDomain RegPrepagoDom= new BinaryDomain();
		RegPrepago.setDomain(RegPrepagoDom);	
		variables.put("RegPrepago", RegPrepago); //including the variable in the map
		//
		//declaring variable Liquidacion
		Identifier Liquidacion = factory.newIdentifier("Liquidacion");
		BinaryDomain LiquidacionDom= new BinaryDomain();
		Liquidacion.setDomain(LiquidacionDom);	
		variables.put("Liquidacion", Liquidacion); //including the variable in the map
		//
		//declaring variable Liq_Manual
		Identifier Liq_Manual = factory.newIdentifier("Liq_Manual");
		BinaryDomain Liq_ManualDom= new BinaryDomain();
		Liq_Manual.setDomain(Liq_ManualDom);	
		variables.put("Liq_Manual", Liq_Manual); //including the variable in the map
		//
		//declaring variable Generar_Doc_Factura
		Identifier Generar_Doc_Factura = factory.newIdentifier("Generar_Doc_Factura");
		BinaryDomain Generar_Doc_FacturaDom= new BinaryDomain();
		Generar_Doc_Factura.setDomain(Generar_Doc_FacturaDom);	
		variables.put("Generar_Doc_Factura", Generar_Doc_Factura); //including the variable in the map
		//
		//declaring variable Subir_cargos_Pendientes
		Identifier Subir_cargos_Pendientes = factory.newIdentifier("Subir_cargos_Pendientes");
		BinaryDomain Subir_cargos_PendientesDom= new BinaryDomain();
		Subir_cargos_Pendientes.setDomain(Subir_cargos_PendientesDom);	
		variables.put("Subir_cargos_Pendientes", Subir_cargos_Pendientes); //including the variable in the map
		//
		//declaring variable Liq_Automatica
		Identifier Liq_Automatica = factory.newIdentifier("Liq_Automatica");
		BinaryDomain Liq_AutomaticaDom= new BinaryDomain();
		Liq_Automatica.setDomain(Liq_AutomaticaDom);	
		variables.put("Liq_Automatica", Liq_Automatica); //including the variable in the map
		//
		//declaring variable Liq_aut_Individual
		Identifier Liq_aut_Individual = factory.newIdentifier("Liq_aut_Individual");
		BinaryDomain Liq_aut_IndividualDom= new BinaryDomain();
		Liq_aut_Individual.setDomain(Liq_aut_IndividualDom);	
		variables.put("Liq_aut_Individual", Liq_aut_Individual); //including the variable in the map
		//
		//declaring variable Liq_Ind_aut_Saldos
		Identifier Liq_Ind_aut_Saldos = factory.newIdentifier("Liq_Ind_aut_Saldos");
		BinaryDomain Liq_Ind_aut_SaldosDom= new BinaryDomain();
		Liq_Ind_aut_Saldos.setDomain(Liq_Ind_aut_SaldosDom);	
		variables.put("Liq_Ind_aut_Saldos", Liq_Ind_aut_Saldos); //including the variable in the map
		//
		//declaring variable Liq_Ind_aut_Consumos
		Identifier Liq_Ind_aut_Consumos = factory.newIdentifier("Liq_Ind_aut_Consumos");
		BinaryDomain Liq_Ind_aut_ConsumosDom= new BinaryDomain();
		Liq_Ind_aut_Consumos.setDomain(Liq_Ind_aut_ConsumosDom);	
		variables.put("Liq_Ind_aut_Consumos", Liq_Ind_aut_Consumos); //including the variable in the map
		//
		//declaring variable Liq_Ind_aut_Servicios
		Identifier Liq_Ind_aut_Servicios = factory.newIdentifier("Liq_Ind_aut_Servicios");
		BinaryDomain Liq_Ind_aut_ServiciosDom= new BinaryDomain();
		Liq_Ind_aut_Servicios.setDomain(Liq_Ind_aut_ServiciosDom);	
		variables.put("Liq_Ind_aut_Servicios", Liq_Ind_aut_Servicios); //including the variable in the map
		//
		//declaring variable Liq_Ind_aut_Cargos_Externos
		Identifier Liq_Ind_aut_Cargos_Externos = factory.newIdentifier("Liq_Ind_aut_Cargos_Externos");
		BinaryDomain Liq_Ind_aut_Cargos_ExternosDom= new BinaryDomain();
		Liq_Ind_aut_Cargos_Externos.setDomain(Liq_Ind_aut_Cargos_ExternosDom);	
		variables.put("Liq_Ind_aut_Cargos_Externos", Liq_Ind_aut_Cargos_Externos); //including the variable in the map
		//
		//declaring variable Liq_aut_Masiva
		Identifier Liq_aut_Masiva = factory.newIdentifier("Liq_aut_Masiva");
		BinaryDomain Liq_aut_MasivaDom= new BinaryDomain();
		Liq_aut_Masiva.setDomain(Liq_aut_MasivaDom);	
		variables.put("Liq_aut_Masiva", Liq_aut_Masiva); //including the variable in the map
		//
		//declaring variable Liq_mas_aut_Saldos
		Identifier Liq_mas_aut_Saldos = factory.newIdentifier("Liq_mas_aut_Saldos");
		BinaryDomain Liq_mas_aut_SaldosDom= new BinaryDomain();
		Liq_mas_aut_Saldos.setDomain(Liq_mas_aut_SaldosDom);	
		variables.put("Liq_mas_aut_Saldos", Liq_mas_aut_Saldos); //including the variable in the map
		//
		//declaring variable Liq_mas_aut_Consumos
		Identifier Liq_mas_aut_Consumos = factory.newIdentifier("Liq_mas_aut_Consumos");
		BinaryDomain Liq_mas_aut_ConsumosDom= new BinaryDomain();
		Liq_mas_aut_Consumos.setDomain(Liq_mas_aut_ConsumosDom);	
		variables.put("Liq_mas_aut_Consumos", Liq_mas_aut_Consumos); //including the variable in the map
		//
		//declaring variable Liq_mas_aut_Servicios
		Identifier Liq_mas_aut_Servicios = factory.newIdentifier("Liq_mas_aut_Servicios");
		BinaryDomain Liq_mas_aut_ServiciosDom= new BinaryDomain();
		Liq_mas_aut_Servicios.setDomain(Liq_mas_aut_ServiciosDom);	
		variables.put("Liq_mas_aut_Servicios", Liq_mas_aut_Servicios); //including the variable in the map
		//
		//declaring variable Liq_mas_aut_Cargos_Externos
		Identifier Liq_mas_aut_Cargos_Externos = factory.newIdentifier("Liq_mas_aut_Cargos_Externos");
		BinaryDomain Liq_mas_aut_Cargos_ExternosDom= new BinaryDomain();
		Liq_mas_aut_Cargos_Externos.setDomain(Liq_mas_aut_Cargos_ExternosDom);	
		variables.put("Liq_mas_aut_Cargos_Externos", Liq_mas_aut_Cargos_Externos); //including the variable in the map
		//
		//declaring variable Motor_liquidacion
		Identifier Motor_liquidacion = factory.newIdentifier("Motor_liquidacion");
		BinaryDomain Motor_liquidacionDom= new BinaryDomain();
		Motor_liquidacion.setDomain(Motor_liquidacionDom);	
		variables.put("Motor_liquidacion", Motor_liquidacion); //including the variable in the map
		//
		//declaring variable Motor_secuencial
		Identifier Motor_secuencial = factory.newIdentifier("Motor_secuencial");
		BinaryDomain Motor_secuencialDom= new BinaryDomain();
		Motor_secuencial.setDomain(Motor_secuencialDom);	
		variables.put("Motor_secuencial", Motor_secuencial); //including the variable in the map
		//
		//declaring variable Motor_paralelo
		Identifier Motor_paralelo = factory.newIdentifier("Motor_paralelo");
		BinaryDomain Motor_paraleloDom= new BinaryDomain();
		Motor_paralelo.setDomain(Motor_paraleloDom);	
		variables.put("Motor_paralelo", Motor_paralelo); //including the variable in the map
		//
		//declaring variable Gestion_Tarifaria
		Identifier Gestion_Tarifaria = factory.newIdentifier("Gestion_Tarifaria");
		BinaryDomain Gestion_TarifariaDom= new BinaryDomain();
		Gestion_Tarifaria.setDomain(Gestion_TarifariaDom);	
		variables.put("Gestion_Tarifaria", Gestion_Tarifaria); //including the variable in the map
		//
		//declaring variable Gest_Tar_Impuestos
		Identifier Gest_Tar_Impuestos = factory.newIdentifier("Gest_Tar_Impuestos");
		BinaryDomain Gest_Tar_ImpuestosDom= new BinaryDomain();
		Gest_Tar_Impuestos.setDomain(Gest_Tar_ImpuestosDom);	
		variables.put("Gest_Tar_Impuestos", Gest_Tar_Impuestos); //including the variable in the map
		//
		//declaring variable Gest_Tar_Consumos_Horarios
		Identifier Gest_Tar_Consumos_Horarios = factory.newIdentifier("Gest_Tar_Consumos_Horarios");
		BinaryDomain Gest_Tar_Consumos_HorariosDom= new BinaryDomain();
		Gest_Tar_Consumos_Horarios.setDomain(Gest_Tar_Consumos_HorariosDom);	
		variables.put("Gest_Tar_Consumos_Horarios", Gest_Tar_Consumos_Horarios); //including the variable in the map
		//
		//declaring variable Gest_Tar_Consumos_Horarios
		Identifier Gest_Tar_Consumos_Horarios = factory.newIdentifier("Gest_Tar_Consumos_Horarios");
		BinaryDomain Gest_Tar_Consumos_HorariosDom= new BinaryDomain();
		Gest_Tar_Consumos_Horarios.setDomain(Gest_Tar_Consumos_HorariosDom);	
		variables.put("Gest_Tar_Consumos_Horarios", Gest_Tar_Consumos_Horarios); //including the variable in the map
		//
		//declaring variable Otros_Cobros
		Identifier Otros_Cobros = factory.newIdentifier("Otros_Cobros");
		BinaryDomain Otros_CobrosDom= new BinaryDomain();
		Otros_Cobros.setDomain(Otros_CobrosDom);	
		variables.put("Otros_Cobros", Otros_Cobros); //including the variable in the map
		//
		//declaring variable Ges_tar_Reglas_Dinamicas
		Identifier Ges_tar_Reglas_Dinamicas = factory.newIdentifier("Ges_tar_Reglas_Dinamicas");
		BinaryDomain Ges_tar_Reglas_DinamicasDom= new BinaryDomain();
		Ges_tar_Reglas_Dinamicas.setDomain(Ges_tar_Reglas_DinamicasDom);	
		variables.put("Ges_tar_Reglas_Dinamicas", Ges_tar_Reglas_Dinamicas); //including the variable in the map
		//
		//declaring variable Ges_tar_reglas_codigo
		Identifier Ges_tar_reglas_codigo = factory.newIdentifier("Ges_tar_reglas_codigo");
		BinaryDomain Ges_tar_reglas_codigoDom= new BinaryDomain();
		Ges_tar_reglas_codigo.setDomain(Ges_tar_reglas_codigoDom);	
		variables.put("Ges_tar_reglas_codigo", Ges_tar_reglas_codigo); //including the variable in the map
		//
		//declaring variable Emision_factura
		Identifier Emision_factura = factory.newIdentifier("Emision_factura");
		BinaryDomain Emision_facturaDom= new BinaryDomain();
		Emision_factura.setDomain(Emision_facturaDom);	
		variables.put("Emision_factura", Emision_factura); //including the variable in the map
		//
		//declaring variable Emis_fact_Regulatoria
		Identifier Emis_fact_Regulatoria = factory.newIdentifier("Emis_fact_Regulatoria");
		BinaryDomain Emis_fact_RegulatoriaDom= new BinaryDomain();
		Emis_fact_Regulatoria.setDomain(Emis_fact_RegulatoriaDom);	
		variables.put("Emis_fact_Regulatoria", Emis_fact_Regulatoria); //including the variable in the map
		//
		//declaring variable Emis_fact_Digital_Individual_Web
		Identifier Emis_fact_Digital_Individual_Web = factory.newIdentifier("Emis_fact_Digital_Individual_Web");
		BinaryDomain Emis_fact_Digital_Individual_WebDom= new BinaryDomain();
		Emis_fact_Digital_Individual_Web.setDomain(Emis_fact_Digital_Individual_WebDom);	
		variables.put("Emis_fact_Digital_Individual_Web", Emis_fact_Digital_Individual_Web); //including the variable in the map
		//
		//declaring variable Ticket
		Identifier Ticket = factory.newIdentifier("Ticket");
		BinaryDomain TicketDom= new BinaryDomain();
		Ticket.setDomain(TicketDom);	
		variables.put("Ticket", Ticket); //including the variable in the map
		//
		//declaring variable CopiaFiel
		Identifier CopiaFiel = factory.newIdentifier("CopiaFiel");
		BinaryDomain CopiaFielDom= new BinaryDomain();
		CopiaFiel.setDomain(CopiaFielDom);	
		variables.put("CopiaFiel", CopiaFiel); //including the variable in the map
		//
		//declaring variable EstadoCuenta
		Identifier EstadoCuenta = factory.newIdentifier("EstadoCuenta");
		BinaryDomain EstadoCuentaDom= new BinaryDomain();
		EstadoCuenta.setDomain(EstadoCuentaDom);	
		variables.put("EstadoCuenta", EstadoCuenta); //including the variable in the map
		//
		//declaring variable Conf_Factura
		Identifier Conf_Factura = factory.newIdentifier("Conf_Factura");
		BinaryDomain Conf_FacturaDom= new BinaryDomain();
		Conf_Factura.setDomain(Conf_FacturaDom);	
		variables.put("Conf_Factura", Conf_Factura); //including the variable in the map
		//
		//declaring variable Conf_fact_Modulo_extraccion
		Identifier Conf_fact_Modulo_extraccion = factory.newIdentifier("Conf_fact_Modulo_extraccion");
		BinaryDomain Conf_fact_Modulo_extraccionDom= new BinaryDomain();
		Conf_fact_Modulo_extraccion.setDomain(Conf_fact_Modulo_extraccionDom);	
		variables.put("Conf_fact_Modulo_extraccion", Conf_fact_Modulo_extraccion); //including the variable in the map
		//
		//declaring variable Conf_fact_estatico
		Identifier Conf_fact_estatico = factory.newIdentifier("Conf_fact_estatico");
		BinaryDomain Conf_fact_estaticoDom= new BinaryDomain();
		Conf_fact_estatico.setDomain(Conf_fact_estaticoDom);	
		variables.put("Conf_fact_estatico", Conf_fact_estatico); //including the variable in the map
		//
		//declaring variable Analisis_Consumos
		Identifier Analisis_Consumos = factory.newIdentifier("Analisis_Consumos");
		BinaryDomain Analisis_ConsumosDom= new BinaryDomain();
		Analisis_Consumos.setDomain(Analisis_ConsumosDom);	
		variables.put("Analisis_Consumos", Analisis_Consumos); //including the variable in the map
		//
		//declaring variable An_cons_sencillos
		Identifier An_cons_sencillos = factory.newIdentifier("An_cons_sencillos");
		BinaryDomain An_cons_sencillosDom= new BinaryDomain();
		An_cons_sencillos.setDomain(An_cons_sencillosDom);	
		variables.put("An_cons_sencillos", An_cons_sencillos); //including the variable in the map
		//
		//declaring variable An_sen_Mineria
		Identifier An_sen_Mineria = factory.newIdentifier("An_sen_Mineria");
		BinaryDomain An_sen_MineriaDom= new BinaryDomain();
		An_sen_Mineria.setDomain(An_sen_MineriaDom);	
		variables.put("An_sen_Mineria", An_sen_Mineria); //including the variable in the map
		//
		//declaring variable An_sen_reglas
		Identifier An_sen_reglas = factory.newIdentifier("An_sen_reglas");
		BinaryDomain An_sen_reglasDom= new BinaryDomain();
		An_sen_reglas.setDomain(An_sen_reglasDom);	
		variables.put("An_sen_reglas", An_sen_reglas); //including the variable in the map
		//
		//declaring variable An_cons_horarios
		Identifier An_cons_horarios = factory.newIdentifier("An_cons_horarios");
		BinaryDomain An_cons_horariosDom= new BinaryDomain();
		An_cons_horarios.setDomain(An_cons_horariosDom);	
		variables.put("An_cons_horarios", An_cons_horarios); //including the variable in the map
		//
		//declaring variable An_hor_Mineria
		Identifier An_hor_Mineria = factory.newIdentifier("An_hor_Mineria");
		BinaryDomain An_hor_MineriaDom= new BinaryDomain();
		An_hor_Mineria.setDomain(An_hor_MineriaDom);	
		variables.put("An_hor_Mineria", An_hor_Mineria); //including the variable in the map
		//
		//declaring variable An_hor_Reglas
		Identifier An_hor_Reglas = factory.newIdentifier("An_hor_Reglas");
		BinaryDomain An_hor_ReglasDom= new BinaryDomain();
		An_hor_Reglas.setDomain(An_hor_ReglasDom);	
		variables.put("An_hor_Reglas", An_hor_Reglas); //including the variable in the map
		//
		//declaring variable An_Perdidas
		Identifier An_Perdidas = factory.newIdentifier("An_Perdidas");
		BinaryDomain An_PerdidasDom= new BinaryDomain();
		An_Perdidas.setDomain(An_PerdidasDom);	
		variables.put("An_Perdidas", An_Perdidas); //including the variable in the map
		//
		//declaring variable An_perdidas_Sectores
		Identifier An_perdidas_Sectores = factory.newIdentifier("An_perdidas_Sectores");
		BinaryDomain An_perdidas_SectoresDom= new BinaryDomain();
		An_perdidas_Sectores.setDomain(An_perdidas_SectoresDom);	
		variables.put("An_perdidas_Sectores", An_perdidas_Sectores); //including the variable in the map
		//
		//declaring variable An_perdidas_Agregado
		Identifier An_perdidas_Agregado = factory.newIdentifier("An_perdidas_Agregado");
		BinaryDomain An_perdidas_AgregadoDom= new BinaryDomain();
		An_perdidas_Agregado.setDomain(An_perdidas_AgregadoDom);	
		variables.put("An_perdidas_Agregado", An_perdidas_Agregado); //including the variable in the map
	}
	public void transformConstraints() {
		//declaring the constraint for the model
		IntBooleanExpression CFacturacion_Serv_Publicos= factory.equals(variables.get("Facturacion_Serv_PublicosVar"), getValue("1"));
		constraints.put("CFacturacion_Serv_Publicos", CFacturacion_Serv_Publicos);
		hlclProgram.add(CFacturacion_Serv_Publicos);
		//
		//declaring constraint C1
		IntBooleanExpression C1= factory.equals(variables.get("Facturacion_Serv_PublicosVar"), variables.get("Tipo_de_Servicio"));
		constraints.put("C1", C1);
		hlclProgram.add(C1);
		//
		//declaring constraint C3
		IntBooleanExpression C3= factory.equals(variables.get("Facturacion_Serv_PublicosVar"), variables.get("Registro_Consumo"));
		constraints.put("C3", C3);
		hlclProgram.add(C3);
		//
		//declaring constraint C5
		IntBooleanExpression C5= factory.equals(variables.get("Facturacion_Serv_PublicosVar"), variables.get("Liquidacion"));
		constraints.put("C5", C5);
		hlclProgram.add(C5);
		//
		//declaring constraint C9
		constraints.put("C9", C9);
		hlclProgram.add(C9);
		//
		//declaring constraint C10
		constraints.put("C10", C10);
		hlclProgram.add(C10);
		//
		//declaring constraint C13
		constraints.put("C13", C13);
		hlclProgram.add(C13);
		//
		//declaring constraint C14
		constraints.put("C14", C14);
		hlclProgram.add(C14);
		//
		//declaring constraint C17
		constraints.put("C17", C17);
		hlclProgram.add(C17);
		//
		//declaring constraint C19
		IntBooleanExpression C19= factory.equals(variables.get("Facturacion_Serv_PublicosVar"), variables.get("Gestion_Tarifaria"));
		constraints.put("C19", C19);
		hlclProgram.add(C19);
		//
		//declaring constraint C25
		constraints.put("C25", C25);
		hlclProgram.add(C25);
		//
		//declaring constraint C11
		constraints.put("C11", C11);
		hlclProgram.add(C11);
		//
		//declaring constraint C12
		constraints.put("C12", C12);
		hlclProgram.add(C12);
		//
		//declaring constraint C15
		constraints.put("C15", C15);
		hlclProgram.add(C15);
		//
		//declaring constraint C16
		constraints.put("C16", C16);
		hlclProgram.add(C16);
		//
		//declaring constraint C22
		IntBooleanExpression C22= factory.greaterOrEqualsThan(variables.get("Facturacion_Serv_PublicosVar"), variables.get("Emision_factura"));
		constraints.put("C22", C22);
		hlclProgram.add(C22);
		//
		//declaring constraint C27
		IntBooleanExpression C27= factory.greaterOrEqualsThan(variables.get("Facturacion_Serv_PublicosVar"), variables.get("Analisis_Consumos"));
		constraints.put("C27", C27);
		hlclProgram.add(C27);
		//
		//declaring constraint C32
		IntNumericExpression plus=factory.sum(variables.get("Emis_fact_Regulatoria"), variables.get("Conf_fact_estatico"));
		IntBooleanExpression C32=factory.lessOrEqualsThan(plus,  getValue("1"));
		constraints.put("C32", C32);
		hlclProgram.add(C32);
		//
		//declaring constraint C33
		IntBooleanExpression C33= factory.implies(variables.get("Energia"), variables.get("Alumbrado_Publico"));
		constraints.put("C33", C33);
		hlclProgram.add(C33);
		//
		//declaring constraint C34
		IntBooleanExpression C34= factory.implies(variables.get("Liq_Automatica"), variables.get("Gest_Tar_Impuestos"));
		constraints.put("C34", C34);
		hlclProgram.add(C34);
		//
		//declaring constraint C35
		IntNumericExpression plus=factory.sum(variables.get("Liq_aut_Masiva"), variables.get("Motor_secuencial"));
		IntBooleanExpression C35=factory.lessOrEqualsThan(plus,  getValue("1"));
		constraints.put("C35", C35);
		hlclProgram.add(C35);
		//
		//declaring constraint C36
		IntBooleanExpression C36= factory.implies(variables.get("Liq_Ind_aut_Servicios"), variables.get("Subir_cargos_Pendientes"));
		constraints.put("C36", C36);
		hlclProgram.add(C36);
		//
		//declaring constraint C37
		IntBooleanExpression C37= factory.implies(variables.get("Liq_Ind_aut_Cargos_Externos"), variables.get("Subir_cargos_Pendientes"));
		constraints.put("C37", C37);
		hlclProgram.add(C37);
		//
		//declaring constraint C38
		IntBooleanExpression C38= factory.implies(variables.get("Liq_mas_aut_Servicios"), variables.get("Subir_cargos_Pendientes"));
		constraints.put("C38", C38);
		hlclProgram.add(C38);
		//
		//declaring constraint C39
		IntBooleanExpression C39= factory.implies(variables.get("Liq_mas_aut_Cargos_Externos"), variables.get("Subir_cargos_Pendientes"));
		constraints.put("C39", C39);
		hlclProgram.add(C39);
		//
		//declaring constraint C40
		IntNumericExpression plus=factory.sum(variables.get("Gest_Tar_Consumos_Horarios"), variables.get("Ges_tar_reglas_codigo"));
		IntBooleanExpression C40=factory.lessOrEqualsThan(plus,  getValue("1"));
		constraints.put("C40", C40);
		hlclProgram.add(C40);
		//
		//declaring constraint C41
		IntBooleanExpression C41= factory.implies(variables.get("Agua"), variables.get("Alcantarillado"));
		constraints.put("C41", C41);
		hlclProgram.add(C41);
		//
		//declaring constraint C42
		IntBooleanExpression C42= factory.implies(variables.get("RegPrepago"), variables.get("Liq_aut_Individual"));
		constraints.put("C42", C42);
		hlclProgram.add(C42);
		//
		//declaring constraint C2
		//implies
		IntBooleanExpression EnergiaImp= factory.implies(variables.get("Energia"), variables.get("Tipo_de_Servicio"));
		constraints.put("EnergiaImp", EnergiaImp);
		hlclProgram.add(EnergiaImp);
		IntBooleanExpression AguaImp= factory.implies(variables.get("Agua"), variables.get("Tipo_de_Servicio"));
		constraints.put("AguaImp", AguaImp);
		hlclProgram.add(AguaImp);
		IntBooleanExpression AlcantarilladoImp= factory.implies(variables.get("Alcantarillado"), variables.get("Tipo_de_Servicio"));
		constraints.put("AlcantarilladoImp", AlcantarilladoImp);
		hlclProgram.add(AlcantarilladoImp);
		IntBooleanExpression AseoImp= factory.implies(variables.get("Aseo"), variables.get("Tipo_de_Servicio"));
		constraints.put("AseoImp", AseoImp);
		hlclProgram.add(AseoImp);
		IntBooleanExpression GasImp= factory.implies(variables.get("Gas"), variables.get("Tipo_de_Servicio"));
		constraints.put("GasImp", GasImp);
		hlclProgram.add(GasImp);
		IntBooleanExpression Alumbrado_PublicoImp= factory.implies(variables.get("Alumbrado_Publico"), variables.get("Tipo_de_Servicio"));
		constraints.put("Alumbrado_PublicoImp", Alumbrado_PublicoImp);
		hlclProgram.add(Alumbrado_PublicoImp);
		//sum
		IntNumericExpression plusC2=factory.sum(variables.get("Energia"),variables.get("Agua"),variables.get("Alcantarillado"),variables.get("Aseo"),variables.get("Gas"),variables.get("Alumbrado_Publico"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC2= factory.greaterOrEqualsThan(variables.get("Tipo_de_Servicio"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC2= factory.greaterOrEqualsThan(plusC2, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC2= factory.lessOrEqualsThan(plusC2, getValue("6"));
		
		IntBooleanExpression leftC2=factory.implies(parentSelectionC2,plusGTMinC2);
		IntBooleanExpression rightC2=factory.implies(parentSelectionC2, plusLTMaxC2);
		IntBooleanExpression C2=factory.and(leftC2, rightC2);
		constraints.put("C2", C2);
		hlclProgram.add(C2);
		//
		//declaring constraint C4
		//implies
		IntBooleanExpression RegAutomaticoImp= factory.implies(variables.get("RegAutomatico"), variables.get("Registro_Consumo"));
		constraints.put("RegAutomaticoImp", RegAutomaticoImp);
		hlclProgram.add(RegAutomaticoImp);
		IntBooleanExpression RegManualImp= factory.implies(variables.get("RegManual"), variables.get("Registro_Consumo"));
		constraints.put("RegManualImp", RegManualImp);
		hlclProgram.add(RegManualImp);
		IntBooleanExpression RegPrepagoImp= factory.implies(variables.get("RegPrepago"), variables.get("Registro_Consumo"));
		constraints.put("RegPrepagoImp", RegPrepagoImp);
		hlclProgram.add(RegPrepagoImp);
		//sum
		IntNumericExpression plusC4=factory.sum(variables.get("RegAutomatico"),variables.get("RegManual"),variables.get("RegPrepago"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC4= factory.greaterOrEqualsThan(variables.get("Registro_Consumo"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC4= factory.greaterOrEqualsThan(plusC4, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC4= factory.lessOrEqualsThan(plusC4, getValue("3"));
		
		IntBooleanExpression leftC4=factory.implies(parentSelectionC4,plusGTMinC4);
		IntBooleanExpression rightC4=factory.implies(parentSelectionC4, plusLTMaxC4);
		IntBooleanExpression C4=factory.and(leftC4, rightC4);
		constraints.put("C4", C4);
		hlclProgram.add(C4);
		//
		//declaring constraint C6
		//implies
		IntBooleanExpression Liq_ManualImp= factory.implies(variables.get("Liq_Manual"), variables.get("Liquidacion"));
		constraints.put("Liq_ManualImp", Liq_ManualImp);
		hlclProgram.add(Liq_ManualImp);
		IntBooleanExpression Liq_AutomaticaImp= factory.implies(variables.get("Liq_Automatica"), variables.get("Liquidacion"));
		constraints.put("Liq_AutomaticaImp", Liq_AutomaticaImp);
		hlclProgram.add(Liq_AutomaticaImp);
		//sum
		IntNumericExpression plusC6=factory.sum(variables.get("Liq_Manual"),variables.get("Liq_Automatica"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC6= factory.greaterOrEqualsThan(variables.get("Liquidacion"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC6= factory.greaterOrEqualsThan(plusC6, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC6= factory.lessOrEqualsThan(plusC6, getValue("2"));
		
		IntBooleanExpression leftC6=factory.implies(parentSelectionC6,plusGTMinC6);
		IntBooleanExpression rightC6=factory.implies(parentSelectionC6, plusLTMaxC6);
		IntBooleanExpression C6=factory.and(leftC6, rightC6);
		constraints.put("C6", C6);
		hlclProgram.add(C6);
		//
		//declaring constraint C7
		//implies
		IntBooleanExpression Generar_Doc_FacturaImp= factory.implies(variables.get("Generar_Doc_Factura"), variables.get("Liq_Manual"));
		constraints.put("Generar_Doc_FacturaImp", Generar_Doc_FacturaImp);
		hlclProgram.add(Generar_Doc_FacturaImp);
		IntBooleanExpression Subir_cargos_PendientesImp= factory.implies(variables.get("Subir_cargos_Pendientes"), variables.get("Liq_Manual"));
		constraints.put("Subir_cargos_PendientesImp", Subir_cargos_PendientesImp);
		hlclProgram.add(Subir_cargos_PendientesImp);
		//sum
		IntNumericExpression plusC7=factory.sum(variables.get("Generar_Doc_Factura"),variables.get("Subir_cargos_Pendientes"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC7= factory.greaterOrEqualsThan(variables.get("Liq_Manual"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC7= factory.greaterOrEqualsThan(plusC7, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC7= factory.lessOrEqualsThan(plusC7, getValue("2"));
		
		IntBooleanExpression leftC7=factory.implies(parentSelectionC7,plusGTMinC7);
		IntBooleanExpression rightC7=factory.implies(parentSelectionC7, plusLTMaxC7);
		IntBooleanExpression C7=factory.and(leftC7, rightC7);
		constraints.put("C7", C7);
		hlclProgram.add(C7);
		//
		//declaring constraint C8
		//implies
		IntBooleanExpression Liq_aut_IndividualImp= factory.implies(variables.get("Liq_aut_Individual"), variables.get("Liq_Automatica"));
		constraints.put("Liq_aut_IndividualImp", Liq_aut_IndividualImp);
		hlclProgram.add(Liq_aut_IndividualImp);
		IntBooleanExpression Liq_aut_MasivaImp= factory.implies(variables.get("Liq_aut_Masiva"), variables.get("Liq_Automatica"));
		constraints.put("Liq_aut_MasivaImp", Liq_aut_MasivaImp);
		hlclProgram.add(Liq_aut_MasivaImp);
		//sum
		IntNumericExpression plusC8=factory.sum(variables.get("Liq_aut_Individual"),variables.get("Liq_aut_Masiva"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC8= factory.greaterOrEqualsThan(variables.get("Liq_Automatica"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC8= factory.greaterOrEqualsThan(plusC8, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC8= factory.lessOrEqualsThan(plusC8, getValue("2"));
		
		IntBooleanExpression leftC8=factory.implies(parentSelectionC8,plusGTMinC8);
		IntBooleanExpression rightC8=factory.implies(parentSelectionC8, plusLTMaxC8);
		IntBooleanExpression C8=factory.and(leftC8, rightC8);
		constraints.put("C8", C8);
		hlclProgram.add(C8);
		//
		//declaring constraint C18
		//implies
		IntBooleanExpression Motor_secuencialImp= factory.implies(variables.get("Motor_secuencial"), variables.get("Motor_liquidacion"));
		constraints.put("Motor_secuencialImp", Motor_secuencialImp);
		hlclProgram.add(Motor_secuencialImp);
		IntBooleanExpression Motor_paraleloImp= factory.implies(variables.get("Motor_paralelo"), variables.get("Motor_liquidacion"));
		constraints.put("Motor_paraleloImp", Motor_paraleloImp);
		hlclProgram.add(Motor_paraleloImp);
		//sum
		IntNumericExpression plusC18=factory.sum(variables.get("Motor_secuencial"),variables.get("Motor_paralelo"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC18= factory.greaterOrEqualsThan(variables.get("Motor_liquidacion"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC18= factory.greaterOrEqualsThan(plusC18, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC18= factory.lessOrEqualsThan(plusC18, getValue("2"));
		
		IntBooleanExpression leftC18=factory.implies(parentSelectionC18,plusGTMinC18);
		IntBooleanExpression rightC18=factory.implies(parentSelectionC18, plusLTMaxC18);
		IntBooleanExpression C18=factory.and(leftC18, rightC18);
		constraints.put("C18", C18);
		hlclProgram.add(C18);
		//
		//declaring constraint C20
		//implies
		IntBooleanExpression Gest_Tar_ImpuestosImp= factory.implies(variables.get("Gest_Tar_Impuestos"), variables.get("Gestion_Tarifaria"));
		constraints.put("Gest_Tar_ImpuestosImp", Gest_Tar_ImpuestosImp);
		hlclProgram.add(Gest_Tar_ImpuestosImp);
		IntBooleanExpression Gest_Tar_Consumos_HorariosImp= factory.implies(variables.get("Gest_Tar_Consumos_Horarios"), variables.get("Gestion_Tarifaria"));
		constraints.put("Gest_Tar_Consumos_HorariosImp", Gest_Tar_Consumos_HorariosImp);
		hlclProgram.add(Gest_Tar_Consumos_HorariosImp);
		IntBooleanExpression Gest_Tar_Consumos_HorariosImp= factory.implies(variables.get("Gest_Tar_Consumos_Horarios"), variables.get("Gestion_Tarifaria"));
		constraints.put("Gest_Tar_Consumos_HorariosImp", Gest_Tar_Consumos_HorariosImp);
		hlclProgram.add(Gest_Tar_Consumos_HorariosImp);
		IntBooleanExpression Otros_CobrosImp= factory.implies(variables.get("Otros_Cobros"), variables.get("Gestion_Tarifaria"));
		constraints.put("Otros_CobrosImp", Otros_CobrosImp);
		hlclProgram.add(Otros_CobrosImp);
		//sum
		IntNumericExpression plusC20=factory.sum(variables.get("Gest_Tar_Impuestos"),variables.get("Gest_Tar_Consumos_Horarios"),variables.get("Gest_Tar_Consumos_Horarios"),variables.get("Otros_Cobros"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC20= factory.greaterOrEqualsThan(variables.get("Gestion_Tarifaria"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC20= factory.greaterOrEqualsThan(plusC20, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC20= factory.lessOrEqualsThan(plusC20, getValue("4"));
		
		IntBooleanExpression leftC20=factory.implies(parentSelectionC20,plusGTMinC20);
		IntBooleanExpression rightC20=factory.implies(parentSelectionC20, plusLTMaxC20);
		IntBooleanExpression C20=factory.and(leftC20, rightC20);
		constraints.put("C20", C20);
		hlclProgram.add(C20);
		//
		//declaring constraint C21
		//implies
		IntBooleanExpression Ges_tar_Reglas_DinamicasImp= factory.implies(variables.get("Ges_tar_Reglas_Dinamicas"), variables.get("Gestion_Tarifaria"));
		constraints.put("Ges_tar_Reglas_DinamicasImp", Ges_tar_Reglas_DinamicasImp);
		hlclProgram.add(Ges_tar_Reglas_DinamicasImp);
		IntBooleanExpression Ges_tar_reglas_codigoImp= factory.implies(variables.get("Ges_tar_reglas_codigo"), variables.get("Gestion_Tarifaria"));
		constraints.put("Ges_tar_reglas_codigoImp", Ges_tar_reglas_codigoImp);
		hlclProgram.add(Ges_tar_reglas_codigoImp);
		//sum
		IntNumericExpression plusC21=factory.sum(variables.get("Ges_tar_Reglas_Dinamicas"),variables.get("Ges_tar_reglas_codigo"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC21= factory.greaterOrEqualsThan(variables.get("Gestion_Tarifaria"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC21= factory.greaterOrEqualsThan(plusC21, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC21= factory.lessOrEqualsThan(plusC21, getValue("1"));
		
		IntBooleanExpression leftC21=factory.implies(parentSelectionC21,plusGTMinC21);
		IntBooleanExpression rightC21=factory.implies(parentSelectionC21, plusLTMaxC21);
		IntBooleanExpression C21=factory.and(leftC21, rightC21);
		constraints.put("C21", C21);
		hlclProgram.add(C21);
		//
		//declaring constraint C23
		//implies
		IntBooleanExpression Emis_fact_RegulatoriaImp= factory.implies(variables.get("Emis_fact_Regulatoria"), variables.get("Emision_factura"));
		constraints.put("Emis_fact_RegulatoriaImp", Emis_fact_RegulatoriaImp);
		hlclProgram.add(Emis_fact_RegulatoriaImp);
		IntBooleanExpression Emis_fact_Digital_Individual_WebImp= factory.implies(variables.get("Emis_fact_Digital_Individual_Web"), variables.get("Emision_factura"));
		constraints.put("Emis_fact_Digital_Individual_WebImp", Emis_fact_Digital_Individual_WebImp);
		hlclProgram.add(Emis_fact_Digital_Individual_WebImp);
		//sum
		IntNumericExpression plusC23=factory.sum(variables.get("Emis_fact_Regulatoria"),variables.get("Emis_fact_Digital_Individual_Web"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC23= factory.greaterOrEqualsThan(variables.get("Emision_factura"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC23= factory.greaterOrEqualsThan(plusC23, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC23= factory.lessOrEqualsThan(plusC23, getValue("2"));
		
		IntBooleanExpression leftC23=factory.implies(parentSelectionC23,plusGTMinC23);
		IntBooleanExpression rightC23=factory.implies(parentSelectionC23, plusLTMaxC23);
		IntBooleanExpression C23=factory.and(leftC23, rightC23);
		constraints.put("C23", C23);
		hlclProgram.add(C23);
		//
		//declaring constraint C24
		//implies
		IntBooleanExpression TicketImp= factory.implies(variables.get("Ticket"), variables.get("Emis_fact_Digital_Individual_Web"));
		constraints.put("TicketImp", TicketImp);
		hlclProgram.add(TicketImp);
		IntBooleanExpression CopiaFielImp= factory.implies(variables.get("CopiaFiel"), variables.get("Emis_fact_Digital_Individual_Web"));
		constraints.put("CopiaFielImp", CopiaFielImp);
		hlclProgram.add(CopiaFielImp);
		IntBooleanExpression EstadoCuentaImp= factory.implies(variables.get("EstadoCuenta"), variables.get("Emis_fact_Digital_Individual_Web"));
		constraints.put("EstadoCuentaImp", EstadoCuentaImp);
		hlclProgram.add(EstadoCuentaImp);
		//sum
		IntNumericExpression plusC24=factory.sum(variables.get("Ticket"),variables.get("CopiaFiel"),variables.get("EstadoCuenta"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC24= factory.greaterOrEqualsThan(variables.get("Emis_fact_Digital_Individual_Web"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC24= factory.greaterOrEqualsThan(plusC24, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC24= factory.lessOrEqualsThan(plusC24, getValue("3"));
		
		IntBooleanExpression leftC24=factory.implies(parentSelectionC24,plusGTMinC24);
		IntBooleanExpression rightC24=factory.implies(parentSelectionC24, plusLTMaxC24);
		IntBooleanExpression C24=factory.and(leftC24, rightC24);
		constraints.put("C24", C24);
		hlclProgram.add(C24);
		//
		//declaring constraint C26
		//implies
		IntBooleanExpression Conf_fact_Modulo_extraccionImp= factory.implies(variables.get("Conf_fact_Modulo_extraccion"), variables.get("Conf_Factura"));
		constraints.put("Conf_fact_Modulo_extraccionImp", Conf_fact_Modulo_extraccionImp);
		hlclProgram.add(Conf_fact_Modulo_extraccionImp);
		IntBooleanExpression Conf_fact_estaticoImp= factory.implies(variables.get("Conf_fact_estatico"), variables.get("Conf_Factura"));
		constraints.put("Conf_fact_estaticoImp", Conf_fact_estaticoImp);
		hlclProgram.add(Conf_fact_estaticoImp);
		//sum
		IntNumericExpression plusC26=factory.sum(variables.get("Conf_fact_Modulo_extraccion"),variables.get("Conf_fact_estatico"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC26= factory.greaterOrEqualsThan(variables.get("Conf_Factura"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC26= factory.greaterOrEqualsThan(plusC26, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC26= factory.lessOrEqualsThan(plusC26, getValue("1"));
		
		IntBooleanExpression leftC26=factory.implies(parentSelectionC26,plusGTMinC26);
		IntBooleanExpression rightC26=factory.implies(parentSelectionC26, plusLTMaxC26);
		IntBooleanExpression C26=factory.and(leftC26, rightC26);
		constraints.put("C26", C26);
		hlclProgram.add(C26);
		//
		//declaring constraint C28
		//implies
		IntBooleanExpression An_cons_sencillosImp= factory.implies(variables.get("An_cons_sencillos"), variables.get("Analisis_Consumos"));
		constraints.put("An_cons_sencillosImp", An_cons_sencillosImp);
		hlclProgram.add(An_cons_sencillosImp);
		IntBooleanExpression An_cons_horariosImp= factory.implies(variables.get("An_cons_horarios"), variables.get("Analisis_Consumos"));
		constraints.put("An_cons_horariosImp", An_cons_horariosImp);
		hlclProgram.add(An_cons_horariosImp);
		IntBooleanExpression An_PerdidasImp= factory.implies(variables.get("An_Perdidas"), variables.get("Analisis_Consumos"));
		constraints.put("An_PerdidasImp", An_PerdidasImp);
		hlclProgram.add(An_PerdidasImp);
		//sum
		IntNumericExpression plusC28=factory.sum(variables.get("An_cons_sencillos"),variables.get("An_cons_horarios"),variables.get("An_Perdidas"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC28= factory.greaterOrEqualsThan(variables.get("Analisis_Consumos"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC28= factory.greaterOrEqualsThan(plusC28, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC28= factory.lessOrEqualsThan(plusC28, getValue("3"));
		
		IntBooleanExpression leftC28=factory.implies(parentSelectionC28,plusGTMinC28);
		IntBooleanExpression rightC28=factory.implies(parentSelectionC28, plusLTMaxC28);
		IntBooleanExpression C28=factory.and(leftC28, rightC28);
		constraints.put("C28", C28);
		hlclProgram.add(C28);
		//
		//declaring constraint C29
		//implies
		IntBooleanExpression An_sen_MineriaImp= factory.implies(variables.get("An_sen_Mineria"), variables.get("An_cons_sencillos"));
		constraints.put("An_sen_MineriaImp", An_sen_MineriaImp);
		hlclProgram.add(An_sen_MineriaImp);
		IntBooleanExpression An_sen_reglasImp= factory.implies(variables.get("An_sen_reglas"), variables.get("An_cons_sencillos"));
		constraints.put("An_sen_reglasImp", An_sen_reglasImp);
		hlclProgram.add(An_sen_reglasImp);
		//sum
		IntNumericExpression plusC29=factory.sum(variables.get("An_sen_Mineria"),variables.get("An_sen_reglas"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC29= factory.greaterOrEqualsThan(variables.get("An_cons_sencillos"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC29= factory.greaterOrEqualsThan(plusC29, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC29= factory.lessOrEqualsThan(plusC29, getValue("1"));
		
		IntBooleanExpression leftC29=factory.implies(parentSelectionC29,plusGTMinC29);
		IntBooleanExpression rightC29=factory.implies(parentSelectionC29, plusLTMaxC29);
		IntBooleanExpression C29=factory.and(leftC29, rightC29);
		constraints.put("C29", C29);
		hlclProgram.add(C29);
		//
		//declaring constraint C30
		//implies
		IntBooleanExpression An_hor_MineriaImp= factory.implies(variables.get("An_hor_Mineria"), variables.get("An_cons_horarios"));
		constraints.put("An_hor_MineriaImp", An_hor_MineriaImp);
		hlclProgram.add(An_hor_MineriaImp);
		IntBooleanExpression An_hor_ReglasImp= factory.implies(variables.get("An_hor_Reglas"), variables.get("An_cons_horarios"));
		constraints.put("An_hor_ReglasImp", An_hor_ReglasImp);
		hlclProgram.add(An_hor_ReglasImp);
		//sum
		IntNumericExpression plusC30=factory.sum(variables.get("An_hor_Mineria"),variables.get("An_hor_Reglas"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC30= factory.greaterOrEqualsThan(variables.get("An_cons_horarios"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC30= factory.greaterOrEqualsThan(plusC30, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC30= factory.lessOrEqualsThan(plusC30, getValue("1"));
		
		IntBooleanExpression leftC30=factory.implies(parentSelectionC30,plusGTMinC30);
		IntBooleanExpression rightC30=factory.implies(parentSelectionC30, plusLTMaxC30);
		IntBooleanExpression C30=factory.and(leftC30, rightC30);
		constraints.put("C30", C30);
		hlclProgram.add(C30);
		//
		//declaring constraint C31
		//implies
		IntBooleanExpression An_perdidas_SectoresImp= factory.implies(variables.get("An_perdidas_Sectores"), variables.get("An_Perdidas"));
		constraints.put("An_perdidas_SectoresImp", An_perdidas_SectoresImp);
		hlclProgram.add(An_perdidas_SectoresImp);
		IntBooleanExpression An_perdidas_AgregadoImp= factory.implies(variables.get("An_perdidas_Agregado"), variables.get("An_Perdidas"));
		constraints.put("An_perdidas_AgregadoImp", An_perdidas_AgregadoImp);
		hlclProgram.add(An_perdidas_AgregadoImp);
		//sum
		IntNumericExpression plusC31=factory.sum(variables.get("An_perdidas_Sectores"),variables.get("An_perdidas_Agregado"));
		
		// selection of parent
		IntBooleanExpression parentSelectionC31= factory.greaterOrEqualsThan(variables.get("An_Perdidas"), getValue("1"));
		
		//plusMin
		IntBooleanExpression plusGTMinC31= factory.greaterOrEqualsThan(plusC31, getValue("1"));
		
		//plusMax
		IntBooleanExpression plusLTMaxC31= factory.lessOrEqualsThan(plusC31, getValue("1"));
		
		IntBooleanExpression leftC31=factory.implies(parentSelectionC31,plusGTMinC31);
		IntBooleanExpression rightC31=factory.implies(parentSelectionC31, plusLTMaxC31);
		IntBooleanExpression C31=factory.and(leftC31, rightC31);
		constraints.put("C31", C31);
		hlclProgram.add(C31);
	}
	public boolean evaluateSatisfiability(){
		// the output
		boolean evaluation= false;
		// //to transform the hllcl program into a prolog  file, 
		// //these lines are commented because they are useful for debugging 
		Hlcl2SWIProlog swiPrologTransformer = new Hlcl2SWIProlog(); 
		prologProgram = swiPrologTransformer.transform(hlclProgram);
				
		// an instance of the solver for Swiprolog 
		swiSolver= new SWIPrologSolver();
		swiSolver.setHLCLProgram(hlclProgram); //passing the hlcl program to the solver
		swiSolver.solve(); // This methhod prepares the solver 
		List<SolverSolution> solutions = swiSolver.getAllSolutions(); // Consulting if the solver has one solution
			evaluation= solutions.size()>0;
			for (SolverSolution solverSolution : solutions) {
				System.out.println(solverSolution.toString());
			}	return evaluation;
	}
	/** 
	* To obtain the NumericIdentifier representation of a value 
	* @param id the string with the value 
	* @return the NumericIdentifier 
	*/
	public NumericIdentifier getValue(String id) {	NumericIdentifier value= numbers.get(id); 
	 	if (value==null) { 
	 		if (id.equals("selected")) { 
	 			value= numbers.get("1"); 
	 		} 
	 		else if(id.equals("unselected")) {
				value= numbers.get("0"); 
			} 
			else { 
				value= factory.number(Integer.parseInt(id)); 
				numbers.put(id, value);
			}
	 	} 
	 	return value; 
	 } 
		public String getModelName() {
			return modelName;
		}
		public void setModelName(String modelName) {
			this.modelName = modelName;
		}
		public HlclFactory getFactory() {
			return factory;
		}
		public void setFactory(HlclFactory factory) {
			this.factory = factory;
		}
		public HlclProgram getHlclProgram() {
			return hlclProgram;
		}
		public void setHlclProgram(HlclProgram hlclProgram) {
			this.hlclProgram = hlclProgram;
		}
} 	