/*
 * generated by Xtext 2.12.0
 */
grammar InternalHLCLSpecificationLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.HLCLSpecificationLanguageGrammarAccess;

}

@parser::members {

 	private HLCLSpecificationLanguageGrammarAccess grammarAccess;

    public InternalHLCLSpecificationLanguageParser(TokenStream input, HLCLSpecificationLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected HLCLSpecificationLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='model'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='variables:'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelAccess().getVariablesKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getVarsVarDeclarationParserRuleCall_3_0());
				}
				lv_vars_3_0=ruleVarDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"vars",
						lv_vars_3_0,
						"org.xtext.HLCLSpecificationLanguage.VarDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='constraints:'
		{
			newLeafNode(otherlv_4, grammarAccess.getModelAccess().getConstraintsKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getConstraintsConstraintParserRuleCall_5_0());
				}
				lv_constraints_5_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_5_0,
						"org.xtext.HLCLSpecificationLanguage.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getVarDeclarationAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getVarDeclarationAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getVarDeclarationAccess().getUnorderedGroup(), 0);
				}
							({true}?=>((
								lv_instantiable_1_0='instantiable'
								{
									newLeafNode(lv_instantiable_1_0, grammarAccess.getVarDeclarationAccess().getInstantiableInstantiableKeyword_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getVarDeclarationRule());
									}
									setWithLastConsumed($current, "instantiable", true, "instantiable");
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVarDeclarationAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getVarDeclarationAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getVarDeclarationAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								(
									{
										newCompositeNode(grammarAccess.getVarDeclarationAccess().getTypeVarTypeParserRuleCall_1_0_0());
									}
									lv_type_2_0=ruleVarType
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
										}
										set(
											$current,
											"type",
											lv_type_2_0,
											"org.xtext.HLCLSpecificationLanguage.VarType");
										afterParserOrEnumRuleCall();
									}
								)
							)
							(
								(
									lv_name_3_0=RULE_ID
									{
										newLeafNode(lv_name_3_0, grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getVarDeclarationRule());
										}
										setWithLastConsumed(
											$current,
											"name",
											lv_name_3_0,
											"org.eclipse.xtext.common.Terminals.ID");
									}
								)
							)
							otherlv_4='variants:'
							{
								newLeafNode(otherlv_4, grammarAccess.getVarDeclarationAccess().getVariantsKeyword_1_2());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getVarDeclarationAccess().getVariantsVariantDeclarationParserRuleCall_1_3_0());
									}
									lv_variants_5_0=ruleVariantDeclaration
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
										}
										set(
											$current,
											"variants",
											lv_variants_5_0,
											"org.xtext.HLCLSpecificationLanguage.VariantDeclaration");
										afterParserOrEnumRuleCall();
									}
								)
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVarDeclarationAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getVarDeclarationAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getVarDeclarationAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleVariantDeclaration
entryRuleVariantDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariantDeclarationRule()); }
	iv_ruleVariantDeclaration=ruleVariantDeclaration
	{ $current=$iv_ruleVariantDeclaration.current; }
	EOF;

// Rule VariantDeclaration
ruleVariantDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariantDeclarationAccess().getVariantsIntervalParserRuleCall_0());
		}
		this_variantsInterval_0=rulevariantsInterval
		{
			$current = $this_variantsInterval_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariantDeclarationAccess().getVariantsEnumerationParserRuleCall_1());
		}
		this_variantsEnumeration_1=rulevariantsEnumeration
		{
			$current = $this_variantsEnumeration_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulevariantsInterval
entryRulevariantsInterval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariantsIntervalRule()); }
	iv_rulevariantsInterval=rulevariantsInterval
	{ $current=$iv_rulevariantsInterval.current; }
	EOF;

// Rule variantsInterval
rulevariantsInterval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariantsIntervalAccess().getVariantsIntervalAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantsIntervalAccess().getStartValueParserRuleCall_1_0());
				}
				lv_start_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantsIntervalRule());
					}
					set(
						$current,
						"start",
						lv_start_1_0,
						"org.xtext.HLCLSpecificationLanguage.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='::'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariantsIntervalAccess().getColonColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantsIntervalAccess().getEndValueParserRuleCall_3_0());
				}
				lv_end_3_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantsIntervalRule());
					}
					set(
						$current,
						"end",
						lv_end_3_0,
						"org.xtext.HLCLSpecificationLanguage.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariantsEnumeration
entryRulevariantsEnumeration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariantsEnumerationRule()); }
	iv_rulevariantsEnumeration=rulevariantsEnumeration
	{ $current=$iv_rulevariantsEnumeration.current; }
	EOF;

// Rule variantsEnumeration
rulevariantsEnumeration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariantsEnumerationAccess().getVariantsEnumerationAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getVariantsEnumerationAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantsEnumerationAccess().getListEnumerationParserRuleCall_2_0());
				}
				lv_list_2_0=ruleEnumeration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantsEnumerationRule());
					}
					set(
						$current,
						"list",
						lv_list_2_0,
						"org.xtext.HLCLSpecificationLanguage.Enumeration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getVariantsEnumerationAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationRule()); }
	iv_ruleEnumeration=ruleEnumeration
	{ $current=$iv_ruleEnumeration.current; }
	EOF;

// Rule Enumeration
ruleEnumeration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationAccess().getValuesListOfValuesParserRuleCall_0_0());
				}
				lv_values_0_0=ruleListOfValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationRule());
					}
					set(
						$current,
						"values",
						lv_values_0_0,
						"org.xtext.HLCLSpecificationLanguage.ListOfValues");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getEnumerationAccess().getListOfIDsParserRuleCall_1());
		}
		this_ListOfIDs_1=ruleListOfIDs
		{
			$current = $this_ListOfIDs_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getConstraintAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getExpConsExpressionParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleConsExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"org.xtext.HLCLSpecificationLanguage.ConsExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConsExpression
entryRuleConsExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConsExpressionRule()); }
	iv_ruleConsExpression=ruleConsExpression
	{ $current=$iv_ruleConsExpression.current; }
	EOF;

// Rule ConsExpression
ruleConsExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConsExpressionAccess().getIDConsParserRuleCall_0());
		}
		this_IDCons_0=ruleIDCons
		{
			$current = $this_IDCons_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConsExpressionAccess().getRefinementParserRuleCall_1());
		}
		this_Refinement_1=ruleRefinement
		{
			$current = $this_Refinement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConsExpressionAccess().getRuleParserRuleCall_2());
		}
		this_Rule_2=ruleRule
		{
			$current = $this_Rule_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConsExpressionAccess().getFodaBinParserRuleCall_3());
		}
		this_FodaBin_3=ruleFodaBin
		{
			$current = $this_FodaBin_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConsExpressionAccess().getFodaNaryParserRuleCall_4());
		}
		this_FodaNary_4=ruleFodaNary
		{
			$current = $this_FodaNary_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConsExpressionAccess().getFodaUNParserRuleCall_5());
		}
		this_FodaUN_5=ruleFodaUN
		{
			$current = $this_FodaUN_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTerminalExp
entryRuleTerminalExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminalExpRule()); }
	iv_ruleTerminalExp=ruleTerminalExp
	{ $current=$iv_ruleTerminalExp.current; }
	EOF;

// Rule TerminalExp
ruleTerminalExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getTerminalExpAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getTerminalExpAccess().getConsExpressionParserRuleCall_0_1());
			}
			this_ConsExpression_1=ruleConsExpression
			{
				$current = $this_ConsExpression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getTerminalExpAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getTerminalExpAccess().getIDConsParserRuleCall_1());
		}
		this_IDCons_3=ruleIDCons
		{
			$current = $this_IDCons_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIDCons
entryRuleIDCons returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIDConsRule()); }
	iv_ruleIDCons=ruleIDCons
	{ $current=$iv_ruleIDCons.current; }
	EOF;

// Rule IDCons
ruleIDCons returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getIDConsAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIDConsRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleRefinement
entryRuleRefinement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefinementRule()); }
	iv_ruleRefinement=ruleRefinement
	{ $current=$iv_ruleRefinement.current; }
	EOF;

// Rule Refinement
ruleRefinement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRefinementAccess().getAssignmentParserRuleCall_0());
		}
		this_Assignment_0=ruleAssignment
		{
			$current = $this_Assignment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRefinementAccess().getVarRefinementParserRuleCall_1());
		}
		this_VarRefinement_1=ruleVarRefinement
		{
			$current = $this_VarRefinement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRefinementAccess().getSetRefinementParserRuleCall_2());
		}
		this_SetRefinement_2=ruleSetRefinement
		{
			$current = $this_SetRefinement_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var_0_0=RULE_ID
				{
					newLeafNode(lv_var_0_0, grammarAccess.getAssignmentAccess().getVarIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getIsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.xtext.HLCLSpecificationLanguage.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVarRefinement
entryRuleVarRefinement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRefinementRule()); }
	iv_ruleVarRefinement=ruleVarRefinement
	{ $current=$iv_ruleVarRefinement.current; }
	EOF;

// Rule VarRefinement
ruleVarRefinement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var_0_0=RULE_ID
				{
					newLeafNode(lv_var_0_0, grammarAccess.getVarRefinementAccess().getVarIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarRefinementRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='in'
		{
			newLeafNode(otherlv_1, grammarAccess.getVarRefinementAccess().getInKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarRefinementAccess().getVariantsVariantDeclarationParserRuleCall_2_0());
				}
				lv_variants_2_0=ruleVariantDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarRefinementRule());
					}
					set(
						$current,
						"variants",
						lv_variants_2_0,
						"org.xtext.HLCLSpecificationLanguage.VariantDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSetRefinement
entryRuleSetRefinement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetRefinementRule()); }
	iv_ruleSetRefinement=ruleSetRefinement
	{ $current=$iv_ruleSetRefinement.current; }
	EOF;

// Rule SetRefinement
ruleSetRefinement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getSetRefinementAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetRefinementAccess().getVarsListOfIDsParserRuleCall_1_0());
				}
				lv_vars_1_0=ruleListOfIDs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetRefinementRule());
					}
					set(
						$current,
						"vars",
						lv_vars_1_0,
						"org.xtext.HLCLSpecificationLanguage.ListOfIDs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getSetRefinementAccess().getRightParenthesisKeyword_2());
		}
		otherlv_3='variants'
		{
			newLeafNode(otherlv_3, grammarAccess.getSetRefinementAccess().getVariantsKeyword_3());
		}
		otherlv_4='['
		{
			newLeafNode(otherlv_4, grammarAccess.getSetRefinementAccess().getLeftSquareBracketKeyword_4());
		}
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getSetRefinementAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetRefinementAccess().getHeadListOfValuesParserRuleCall_6_0());
				}
				lv_head_6_0=ruleListOfValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetRefinementRule());
					}
					set(
						$current,
						"head",
						lv_head_6_0,
						"org.xtext.HLCLSpecificationLanguage.ListOfValues");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getSetRefinementAccess().getRightParenthesisKeyword_7());
		}
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getSetRefinementAccess().getCommaKeyword_8_0());
			}
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getSetRefinementAccess().getLeftParenthesisKeyword_8_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSetRefinementAccess().getTailListOfValuesParserRuleCall_8_2_0());
					}
					lv_tail_10_0=ruleListOfValues
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetRefinementRule());
						}
						add(
							$current,
							"tail",
							lv_tail_10_0,
							"org.xtext.HLCLSpecificationLanguage.ListOfValues");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getSetRefinementAccess().getRightParenthesisKeyword_8_3());
			}
		)+
		otherlv_12=']'
		{
			newLeafNode(otherlv_12, grammarAccess.getSetRefinementAccess().getRightSquareBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getConditionTerminalExpParserRuleCall_0_0());
				}
				lv_condition_0_0=ruleTerminalExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"condition",
						lv_condition_0_0,
						"org.xtext.HLCLSpecificationLanguage.TerminalExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='-->'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getConsequenceTerminalExpParserRuleCall_2_0());
				}
				lv_consequence_2_0=ruleTerminalExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"consequence",
						lv_consequence_2_0,
						"org.xtext.HLCLSpecificationLanguage.TerminalExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFodaUN
entryRuleFodaUN returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFodaUNRule()); }
	iv_ruleFodaUN=ruleFodaUN
	{ $current=$iv_ruleFodaUN.current; }
	EOF;

// Rule FodaUN
ruleFodaUN returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var_0_0=RULE_ID
				{
					newLeafNode(lv_var_0_0, grammarAccess.getFodaUNAccess().getVarIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFodaUNRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getFodaUNAccess().getIsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFodaUNAccess().getOpUnaryOpParserRuleCall_2_0());
				}
				lv_op_2_0=ruleUnaryOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFodaUNRule());
					}
					set(
						$current,
						"op",
						lv_op_2_0,
						"org.xtext.HLCLSpecificationLanguage.UnaryOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFodaBin
entryRuleFodaBin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFodaBinRule()); }
	iv_ruleFodaBin=ruleFodaBin
	{ $current=$iv_ruleFodaBin.current; }
	EOF;

// Rule FodaBin
ruleFodaBin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var1_0_0=RULE_ID
				{
					newLeafNode(lv_var1_0_0, grammarAccess.getFodaBinAccess().getVar1IDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFodaBinRule());
					}
					setWithLastConsumed(
						$current,
						"var1",
						lv_var1_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFodaBinAccess().getOpBinOpParserRuleCall_1_0());
				}
				lv_op_1_0=ruleBinOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFodaBinRule());
					}
					set(
						$current,
						"op",
						lv_op_1_0,
						"org.xtext.HLCLSpecificationLanguage.BinOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_var2_2_0=RULE_ID
				{
					newLeafNode(lv_var2_2_0, grammarAccess.getFodaBinAccess().getVar2IDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFodaBinRule());
					}
					setWithLastConsumed(
						$current,
						"var2",
						lv_var2_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleFodaNary
entryRuleFodaNary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFodaNaryRule()); }
	iv_ruleFodaNary=ruleFodaNary
	{ $current=$iv_ruleFodaNary.current; }
	EOF;

// Rule FodaNary
ruleFodaNary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='parent:'
		{
			newLeafNode(otherlv_0, grammarAccess.getFodaNaryAccess().getParentKeyword_0());
		}
		(
			(
				lv_parent_1_0=RULE_ID
				{
					newLeafNode(lv_parent_1_0, grammarAccess.getFodaNaryAccess().getParentIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFodaNaryRule());
					}
					setWithLastConsumed(
						$current,
						"parent",
						lv_parent_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='group:'
		{
			newLeafNode(otherlv_2, grammarAccess.getFodaNaryAccess().getGroupKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFodaNaryAccess().getGroupListOfIDsParserRuleCall_3_0());
				}
				lv_group_3_0=ruleListOfIDs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFodaNaryRule());
					}
					set(
						$current,
						"group",
						lv_group_3_0,
						"org.xtext.HLCLSpecificationLanguage.ListOfIDs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='card:'
		{
			newLeafNode(otherlv_4, grammarAccess.getFodaNaryAccess().getCardKeyword_4());
		}
		otherlv_5='['
		{
			newLeafNode(otherlv_5, grammarAccess.getFodaNaryAccess().getLeftSquareBracketKeyword_5());
		}
		(
			(
				lv_min_6_0=RULE_INT
				{
					newLeafNode(lv_min_6_0, grammarAccess.getFodaNaryAccess().getMinINTTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFodaNaryRule());
					}
					setWithLastConsumed(
						$current,
						"min",
						lv_min_6_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_7=','
		{
			newLeafNode(otherlv_7, grammarAccess.getFodaNaryAccess().getCommaKeyword_7());
		}
		(
			(
				lv_max_8_0=RULE_INT
				{
					newLeafNode(lv_max_8_0, grammarAccess.getFodaNaryAccess().getMaxINTTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFodaNaryRule());
					}
					setWithLastConsumed(
						$current,
						"max",
						lv_max_8_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_9=']'
		{
			newLeafNode(otherlv_9, grammarAccess.getFodaNaryAccess().getRightSquareBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current.getText(); }
	EOF;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getValueAccess().getINTTerminalRuleCall_0());
		}
		    |
		kw='selected'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getValueAccess().getSelectedKeyword_1());
		}
		    |
		kw='unselected'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getValueAccess().getUnselectedKeyword_2());
		}
	)
;

// Entry rule entryRuleVarType
entryRuleVarType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarTypeRule()); }
	iv_ruleVarType=ruleVarType
	{ $current=$iv_ruleVarType.current.getText(); }
	EOF;

// Rule VarType
ruleVarType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeAccess().getBooleanKeyword_0());
		}
		    |
		kw='numeric'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeAccess().getNumericKeyword_1());
		}
	)
;

// Entry rule entryRuleListOfValues
entryRuleListOfValues returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListOfValuesRule()); }
	iv_ruleListOfValues=ruleListOfValues
	{ $current=$iv_ruleListOfValues.current; }
	EOF;

// Rule ListOfValues
ruleListOfValues returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getListOfValuesAccess().getValuesValueParserRuleCall_0());
			}
			lv_values_0_0=ruleValue
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getListOfValuesRule());
				}
				add(
					$current,
					"values",
					lv_values_0_0,
					"org.xtext.HLCLSpecificationLanguage.Value");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleListOfIDs
entryRuleListOfIDs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListOfIDsRule()); }
	iv_ruleListOfIDs=ruleListOfIDs
	{ $current=$iv_ruleListOfIDs.current; }
	EOF;

// Rule ListOfIDs
ruleListOfIDs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_ids_0_0=RULE_ID
			{
				newLeafNode(lv_ids_0_0, grammarAccess.getListOfIDsAccess().getIdsIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getListOfIDsRule());
				}
				addWithLastConsumed(
					$current,
					"ids",
					lv_ids_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)+
;

// Entry rule entryRuleBinOp
entryRuleBinOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinOpRule()); }
	iv_ruleBinOp=ruleBinOp
	{ $current=$iv_ruleBinOp.current.getText(); }
	EOF;

// Rule BinOp
ruleBinOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='requires'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getRequiresKeyword_0());
		}
		    |
		kw='excludes'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getExcludesKeyword_1());
		}
	)
;

// Entry rule entryRuleUnaryOp
entryRuleUnaryOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOpRule()); }
	iv_ruleUnaryOp=ruleUnaryOp
	{ $current=$iv_ruleUnaryOp.current.getText(); }
	EOF;

// Rule UnaryOp
ruleUnaryOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='optional'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOpAccess().getOptionalKeyword_0());
		}
		    |
		kw='mandatory'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOpAccess().getMandatoryKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
