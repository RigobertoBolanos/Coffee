/*
 * generated by Xtext 2.12.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.hLCLSpecificationLanguage.Assignment;
import org.xtext.hLCLSpecificationLanguage.Constraint;
import org.xtext.hLCLSpecificationLanguage.Enumeration;
import org.xtext.hLCLSpecificationLanguage.HLCLSpecificationLanguagePackage;
import org.xtext.hLCLSpecificationLanguage.IDCons;
import org.xtext.hLCLSpecificationLanguage.ListOfIDs;
import org.xtext.hLCLSpecificationLanguage.ListOfValues;
import org.xtext.hLCLSpecificationLanguage.Model;
import org.xtext.hLCLSpecificationLanguage.Rule;
import org.xtext.hLCLSpecificationLanguage.SPLNotation;
import org.xtext.hLCLSpecificationLanguage.SetRefinement;
import org.xtext.hLCLSpecificationLanguage.VarDeclaration;
import org.xtext.hLCLSpecificationLanguage.VarRefinement;
import org.xtext.hLCLSpecificationLanguage.variantsEnumeration;
import org.xtext.hLCLSpecificationLanguage.variantsInterval;
import org.xtext.services.HLCLSpecificationLanguageGrammarAccess;

@SuppressWarnings("all")
public class HLCLSpecificationLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HLCLSpecificationLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HLCLSpecificationLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HLCLSpecificationLanguagePackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.CONSTRAINT:
				sequence_Constraint(context, (Constraint) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.ID_CONS:
				sequence_IDCons(context, (IDCons) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.LIST_OF_IDS:
				sequence_ListOfIDs(context, (ListOfIDs) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.LIST_OF_VALUES:
				sequence_ListOfValues(context, (ListOfValues) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.SPL_NOTATION:
				sequence_SPLNotation(context, (SPLNotation) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.SET_REFINEMENT:
				sequence_SetRefinement(context, (SetRefinement) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.VAR_DECLARATION:
				sequence_VarDeclaration(context, (VarDeclaration) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.VAR_REFINEMENT:
				sequence_VarRefinement(context, (VarRefinement) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.VARIANTS_ENUMERATION:
				sequence_variantsEnumeration(context, (variantsEnumeration) semanticObject); 
				return; 
			case HLCLSpecificationLanguagePackage.VARIANTS_INTERVAL:
				sequence_variantsInterval(context, (variantsInterval) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ConsExpression returns Assignment
	 *     TerminalExp returns Assignment
	 *     Refinement returns Assignment
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     (var=ID value=Value)
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.ASSIGNMENT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.ASSIGNMENT__VAR));
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.ASSIGNMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.ASSIGNMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignmentAccess().getVarIDTerminalRuleCall_0_0(), semanticObject.getVar());
		feeder.accept(grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Constraint returns Constraint
	 *
	 * Constraint:
	 *     (name=ID exp=ConsExpression)
	 */
	protected void sequence_Constraint(ISerializationContext context, Constraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.CONSTRAINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.CONSTRAINT__NAME));
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.CONSTRAINT__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.CONSTRAINT__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConstraintAccess().getExpConsExpressionParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     values=ListOfValues
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.ENUMERATION__VALUES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.ENUMERATION__VALUES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnumerationAccess().getValuesListOfValuesParserRuleCall_0_0(), semanticObject.getValues());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConsExpression returns IDCons
	 *     TerminalExp returns IDCons
	 *     IDCons returns IDCons
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_IDCons(ISerializationContext context, IDCons semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.ID_CONS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.ID_CONS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIDConsAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Enumeration returns ListOfIDs
	 *     ListOfIDs returns ListOfIDs
	 *
	 * Constraint:
	 *     ids+=ID
	 */
	protected void sequence_ListOfIDs(ISerializationContext context, ListOfIDs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ListOfValues returns ListOfValues
	 *
	 * Constraint:
	 *     values+=Value+
	 */
	protected void sequence_ListOfValues(ISerializationContext context, ListOfValues semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID vars+=VarDeclaration+ constraints+=Constraint+)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConsExpression returns Rule
	 *     TerminalExp returns Rule
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (condition=TerminalExp consequence=TerminalExp)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.RULE__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.RULE__CONDITION));
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.RULE__CONSEQUENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.RULE__CONSEQUENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRuleAccess().getConditionTerminalExpParserRuleCall_0_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getRuleAccess().getConsequenceTerminalExpParserRuleCall_2_0(), semanticObject.getConsequence());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConsExpression returns SPLNotation
	 *     TerminalExp returns SPLNotation
	 *     SPLNotation returns SPLNotation
	 *
	 * Constraint:
	 *     (var1=ID op=SPLop var2=ID)
	 */
	protected void sequence_SPLNotation(ISerializationContext context, SPLNotation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.SPL_NOTATION__VAR1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.SPL_NOTATION__VAR1));
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.SPL_NOTATION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.SPL_NOTATION__OP));
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.SPL_NOTATION__VAR2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.SPL_NOTATION__VAR2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSPLNotationAccess().getVar1IDTerminalRuleCall_0_0(), semanticObject.getVar1());
		feeder.accept(grammarAccess.getSPLNotationAccess().getOpSPLopParserRuleCall_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getSPLNotationAccess().getVar2IDTerminalRuleCall_2_0(), semanticObject.getVar2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConsExpression returns SetRefinement
	 *     TerminalExp returns SetRefinement
	 *     Refinement returns SetRefinement
	 *     SetRefinement returns SetRefinement
	 *
	 * Constraint:
	 *     (vars=ListOfIDs head=ListOfValues tail+=ListOfValues+)
	 */
	protected void sequence_SetRefinement(ISerializationContext context, SetRefinement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarDeclaration returns VarDeclaration
	 *
	 * Constraint:
	 *     (instantiable?='instantiable' | (type=VarType name=ID variants=VariantDeclaration))+
	 */
	protected void sequence_VarDeclaration(ISerializationContext context, VarDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConsExpression returns VarRefinement
	 *     TerminalExp returns VarRefinement
	 *     Refinement returns VarRefinement
	 *     VarRefinement returns VarRefinement
	 *
	 * Constraint:
	 *     (var=ID variants=VariantDeclaration)
	 */
	protected void sequence_VarRefinement(ISerializationContext context, VarRefinement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.VAR_REFINEMENT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.VAR_REFINEMENT__VAR));
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.VAR_REFINEMENT__VARIANTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.VAR_REFINEMENT__VARIANTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarRefinementAccess().getVarIDTerminalRuleCall_0_0(), semanticObject.getVar());
		feeder.accept(grammarAccess.getVarRefinementAccess().getVariantsVariantDeclarationParserRuleCall_2_0(), semanticObject.getVariants());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariantDeclaration returns variantsEnumeration
	 *     variantsEnumeration returns variantsEnumeration
	 *
	 * Constraint:
	 *     list=Enumeration
	 */
	protected void sequence_variantsEnumeration(ISerializationContext context, variantsEnumeration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.VARIANTS_ENUMERATION__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.VARIANTS_ENUMERATION__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariantsEnumerationAccess().getListEnumerationParserRuleCall_2_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariantDeclaration returns variantsInterval
	 *     variantsInterval returns variantsInterval
	 *
	 * Constraint:
	 *     (start=Value end=Value)
	 */
	protected void sequence_variantsInterval(ISerializationContext context, variantsInterval semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.VARIANTS_INTERVAL__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.VARIANTS_INTERVAL__START));
			if (transientValues.isValueTransient(semanticObject, HLCLSpecificationLanguagePackage.Literals.VARIANTS_INTERVAL__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HLCLSpecificationLanguagePackage.Literals.VARIANTS_INTERVAL__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariantsIntervalAccess().getStartValueParserRuleCall_1_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getVariantsIntervalAccess().getEndValueParserRuleCall_3_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
}
