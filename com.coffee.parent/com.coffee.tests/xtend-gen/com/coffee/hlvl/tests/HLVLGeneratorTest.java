/**
 * generated by Xtext 2.12.0
 */
package com.coffee.hlvl.tests;

import com.coffee.hlvl.generator.Dialect;
import com.coffee.hlvl.generator.IHLVLParser;
import com.coffee.hlvl.generator.ParserFactory;
import com.coffee.hlvl.hLVL.Model;
import com.coffee.hlvl.tests.HLVLInjectorProvider;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(HLVLInjectorProvider.class)
@SuppressWarnings("all")
public class HLVLGeneratorTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void boolParser() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("boolean A");
      _builder.newLine();
      _builder.append("boolean B");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("r1: common(A,B)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("var bool : A ;");
      _builder_1.newLine();
      _builder_1.append("var bool : B ;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint A = true ;");
      _builder_1.newLine();
      _builder_1.append("constraint B = true ;");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      final IHLVLParser parser = ParserFactory.getParser(Dialect.BOOL, model.getName());
      final CharSequence actual = parser.parseModel(model);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void attParser() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("boolean A");
      _builder.newLine();
      _builder.append("boolean B");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("r1: common(A,B)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("var bool : A ;");
      _builder_1.newLine();
      _builder_1.append("var bool : B ;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint A = true ;");
      _builder_1.newLine();
      _builder_1.append("constraint B = true ;");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      final IHLVLParser parser = ParserFactory.getParser(Dialect.ATT, model.getName());
      final CharSequence actual = parser.parseModel(model);
      InputOutput.<CharSequence>println(actual);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * to print the parsing errors
   */
  public void printErrors(final Model model) {
    boolean _isEmpty = model.eResource().getErrors().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<Resource.Diagnostic> _errors = model.eResource().getErrors();
      for (final Resource.Diagnostic element : _errors) {
        InputOutput.<String>println(element.getMessage());
      }
    }
  }
}
