/**
 * generated by Xtext 2.12.0
 */
package com.coffee.hlvl.hLVL.util;

import com.coffee.hlvl.hLVL.And;
import com.coffee.hlvl.hLVL.Assign;
import com.coffee.hlvl.hLVL.AttributeRef;
import com.coffee.hlvl.hLVL.BoolConstant;
import com.coffee.hlvl.hLVL.BoolVal;
import com.coffee.hlvl.hLVL.Common;
import com.coffee.hlvl.hLVL.Comparison;
import com.coffee.hlvl.hLVL.ComplexImplies;
import com.coffee.hlvl.hLVL.ComplexMutex;
import com.coffee.hlvl.hLVL.ConstantDecl;
import com.coffee.hlvl.hLVL.Declaration;
import com.coffee.hlvl.hLVL.Decomposition;
import com.coffee.hlvl.hLVL.ElmDeclaration;
import com.coffee.hlvl.hLVL.Enumeration;
import com.coffee.hlvl.hLVL.Equality;
import com.coffee.hlvl.hLVL.Expression;
import com.coffee.hlvl.hLVL.Function;
import com.coffee.hlvl.hLVL.Group;
import com.coffee.hlvl.hLVL.HLVLPackage;
import com.coffee.hlvl.hLVL.Hierarchy;
import com.coffee.hlvl.hLVL.Iff;
import com.coffee.hlvl.hLVL.Implies;
import com.coffee.hlvl.hLVL.IntConstant;
import com.coffee.hlvl.hLVL.Interval;
import com.coffee.hlvl.hLVL.ListOfIDs;
import com.coffee.hlvl.hLVL.ListOfListValues;
import com.coffee.hlvl.hLVL.ListOfRelRefs;
import com.coffee.hlvl.hLVL.ListOfValuation;
import com.coffee.hlvl.hLVL.ListOfValues;
import com.coffee.hlvl.hLVL.Minus;
import com.coffee.hlvl.hLVL.Model;
import com.coffee.hlvl.hLVL.MulOrDiv;
import com.coffee.hlvl.hLVL.MultInstantiation;
import com.coffee.hlvl.hLVL.Names;
import com.coffee.hlvl.hLVL.Negation;
import com.coffee.hlvl.hLVL.Operation;
import com.coffee.hlvl.hLVL.Operations;
import com.coffee.hlvl.hLVL.OptionsDeclaration;
import com.coffee.hlvl.hLVL.Or;
import com.coffee.hlvl.hLVL.Order;
import com.coffee.hlvl.hLVL.Pair;
import com.coffee.hlvl.hLVL.Plus;
import com.coffee.hlvl.hLVL.QImplies;
import com.coffee.hlvl.hLVL.Range;
import com.coffee.hlvl.hLVL.RelDeclaration;
import com.coffee.hlvl.hLVL.Relation;
import com.coffee.hlvl.hLVL.Relational;
import com.coffee.hlvl.hLVL.SingleInstruction;
import com.coffee.hlvl.hLVL.Symbol;
import com.coffee.hlvl.hLVL.SymbolConstant;
import com.coffee.hlvl.hLVL.Unary;
import com.coffee.hlvl.hLVL.ValidConf;
import com.coffee.hlvl.hLVL.Valuation;
import com.coffee.hlvl.hLVL.Value;
import com.coffee.hlvl.hLVL.VarList;
import com.coffee.hlvl.hLVL.VariableDecl;
import com.coffee.hlvl.hLVL.VariableRef;
import com.coffee.hlvl.hLVL.Visibility;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.coffee.hlvl.hLVL.HLVLPackage
 * @generated
 */
public class HLVLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static HLVLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HLVLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = HLVLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HLVLSwitch<Adapter> modelSwitch =
    new HLVLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseElmDeclaration(ElmDeclaration object)
      {
        return createElmDeclarationAdapter();
      }
      @Override
      public Adapter caseDeclaration(Declaration object)
      {
        return createDeclarationAdapter();
      }
      @Override
      public Adapter caseConstantDecl(ConstantDecl object)
      {
        return createConstantDeclAdapter();
      }
      @Override
      public Adapter caseVariableDecl(VariableDecl object)
      {
        return createVariableDeclAdapter();
      }
      @Override
      public Adapter caseOptionsDeclaration(OptionsDeclaration object)
      {
        return createOptionsDeclarationAdapter();
      }
      @Override
      public Adapter caseInterval(Interval object)
      {
        return createIntervalAdapter();
      }
      @Override
      public Adapter caseEnumeration(Enumeration object)
      {
        return createEnumerationAdapter();
      }
      @Override
      public Adapter caseRelDeclaration(RelDeclaration object)
      {
        return createRelDeclarationAdapter();
      }
      @Override
      public Adapter caseRelation(Relation object)
      {
        return createRelationAdapter();
      }
      @Override
      public Adapter caseCommon(Common object)
      {
        return createCommonAdapter();
      }
      @Override
      public Adapter caseMultInstantiation(MultInstantiation object)
      {
        return createMultInstantiationAdapter();
      }
      @Override
      public Adapter casePair(Pair object)
      {
        return createPairAdapter();
      }
      @Override
      public Adapter caseComplexImplies(ComplexImplies object)
      {
        return createComplexImpliesAdapter();
      }
      @Override
      public Adapter caseComplexMutex(ComplexMutex object)
      {
        return createComplexMutexAdapter();
      }
      @Override
      public Adapter caseQImplies(QImplies object)
      {
        return createQImpliesAdapter();
      }
      @Override
      public Adapter caseVarList(VarList object)
      {
        return createVarListAdapter();
      }
      @Override
      public Adapter caseHierarchy(Hierarchy object)
      {
        return createHierarchyAdapter();
      }
      @Override
      public Adapter caseDecomposition(Decomposition object)
      {
        return createDecompositionAdapter();
      }
      @Override
      public Adapter caseGroup(Group object)
      {
        return createGroupAdapter();
      }
      @Override
      public Adapter caseRange(Range object)
      {
        return createRangeAdapter();
      }
      @Override
      public Adapter caseVisibility(Visibility object)
      {
        return createVisibilityAdapter();
      }
      @Override
      public Adapter caseOrder(Order object)
      {
        return createOrderAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseRelational(Relational object)
      {
        return createRelationalAdapter();
      }
      @Override
      public Adapter caseOperations(Operations object)
      {
        return createOperationsAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseBoolVal(BoolVal object)
      {
        return createBoolValAdapter();
      }
      @Override
      public Adapter caseNumber(com.coffee.hlvl.hLVL.Number object)
      {
        return createNumberAdapter();
      }
      @Override
      public Adapter caseSymbol(Symbol object)
      {
        return createSymbolAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter caseListOfValues(ListOfValues object)
      {
        return createListOfValuesAdapter();
      }
      @Override
      public Adapter caseListOfIDs(ListOfIDs object)
      {
        return createListOfIDsAdapter();
      }
      @Override
      public Adapter caseListOfRelRefs(ListOfRelRefs object)
      {
        return createListOfRelRefsAdapter();
      }
      @Override
      public Adapter caseNames(Names object)
      {
        return createNamesAdapter();
      }
      @Override
      public Adapter caseValuation(Valuation object)
      {
        return createValuationAdapter();
      }
      @Override
      public Adapter caseListOfValuation(ListOfValuation object)
      {
        return createListOfValuationAdapter();
      }
      @Override
      public Adapter caseListOfListValues(ListOfListValues object)
      {
        return createListOfListValuesAdapter();
      }
      @Override
      public Adapter caseIff(Iff object)
      {
        return createIffAdapter();
      }
      @Override
      public Adapter caseImplies(Implies object)
      {
        return createImpliesAdapter();
      }
      @Override
      public Adapter caseOr(Or object)
      {
        return createOrAdapter();
      }
      @Override
      public Adapter caseAnd(And object)
      {
        return createAndAdapter();
      }
      @Override
      public Adapter caseEquality(Equality object)
      {
        return createEqualityAdapter();
      }
      @Override
      public Adapter caseComparison(Comparison object)
      {
        return createComparisonAdapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMinus(Minus object)
      {
        return createMinusAdapter();
      }
      @Override
      public Adapter caseMulOrDiv(MulOrDiv object)
      {
        return createMulOrDivAdapter();
      }
      @Override
      public Adapter caseNegation(Negation object)
      {
        return createNegationAdapter();
      }
      @Override
      public Adapter caseUnary(Unary object)
      {
        return createUnaryAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter caseBoolConstant(BoolConstant object)
      {
        return createBoolConstantAdapter();
      }
      @Override
      public Adapter caseVariableRef(VariableRef object)
      {
        return createVariableRefAdapter();
      }
      @Override
      public Adapter caseAttributeRef(AttributeRef object)
      {
        return createAttributeRefAdapter();
      }
      @Override
      public Adapter caseAssign(Assign object)
      {
        return createAssignAdapter();
      }
      @Override
      public Adapter caseSymbolConstant(SymbolConstant object)
      {
        return createSymbolConstantAdapter();
      }
      @Override
      public Adapter caseIntConstant(IntConstant object)
      {
        return createIntConstantAdapter();
      }
      @Override
      public Adapter caseSingleInstruction(SingleInstruction object)
      {
        return createSingleInstructionAdapter();
      }
      @Override
      public Adapter caseValidConf(ValidConf object)
      {
        return createValidConfAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.ElmDeclaration <em>Elm Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.ElmDeclaration
   * @generated
   */
  public Adapter createElmDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Declaration <em>Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Declaration
   * @generated
   */
  public Adapter createDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.ConstantDecl <em>Constant Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.ConstantDecl
   * @generated
   */
  public Adapter createConstantDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.VariableDecl <em>Variable Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.VariableDecl
   * @generated
   */
  public Adapter createVariableDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.OptionsDeclaration <em>Options Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.OptionsDeclaration
   * @generated
   */
  public Adapter createOptionsDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Interval <em>Interval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Interval
   * @generated
   */
  public Adapter createIntervalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Enumeration <em>Enumeration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Enumeration
   * @generated
   */
  public Adapter createEnumerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.RelDeclaration <em>Rel Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.RelDeclaration
   * @generated
   */
  public Adapter createRelDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Relation <em>Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Relation
   * @generated
   */
  public Adapter createRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Common <em>Common</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Common
   * @generated
   */
  public Adapter createCommonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.MultInstantiation <em>Mult Instantiation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.MultInstantiation
   * @generated
   */
  public Adapter createMultInstantiationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Pair <em>Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Pair
   * @generated
   */
  public Adapter createPairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.ComplexImplies <em>Complex Implies</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.ComplexImplies
   * @generated
   */
  public Adapter createComplexImpliesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.ComplexMutex <em>Complex Mutex</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.ComplexMutex
   * @generated
   */
  public Adapter createComplexMutexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.QImplies <em>QImplies</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.QImplies
   * @generated
   */
  public Adapter createQImpliesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.VarList <em>Var List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.VarList
   * @generated
   */
  public Adapter createVarListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Hierarchy <em>Hierarchy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Hierarchy
   * @generated
   */
  public Adapter createHierarchyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Decomposition <em>Decomposition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Decomposition
   * @generated
   */
  public Adapter createDecompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Group <em>Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Group
   * @generated
   */
  public Adapter createGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Range <em>Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Range
   * @generated
   */
  public Adapter createRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Visibility <em>Visibility</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Visibility
   * @generated
   */
  public Adapter createVisibilityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Order <em>Order</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Order
   * @generated
   */
  public Adapter createOrderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Relational <em>Relational</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Relational
   * @generated
   */
  public Adapter createRelationalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Operations <em>Operations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Operations
   * @generated
   */
  public Adapter createOperationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.BoolVal <em>Bool Val</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.BoolVal
   * @generated
   */
  public Adapter createBoolValAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Number <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Number
   * @generated
   */
  public Adapter createNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Symbol <em>Symbol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Symbol
   * @generated
   */
  public Adapter createSymbolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.ListOfValues <em>List Of Values</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.ListOfValues
   * @generated
   */
  public Adapter createListOfValuesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.ListOfIDs <em>List Of IDs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.ListOfIDs
   * @generated
   */
  public Adapter createListOfIDsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.ListOfRelRefs <em>List Of Rel Refs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.ListOfRelRefs
   * @generated
   */
  public Adapter createListOfRelRefsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Names <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Names
   * @generated
   */
  public Adapter createNamesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Valuation <em>Valuation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Valuation
   * @generated
   */
  public Adapter createValuationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.ListOfValuation <em>List Of Valuation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.ListOfValuation
   * @generated
   */
  public Adapter createListOfValuationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.ListOfListValues <em>List Of List Values</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.ListOfListValues
   * @generated
   */
  public Adapter createListOfListValuesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Iff <em>Iff</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Iff
   * @generated
   */
  public Adapter createIffAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Implies <em>Implies</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Implies
   * @generated
   */
  public Adapter createImpliesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Or <em>Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Or
   * @generated
   */
  public Adapter createOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.And <em>And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.And
   * @generated
   */
  public Adapter createAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Equality <em>Equality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Equality
   * @generated
   */
  public Adapter createEqualityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Comparison <em>Comparison</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Comparison
   * @generated
   */
  public Adapter createComparisonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Minus <em>Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Minus
   * @generated
   */
  public Adapter createMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.MulOrDiv <em>Mul Or Div</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.MulOrDiv
   * @generated
   */
  public Adapter createMulOrDivAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Negation <em>Negation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Negation
   * @generated
   */
  public Adapter createNegationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Unary <em>Unary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Unary
   * @generated
   */
  public Adapter createUnaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.BoolConstant <em>Bool Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.BoolConstant
   * @generated
   */
  public Adapter createBoolConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.VariableRef <em>Variable Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.VariableRef
   * @generated
   */
  public Adapter createVariableRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.AttributeRef <em>Attribute Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.AttributeRef
   * @generated
   */
  public Adapter createAttributeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.Assign <em>Assign</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.Assign
   * @generated
   */
  public Adapter createAssignAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.SymbolConstant <em>Symbol Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.SymbolConstant
   * @generated
   */
  public Adapter createSymbolConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.IntConstant <em>Int Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.IntConstant
   * @generated
   */
  public Adapter createIntConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.SingleInstruction <em>Single Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.SingleInstruction
   * @generated
   */
  public Adapter createSingleInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.coffee.hlvl.hLVL.ValidConf <em>Valid Conf</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.coffee.hlvl.hLVL.ValidConf
   * @generated
   */
  public Adapter createValidConfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //HLVLAdapterFactory
