/*
 * generated by Xtext 2.12.0
 */
package com.coffee.hlvl.generator;

import com.coffee.hlvl.HLVLStandaloneSetup;
import com.coffee.hlvl.hLVL.Model;
import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

import java.io.IOException;
import java.io.StringReader;
import java.util.Collections;
import java.util.List;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.URIConverter;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.emf.ecore.xmi.XMIResource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;

public class Main {

	public static void main(String[] args) throws IOException {
		if (args.length == 0) {
			System.err.println("Aborting: no path to EMF resource provided!");
			return;
		}
		Injector injector = new HLVLStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		//main.runGenerator(args[0]);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private GeneratorDelegate generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String string) throws IOException {
		// Load the resource
//		ResourceSet set = resourceSetProvider.get();
//		Resource resource = set.getResource(URI.createFileURI(string), true);
		
		//FIXME to process strings and not files
		final XMIResource resource = new XMIResourceImpl();
		final URIConverter.ReadableInputStream stream = new URIConverter.ReadableInputStream(new StringReader(string));
		resource.load(stream, Collections.EMPTY_MAP);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}
		
		//String modelName= modelName(resource.contents.head as Model)
				// obtaining the model
		Model model= ((Model) resource.getContents().get(0));
		String modelName= model.getName();
				
	
				

		// Determining the type of the problem to produce the solver compatible 
		IHLVLParser	parser= ParserFactory.getParser(Dialect.BOOL, modelName);
		parser.parseModel(model);

//		// Configure and start the generator
//		fileAccess.setOutputPath("src-gen/");
//		GeneratorContext context = new GeneratorContext();
//		context.setCancelIndicator(CancelIndicator.NullImpl);
//		generator.generate(resource, fileAccess, context);
		
		//FIXME retornar un string

		System.out.println("Code generation finished.");
	}
}
