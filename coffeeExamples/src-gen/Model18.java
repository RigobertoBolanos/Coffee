//Java imports
import java.util.HashMap;
import java.util.List;
//imports for hlcl 
import com.variamos.hlcl.core.HlclProgram; 
import com.variamos.hlcl.model.expressions.HlclFactory; 
import com.variamos.hlcl.model.domains.BinaryDomain;
import com.variamos.hlcl.model.domains.IntervalDomain;
import com.variamos.hlcl.model.domains.RangeDomain;
import com.variamos.hlcl.model.domains.StringDomain;
import com.variamos.hlcl.model.expressions.Identifier;
import com.variamos.hlcl.model.expressions.IntBooleanExpression;
import com.variamos.hlcl.model.expressions.NumericIdentifier;
import com.variamos.hlcl.model.expressions.SymbolicExpression;
import com.variamos.hlcl.model.expressions.IntNumericExpression;

//imports for solver
import com.variamos.solver.core.SWIPrologSolver;
import com.variamos.solver.core.compiler.Hlcl2SWIProlog;
import com.variamos.solver.model.SolverSolution;

/**
* This class is automatically generated from a product line model described in 
* constraint programming HLCL
* @author Angela Villota 
* @version CP-HLCL Version1
*
*/
public class Model18 { 			
	
	private String modelName;
	private HlclFactory factory;
	private HlclProgram hlclProgram;
	private SWIPrologSolver swiSolver;
	private String prologProgram;
	private HashMap<String,IntBooleanExpression> constraints;
	private HashMap<String,Identifier> variables;
	private HashMap<String,NumericIdentifier> numbers;
	/**
	* This is an autogenerated method* Constructor method
	* @param modelName is the name of the model in the  CP-HLCL specification
	*/
	public Model18(String modelName){ 				
		
		this.modelName= modelName;
		hlclProgram= new HlclProgram();
		factory = new HlclFactory();
		variables= new HashMap<String,Identifier>();
		constraints= new HashMap<String,IntBooleanExpression>();
		numbers= new HashMap<String,NumericIdentifier>();
		NumericIdentifier one = factory.number(1);
		NumericIdentifier zero= factory.number(0);
		numbers.put("1", one);
		numbers.put("0", zero);
	} 			
	public static void main(String[] args) {
		Model18 obj = new Model18("Model18");
		obj.run();
	}
	public void run(){
		// first obtain a HlclProgram from the specification
		transformVars();
		transformConstraints(); 
		// use the solver to solve the constraint program
		evaluateSatisfiability();
		//show the output
		System.out.println(prologProgram);
	}
	public void transformVars() {
//declaring variable GPL
Identifier GPL = factory.newIdentifier("GPL");
  			BinaryDomain GPLDom= new BinaryDomain();
GPL.setDomain(GPLDom);	
variables.put("GPL", GPL); //including the variable in the map
//declaring variable GType
Identifier GType = factory.newIdentifier("GType");
  			BinaryDomain GTypeDom= new BinaryDomain();
GType.setDomain(GTypeDom);	
variables.put("GType", GType); //including the variable in the map
//declaring variable Weight
Identifier Weight = factory.newIdentifier("Weight");
  			BinaryDomain WeightDom= new BinaryDomain();
Weight.setDomain(WeightDom);	
variables.put("Weight", Weight); //including the variable in the map
//declaring variable Search
Identifier Search = factory.newIdentifier("Search");
  			BinaryDomain SearchDom= new BinaryDomain();
Search.setDomain(SearchDom);	
variables.put("Search", Search); //including the variable in the map
//declaring variable Algorithms
Identifier Algorithms = factory.newIdentifier("Algorithms");
  			BinaryDomain AlgorithmsDom= new BinaryDomain();
Algorithms.setDomain(AlgorithmsDom);	
variables.put("Algorithms", Algorithms); //including the variable in the map
//declaring variable Directed
Identifier Directed = factory.newIdentifier("Directed");
  			BinaryDomain DirectedDom= new BinaryDomain();
Directed.setDomain(DirectedDom);	
variables.put("Directed", Directed); //including the variable in the map
//declaring variable Undirected
Identifier Undirected = factory.newIdentifier("Undirected");
  			BinaryDomain UndirectedDom= new BinaryDomain();
Undirected.setDomain(UndirectedDom);	
variables.put("Undirected", Undirected); //including the variable in the map
//declaring variable Weighted
Identifier Weighted = factory.newIdentifier("Weighted");
  			BinaryDomain WeightedDom= new BinaryDomain();
Weighted.setDomain(WeightedDom);	
variables.put("Weighted", Weighted); //including the variable in the map
//declaring variable Unweighted
Identifier Unweighted = factory.newIdentifier("Unweighted");
  			BinaryDomain UnweightedDom= new BinaryDomain();
Unweighted.setDomain(UnweightedDom);	
variables.put("Unweighted", Unweighted); //including the variable in the map
//declaring variable BFS
Identifier BFS = factory.newIdentifier("BFS");
  			BinaryDomain BFSDom= new BinaryDomain();
BFS.setDomain(BFSDom);	
variables.put("BFS", BFS); //including the variable in the map
//declaring variable DFS
Identifier DFS = factory.newIdentifier("DFS");
  			BinaryDomain DFSDom= new BinaryDomain();
DFS.setDomain(DFSDom);	
variables.put("DFS", DFS); //including the variable in the map
//declaring variable Kruskal
Identifier Kruskal = factory.newIdentifier("Kruskal");
  			BinaryDomain KruskalDom= new BinaryDomain();
Kruskal.setDomain(KruskalDom);	
variables.put("Kruskal", Kruskal); //including the variable in the map
//declaring variable CycleCheck
Identifier CycleCheck = factory.newIdentifier("CycleCheck");
  			BinaryDomain CycleCheckDom= new BinaryDomain();
CycleCheck.setDomain(CycleCheckDom);	
variables.put("CycleCheck", CycleCheck); //including the variable in the map
//declaring variable StronglyCon
Identifier StronglyCon = factory.newIdentifier("StronglyCon");
  			BinaryDomain StronglyConDom= new BinaryDomain();
StronglyCon.setDomain(StronglyConDom);	
variables.put("StronglyCon", StronglyCon); //including the variable in the map
//declaring variable VertexNum
Identifier VertexNum = factory.newIdentifier("VertexNum");
  			BinaryDomain VertexNumDom= new BinaryDomain();
VertexNum.setDomain(VertexNumDom);	
variables.put("VertexNum", VertexNum); //including the variable in the map
//declaring variable ConnComp
Identifier ConnComp = factory.newIdentifier("ConnComp");
  			BinaryDomain ConnCompDom= new BinaryDomain();
ConnComp.setDomain(ConnCompDom);	
variables.put("ConnComp", ConnComp); //including the variable in the map
//declaring variable SSP
Identifier SSP = factory.newIdentifier("SSP");
  			BinaryDomain SSPDom= new BinaryDomain();
SSP.setDomain(SSPDom);	
variables.put("SSP", SSP); //including the variable in the map
//declaring variable Prim
Identifier Prim = factory.newIdentifier("Prim");
  			BinaryDomain PrimDom= new BinaryDomain();
Prim.setDomain(PrimDom);	
variables.put("Prim", Prim); //including the variable in the map
	}
	public void transformConstraints() {
//
//declaring constraint c2


Identifier c2_left = variables.get("GPL");

Identifier c2_right = variables.get("GType");
IntBooleanExpression c2=factory.doubleImplies(c2_left, c2_right);		
constraints.put("c2", c2);
hlclProgram.add(c2);
//
//declaring constraint c3


Identifier c3_left = variables.get("GPL");

Identifier c3_right = variables.get("Algorithms");
IntBooleanExpression c3=factory.doubleImplies(c3_left, c3_right);		
constraints.put("c3", c3);
hlclProgram.add(c3);
//
//declaring constraint c4


Identifier c4_left = variables.get("Weight");

Identifier c4_right = variables.get("GPL");
IntBooleanExpression c4=factory.implies(c4_left, c4_right);		
constraints.put("c4", c4);
hlclProgram.add(c4);
//
//declaring constraint c5


Identifier c5_left = variables.get("Search");

Identifier c5_right = variables.get("GPL");
IntBooleanExpression c5=factory.implies(c5_left, c5_right);		
constraints.put("c5", c5);
hlclProgram.add(c5);
//
//declaring constraint c6



Identifier c6_left_left = variables.get("Directed");



Identifier c6_left_right_left_negation = variables.get("Undirected");
IntBooleanExpression c6_left_right_left=factory.not(c6_left_right_left_negation);

Identifier c6_left_right_right = variables.get("GType");
IntBooleanExpression c6_left_right=factory.and(c6_left_right_left, c6_left_right_right);		
IntBooleanExpression c6_left=factory.doubleImplies(c6_left_left, c6_left_right);		


Identifier c6_right_left = variables.get("Undirected");



Identifier c6_right_right_left_negation = variables.get("Directed");
IntBooleanExpression c6_right_right_left=factory.not(c6_right_right_left_negation);

Identifier c6_right_right_right = variables.get("GType");
IntBooleanExpression c6_right_right=factory.and(c6_right_right_left, c6_right_right_right);		
IntBooleanExpression c6_right=factory.doubleImplies(c6_right_left, c6_right_right);		
IntBooleanExpression c6=factory.and(c6_left, c6_right);		
constraints.put("c6", c6);
hlclProgram.add(c6);
//
//declaring constraint c7



Identifier c7_left_left = variables.get("Weighted");



Identifier c7_left_right_left_negation = variables.get("Unweighted");
IntBooleanExpression c7_left_right_left=factory.not(c7_left_right_left_negation);

Identifier c7_left_right_right = variables.get("Weight");
IntBooleanExpression c7_left_right=factory.and(c7_left_right_left, c7_left_right_right);		
IntBooleanExpression c7_left=factory.doubleImplies(c7_left_left, c7_left_right);		


Identifier c7_right_left = variables.get("Unweighted");



Identifier c7_right_right_left_negation = variables.get("Weighted");
IntBooleanExpression c7_right_right_left=factory.not(c7_right_right_left_negation);

Identifier c7_right_right_right = variables.get("Weight");
IntBooleanExpression c7_right_right=factory.and(c7_right_right_left, c7_right_right_right);		
IntBooleanExpression c7_right=factory.doubleImplies(c7_right_left, c7_right_right);		
IntBooleanExpression c7=factory.and(c7_left, c7_right);		
constraints.put("c7", c7);
hlclProgram.add(c7);
//
//declaring constraint c8



Identifier c8_left_left = variables.get("BFS");



Identifier c8_left_right_left_negation = variables.get("DFS");
IntBooleanExpression c8_left_right_left=factory.not(c8_left_right_left_negation);

Identifier c8_left_right_right = variables.get("Search");
IntBooleanExpression c8_left_right=factory.and(c8_left_right_left, c8_left_right_right);		
IntBooleanExpression c8_left=factory.doubleImplies(c8_left_left, c8_left_right);		


Identifier c8_right_left = variables.get("DFS");



Identifier c8_right_right_left_negation = variables.get("BFS");
IntBooleanExpression c8_right_right_left=factory.not(c8_right_right_left_negation);

Identifier c8_right_right_right = variables.get("Search");
IntBooleanExpression c8_right_right=factory.and(c8_right_right_left, c8_right_right_right);		
IntBooleanExpression c8_right=factory.doubleImplies(c8_right_left, c8_right_right);		
IntBooleanExpression c8=factory.and(c8_left, c8_right);		
constraints.put("c8", c8);
hlclProgram.add(c8);
//
//declaring constraint c9


Identifier c9_left = variables.get("Algorithms");







Identifier c9_right_left_left_left_left_left_left = variables.get("Kruskal");

Identifier c9_right_left_left_left_left_left_right = variables.get("CycleCheck");
IntBooleanExpression c9_right_left_left_left_left_left=factory.or(c9_right_left_left_left_left_left_left, c9_right_left_left_left_left_left_right);		

Identifier c9_right_left_left_left_left_right = variables.get("StronglyCon");
IntBooleanExpression c9_right_left_left_left_left=factory.or(c9_right_left_left_left_left_left, c9_right_left_left_left_left_right);		

Identifier c9_right_left_left_left_right = variables.get("VertexNum");
IntBooleanExpression c9_right_left_left_left=factory.or(c9_right_left_left_left_left, c9_right_left_left_left_right);		

Identifier c9_right_left_left_right = variables.get("ConnComp");
IntBooleanExpression c9_right_left_left=factory.or(c9_right_left_left_left, c9_right_left_left_right);		

Identifier c9_right_left_right = variables.get("SSP");
IntBooleanExpression c9_right_left=factory.or(c9_right_left_left, c9_right_left_right);		

Identifier c9_right_right = variables.get("Prim");
IntBooleanExpression c9_right=factory.or(c9_right_left, c9_right_right);		
IntBooleanExpression c9=factory.doubleImplies(c9_left, c9_right);		
constraints.put("c9", c9);
hlclProgram.add(c9);
//
//declaring constraint c10


Identifier c10_left = variables.get("CycleCheck");

Identifier c10_right = variables.get("DFS");
IntBooleanExpression c10=factory.implies(c10_left, c10_right);		
constraints.put("c10", c10);
hlclProgram.add(c10);
//
//declaring constraint C11


Identifier C11_left = variables.get("StronglyCon");

Identifier C11_right = variables.get("Directed");
IntBooleanExpression C11=factory.implies(C11_left, C11_right);		
constraints.put("C11", C11);
hlclProgram.add(C11);
//
//declaring constraint C12


Identifier C12_left = variables.get("StronglyCon");

Identifier C12_right = variables.get("DFS");
IntBooleanExpression C12=factory.implies(C12_left, C12_right);		
constraints.put("C12", C12);
hlclProgram.add(C12);
//
//declaring constraint C13


Identifier C13_left = variables.get("VertexNum");

Identifier C13_right = variables.get("Search");
IntBooleanExpression C13=factory.implies(C13_left, C13_right);		
constraints.put("C13", C13);
hlclProgram.add(C13);
//
//declaring constraint C14


Identifier C14_left = variables.get("ConnComp");

Identifier C14_right = variables.get("Undirected");
IntBooleanExpression C14=factory.implies(C14_left, C14_right);		
constraints.put("C14", C14);
hlclProgram.add(C14);
//
//declaring constraint C15


Identifier C15_left = variables.get("Kruskal");

Identifier C15_right = variables.get("Undirected");
IntBooleanExpression C15=factory.implies(C15_left, C15_right);		
constraints.put("C15", C15);
hlclProgram.add(C15);
//
//declaring constraint C16


Identifier C16_left = variables.get("Kruskal");

Identifier C16_right = variables.get("Weighted");
IntBooleanExpression C16=factory.implies(C16_left, C16_right);		
constraints.put("C16", C16);
hlclProgram.add(C16);
//
//declaring constraint C17


Identifier C17_left = variables.get("Prim");

Identifier C17_right = variables.get("Undirected");
IntBooleanExpression C17=factory.implies(C17_left, C17_right);		
constraints.put("C17", C17);
hlclProgram.add(C17);
//
//declaring constraint C18


Identifier C18_left = variables.get("Prim");

Identifier C18_right = variables.get("Weighted");
IntBooleanExpression C18=factory.implies(C18_left, C18_right);		
constraints.put("C18", C18);
hlclProgram.add(C18);
//
//declaring constraint C19


Identifier C19_left = variables.get("SSP");

Identifier C19_right = variables.get("Directed");
IntBooleanExpression C19=factory.implies(C19_left, C19_right);		
constraints.put("C19", C19);
hlclProgram.add(C19);
//
//declaring constraint C20


Identifier C20_left = variables.get("SSP");

Identifier C20_right = variables.get("Weighted");
IntBooleanExpression C20=factory.implies(C20_left, C20_right);		
constraints.put("C20", C20);
hlclProgram.add(C20);
//
//declaring constraint C21



Identifier C21_negation_left = variables.get("StronglyCon");

Identifier C21_negation_right = variables.get("ConnComp");
IntBooleanExpression C21_negation=factory.and(C21_negation_left, C21_negation_right);		
IntBooleanExpression C21=factory.not(C21_negation);
constraints.put("C21", C21);
hlclProgram.add(C21);
//
//declaring constraint C22



Identifier C22_negation_left = variables.get("StronglyCon");

Identifier C22_negation_right = variables.get("Kruskal");
IntBooleanExpression C22_negation=factory.and(C22_negation_left, C22_negation_right);		
IntBooleanExpression C22=factory.not(C22_negation);
constraints.put("C22", C22);
hlclProgram.add(C22);
//
//declaring constraint C23



Identifier C23_negation_left = variables.get("StronglyCon");

Identifier C23_negation_right = variables.get("Prim");
IntBooleanExpression C23_negation=factory.and(C23_negation_left, C23_negation_right);		
IntBooleanExpression C23=factory.not(C23_negation);
constraints.put("C23", C23);
hlclProgram.add(C23);
//
//declaring constraint C24



Identifier C24_negation_left = variables.get("SSP");

Identifier C24_negation_right = variables.get("ConnComp");
IntBooleanExpression C24_negation=factory.and(C24_negation_left, C24_negation_right);		
IntBooleanExpression C24=factory.not(C24_negation);
constraints.put("C24", C24);
hlclProgram.add(C24);
//
//declaring constraint C25



Identifier C25_negation_left = variables.get("SSP");

Identifier C25_negation_right = variables.get("Kruskal");
IntBooleanExpression C25_negation=factory.and(C25_negation_left, C25_negation_right);		
IntBooleanExpression C25=factory.not(C25_negation);
constraints.put("C25", C25);
hlclProgram.add(C25);
//
//declaring constraint C26



Identifier C26_negation_left = variables.get("SSP");

Identifier C26_negation_right = variables.get("Prim");
IntBooleanExpression C26_negation=factory.and(C26_negation_left, C26_negation_right);		
IntBooleanExpression C26=factory.not(C26_negation);
constraints.put("C26", C26);
hlclProgram.add(C26);
	}
	public boolean evaluateSatisfiability(){
		// the output
		boolean evaluation= false;
		// //to transform the hllcl program into a prolog  file, 
		// //these lines are commented because they are useful for debugging 
		Hlcl2SWIProlog swiPrologTransformer = new Hlcl2SWIProlog(); 
		prologProgram = swiPrologTransformer.transform(hlclProgram);
				
		// an instance of the solver for Swiprolog 
		swiSolver= new SWIPrologSolver();
		swiSolver.setHLCLProgram(hlclProgram); //passing the hlcl program to the solver
		swiSolver.solve(); // This methhod prepares the solver 
		List<SolverSolution> solutions = swiSolver.getAllSolutions(); // Consulting if the solver has one solution
			evaluation= solutions.size()>0;
			for (SolverSolution solverSolution : solutions) {
				System.out.println(solverSolution.toString());
			}	return evaluation;
	}
	/** 
	* To obtain the NumericIdentifier representation of a value 
	* @param id the string with the value 
	* @return the NumericIdentifier 
	*/
	public NumericIdentifier getValue(String id) {	NumericIdentifier value= numbers.get(id); 
	 	if (value==null) { 
	 		if (id.equals("selected")) { 
	 			value= numbers.get("1"); 
	 		} 
	 		else if(id.equals("unselected")) {
				value= numbers.get("0"); 
			} 
			else { 
				value= factory.number(Integer.parseInt(id)); 
				numbers.put(id, value);
			}
	 	} 
	 	return value; 
	 } 
		public String getModelName() {
			return modelName;
		}
		public void setModelName(String modelName) {
			this.modelName = modelName;
		}
		public HlclFactory getFactory() {
			return factory;
		}
		public void setFactory(HlclFactory factory) {
			this.factory = factory;
		}
		public HlclProgram getHlclProgram() {
			return hlclProgram;
		}
		public void setHlclProgram(HlclProgram hlclProgram) {
			this.hlclProgram = hlclProgram;
		}
} 	