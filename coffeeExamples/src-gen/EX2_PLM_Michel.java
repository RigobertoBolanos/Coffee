//Java imports
import java.util.HashMap;
import java.util.List;
//imports for hlcl 
import com.variamos.hlcl.core.HlclProgram; 
import com.variamos.hlcl.model.expressions.HlclFactory; 
import com.variamos.hlcl.model.domains.BinaryDomain;
import com.variamos.hlcl.model.domains.IntervalDomain;
import com.variamos.hlcl.model.domains.RangeDomain;
import com.variamos.hlcl.model.domains.StringDomain;
import com.variamos.hlcl.model.expressions.Identifier;
import com.variamos.hlcl.model.expressions.IntBooleanExpression;
import com.variamos.hlcl.model.expressions.NumericIdentifier;
import com.variamos.hlcl.model.expressions.SymbolicExpression;
import com.variamos.hlcl.model.expressions.IntNumericExpression;

//imports for solver
import com.variamos.solver.core.SWIPrologSolver;
import com.variamos.solver.core.compiler.Hlcl2SWIProlog;
import com.variamos.solver.model.SolverSolution;

/**
* This class is automatically generated from a product line model described in 
* constraint programming HLCL
* @author Angela Villota 
* @version CP-HLCL Version1
*
*/
public class EX2_PLM_Michel { 			
	
	private String modelName;
	private HlclFactory factory;
	private HlclProgram hlclProgram;
	private SWIPrologSolver swiSolver;
	private String prologProgram;
	private HashMap<String,IntBooleanExpression> constraints;
	private HashMap<String,Identifier> variables;
	private HashMap<String,NumericIdentifier> numbers;
	/**
	* This is an autogenerated method* Constructor method
	* @param modelName is the name of the model in the  CP-HLCL specification
	*/
	public EX2_PLM_Michel(String modelName){ 				
		
		this.modelName= modelName;
		hlclProgram= new HlclProgram();
		factory = new HlclFactory();
		variables= new HashMap<String,Identifier>();
		constraints= new HashMap<String,IntBooleanExpression>();
		numbers= new HashMap<String,NumericIdentifier>();
		NumericIdentifier one = factory.number(1);
		NumericIdentifier zero= factory.number(0);
		numbers.put("1", one);
		numbers.put("0", zero);
	} 			
	public static void main(String[] args) {
		EX2_PLM_Michel obj = new EX2_PLM_Michel("EX2_PLM_Michel");
		obj.run();
	}
	public void run(){
		// first obtain a HlclProgram from the specification
		transformVars();
		transformConstraints(); 
		// use the solver to solve the constraint program
		evaluateSatisfiability();
		//show the output
		System.out.println(prologProgram);
	}
	public void transformVars() {
//declaring variable Binding
Identifier Binding = factory.newIdentifier("Binding");
  			BinaryDomain BindingDom= new BinaryDomain();
Binding.setDomain(BindingDom);	
variables.put("Binding", Binding); //including the variable in the map
//declaring variable Booklet
Identifier Booklet = factory.newIdentifier("Booklet");
  			BinaryDomain BookletDom= new BinaryDomain();
Booklet.setDomain(BookletDom);	
variables.put("Booklet", Booklet); //including the variable in the map
//declaring variable Left
Identifier Left = factory.newIdentifier("Left");
  			BinaryDomain LeftDom= new BinaryDomain();
Left.setDomain(LeftDom);	
variables.put("Left", Left); //including the variable in the map
//declaring variable Landscape
Identifier Landscape = factory.newIdentifier("Landscape");
  			BinaryDomain LandscapeDom= new BinaryDomain();
Landscape.setDomain(LandscapeDom);	
variables.put("Landscape", Landscape); //including the variable in the map
//declaring variable Landscape_card
Identifier Landscape_card = factory.newIdentifier("Landscape_card");
 				RangeDomain Landscape_cardDom= new RangeDomain(1, 4);
Landscape_card.setDomain(Landscape_cardDom);	
variables.put("Landscape_card", Landscape_card); //including the variable in the map
//declaring variable Document_Sheet1_Page1_Orientation1_Landscape1
Identifier Document_Sheet1_Page1_Orientation1_Landscape1 = factory.newIdentifier("Document_Sheet1_Page1_Orientation1_Landscape1");
  			BinaryDomain Document_Sheet1_Page1_Orientation1_Landscape1Dom= new BinaryDomain();
Document_Sheet1_Page1_Orientation1_Landscape1.setDomain(Document_Sheet1_Page1_Orientation1_Landscape1Dom);	
variables.put("Document_Sheet1_Page1_Orientation1_Landscape1", Document_Sheet1_Page1_Orientation1_Landscape1); //including the variable in the map
//declaring variable Document_Sheet1_Page2_Orientation1_Landscape1
Identifier Document_Sheet1_Page2_Orientation1_Landscape1 = factory.newIdentifier("Document_Sheet1_Page2_Orientation1_Landscape1");
  			BinaryDomain Document_Sheet1_Page2_Orientation1_Landscape1Dom= new BinaryDomain();
Document_Sheet1_Page2_Orientation1_Landscape1.setDomain(Document_Sheet1_Page2_Orientation1_Landscape1Dom);	
variables.put("Document_Sheet1_Page2_Orientation1_Landscape1", Document_Sheet1_Page2_Orientation1_Landscape1); //including the variable in the map
//declaring variable Document_Sheet2_Page1_Orientation1_Landscape1
Identifier Document_Sheet2_Page1_Orientation1_Landscape1 = factory.newIdentifier("Document_Sheet2_Page1_Orientation1_Landscape1");
  			BinaryDomain Document_Sheet2_Page1_Orientation1_Landscape1Dom= new BinaryDomain();
Document_Sheet2_Page1_Orientation1_Landscape1.setDomain(Document_Sheet2_Page1_Orientation1_Landscape1Dom);	
variables.put("Document_Sheet2_Page1_Orientation1_Landscape1", Document_Sheet2_Page1_Orientation1_Landscape1); //including the variable in the map
//declaring variable Document_Sheet2_Page2_Orientation1_Landscape1
Identifier Document_Sheet2_Page2_Orientation1_Landscape1 = factory.newIdentifier("Document_Sheet2_Page2_Orientation1_Landscape1");
  			BinaryDomain Document_Sheet2_Page2_Orientation1_Landscape1Dom= new BinaryDomain();
Document_Sheet2_Page2_Orientation1_Landscape1.setDomain(Document_Sheet2_Page2_Orientation1_Landscape1Dom);	
variables.put("Document_Sheet2_Page2_Orientation1_Landscape1", Document_Sheet2_Page2_Orientation1_Landscape1); //including the variable in the map
//declaring variable Front
Identifier Front = factory.newIdentifier("Front");
  			BinaryDomain FrontDom= new BinaryDomain();
Front.setDomain(FrontDom);	
variables.put("Front", Front); //including the variable in the map
//declaring variable Front_card
Identifier Front_card = factory.newIdentifier("Front_card");
 				RangeDomain Front_cardDom= new RangeDomain(1, 4);
Front_card.setDomain(Front_cardDom);	
variables.put("Front_card", Front_card); //including the variable in the map
//declaring variable Document_Sheet1_Page1_Side1_Front1
Identifier Document_Sheet1_Page1_Side1_Front1 = factory.newIdentifier("Document_Sheet1_Page1_Side1_Front1");
  			BinaryDomain Document_Sheet1_Page1_Side1_Front1Dom= new BinaryDomain();
Document_Sheet1_Page1_Side1_Front1.setDomain(Document_Sheet1_Page1_Side1_Front1Dom);	
variables.put("Document_Sheet1_Page1_Side1_Front1", Document_Sheet1_Page1_Side1_Front1); //including the variable in the map
//declaring variable Document_Sheet1_Page2_Side1_Front1
Identifier Document_Sheet1_Page2_Side1_Front1 = factory.newIdentifier("Document_Sheet1_Page2_Side1_Front1");
  			BinaryDomain Document_Sheet1_Page2_Side1_Front1Dom= new BinaryDomain();
Document_Sheet1_Page2_Side1_Front1.setDomain(Document_Sheet1_Page2_Side1_Front1Dom);	
variables.put("Document_Sheet1_Page2_Side1_Front1", Document_Sheet1_Page2_Side1_Front1); //including the variable in the map
//declaring variable Document_Sheet2_Page1_Side1_Front1
Identifier Document_Sheet2_Page1_Side1_Front1 = factory.newIdentifier("Document_Sheet2_Page1_Side1_Front1");
  			BinaryDomain Document_Sheet2_Page1_Side1_Front1Dom= new BinaryDomain();
Document_Sheet2_Page1_Side1_Front1.setDomain(Document_Sheet2_Page1_Side1_Front1Dom);	
variables.put("Document_Sheet2_Page1_Side1_Front1", Document_Sheet2_Page1_Side1_Front1); //including the variable in the map
//declaring variable Document_Sheet2_Page2_Side1_Front1
Identifier Document_Sheet2_Page2_Side1_Front1 = factory.newIdentifier("Document_Sheet2_Page2_Side1_Front1");
  			BinaryDomain Document_Sheet2_Page2_Side1_Front1Dom= new BinaryDomain();
Document_Sheet2_Page2_Side1_Front1.setDomain(Document_Sheet2_Page2_Side1_Front1Dom);	
variables.put("Document_Sheet2_Page2_Side1_Front1", Document_Sheet2_Page2_Side1_Front1); //including the variable in the map
//declaring variable Right
Identifier Right = factory.newIdentifier("Right");
  			BinaryDomain RightDom= new BinaryDomain();
Right.setDomain(RightDom);	
variables.put("Right", Right); //including the variable in the map
//declaring variable Portrait
Identifier Portrait = factory.newIdentifier("Portrait");
  			BinaryDomain PortraitDom= new BinaryDomain();
Portrait.setDomain(PortraitDom);	
variables.put("Portrait", Portrait); //including the variable in the map
//declaring variable Portrait_card
Identifier Portrait_card = factory.newIdentifier("Portrait_card");
 				RangeDomain Portrait_cardDom= new RangeDomain(1, 4);
Portrait_card.setDomain(Portrait_cardDom);	
variables.put("Portrait_card", Portrait_card); //including the variable in the map
//declaring variable Document_Sheet1_Page1_Orientation1_Portrait1
Identifier Document_Sheet1_Page1_Orientation1_Portrait1 = factory.newIdentifier("Document_Sheet1_Page1_Orientation1_Portrait1");
  			BinaryDomain Document_Sheet1_Page1_Orientation1_Portrait1Dom= new BinaryDomain();
Document_Sheet1_Page1_Orientation1_Portrait1.setDomain(Document_Sheet1_Page1_Orientation1_Portrait1Dom);	
variables.put("Document_Sheet1_Page1_Orientation1_Portrait1", Document_Sheet1_Page1_Orientation1_Portrait1); //including the variable in the map
//declaring variable Document_Sheet1_Page2_Orientation1_Portrait1
Identifier Document_Sheet1_Page2_Orientation1_Portrait1 = factory.newIdentifier("Document_Sheet1_Page2_Orientation1_Portrait1");
  			BinaryDomain Document_Sheet1_Page2_Orientation1_Portrait1Dom= new BinaryDomain();
Document_Sheet1_Page2_Orientation1_Portrait1.setDomain(Document_Sheet1_Page2_Orientation1_Portrait1Dom);	
variables.put("Document_Sheet1_Page2_Orientation1_Portrait1", Document_Sheet1_Page2_Orientation1_Portrait1); //including the variable in the map
//declaring variable Document_Sheet2_Page1_Orientation1_Portrait1
Identifier Document_Sheet2_Page1_Orientation1_Portrait1 = factory.newIdentifier("Document_Sheet2_Page1_Orientation1_Portrait1");
  			BinaryDomain Document_Sheet2_Page1_Orientation1_Portrait1Dom= new BinaryDomain();
Document_Sheet2_Page1_Orientation1_Portrait1.setDomain(Document_Sheet2_Page1_Orientation1_Portrait1Dom);	
variables.put("Document_Sheet2_Page1_Orientation1_Portrait1", Document_Sheet2_Page1_Orientation1_Portrait1); //including the variable in the map
//declaring variable Document_Sheet2_Page2_Orientation1_Portrait1
Identifier Document_Sheet2_Page2_Orientation1_Portrait1 = factory.newIdentifier("Document_Sheet2_Page2_Orientation1_Portrait1");
  			BinaryDomain Document_Sheet2_Page2_Orientation1_Portrait1Dom= new BinaryDomain();
Document_Sheet2_Page2_Orientation1_Portrait1.setDomain(Document_Sheet2_Page2_Orientation1_Portrait1Dom);	
variables.put("Document_Sheet2_Page2_Orientation1_Portrait1", Document_Sheet2_Page2_Orientation1_Portrait1); //including the variable in the map
//declaring variable Page
Identifier Page = factory.newIdentifier("Page");
  			BinaryDomain PageDom= new BinaryDomain();
Page.setDomain(PageDom);	
variables.put("Page", Page); //including the variable in the map
//declaring variable Page_card
Identifier Page_card = factory.newIdentifier("Page_card");
 				RangeDomain Page_cardDom= new RangeDomain(0, 4);
Page_card.setDomain(Page_cardDom);	
variables.put("Page_card", Page_card); //including the variable in the map
//declaring variable Document_Sheet1_Page1
Identifier Document_Sheet1_Page1 = factory.newIdentifier("Document_Sheet1_Page1");
  			BinaryDomain Document_Sheet1_Page1Dom= new BinaryDomain();
Document_Sheet1_Page1.setDomain(Document_Sheet1_Page1Dom);	
variables.put("Document_Sheet1_Page1", Document_Sheet1_Page1); //including the variable in the map
//declaring variable Document_Sheet1_Page2
Identifier Document_Sheet1_Page2 = factory.newIdentifier("Document_Sheet1_Page2");
  			BinaryDomain Document_Sheet1_Page2Dom= new BinaryDomain();
Document_Sheet1_Page2.setDomain(Document_Sheet1_Page2Dom);	
variables.put("Document_Sheet1_Page2", Document_Sheet1_Page2); //including the variable in the map
//declaring variable Document_Sheet2_Page1
Identifier Document_Sheet2_Page1 = factory.newIdentifier("Document_Sheet2_Page1");
  			BinaryDomain Document_Sheet2_Page1Dom= new BinaryDomain();
Document_Sheet2_Page1.setDomain(Document_Sheet2_Page1Dom);	
variables.put("Document_Sheet2_Page1", Document_Sheet2_Page1); //including the variable in the map
//declaring variable Document_Sheet2_Page2
Identifier Document_Sheet2_Page2 = factory.newIdentifier("Document_Sheet2_Page2");
  			BinaryDomain Document_Sheet2_Page2Dom= new BinaryDomain();
Document_Sheet2_Page2.setDomain(Document_Sheet2_Page2Dom);	
variables.put("Document_Sheet2_Page2", Document_Sheet2_Page2); //including the variable in the map
//declaring variable Document
Identifier Document = factory.newIdentifier("Document");
  			BinaryDomain DocumentDom= new BinaryDomain();
Document.setDomain(DocumentDom);	
variables.put("Document", Document); //including the variable in the map
//declaring variable Normal
Identifier Normal = factory.newIdentifier("Normal");
  			BinaryDomain NormalDom= new BinaryDomain();
Normal.setDomain(NormalDom);	
variables.put("Normal", Normal); //including the variable in the map
//declaring variable Orientation
Identifier Orientation = factory.newIdentifier("Orientation");
  			BinaryDomain OrientationDom= new BinaryDomain();
Orientation.setDomain(OrientationDom);	
variables.put("Orientation", Orientation); //including the variable in the map
//declaring variable Orientation_card
Identifier Orientation_card = factory.newIdentifier("Orientation_card");
 				RangeDomain Orientation_cardDom= new RangeDomain(1, 4);
Orientation_card.setDomain(Orientation_cardDom);	
variables.put("Orientation_card", Orientation_card); //including the variable in the map
//declaring variable Document_Sheet1_Page1_Orientation1
Identifier Document_Sheet1_Page1_Orientation1 = factory.newIdentifier("Document_Sheet1_Page1_Orientation1");
  			BinaryDomain Document_Sheet1_Page1_Orientation1Dom= new BinaryDomain();
Document_Sheet1_Page1_Orientation1.setDomain(Document_Sheet1_Page1_Orientation1Dom);	
variables.put("Document_Sheet1_Page1_Orientation1", Document_Sheet1_Page1_Orientation1); //including the variable in the map
//declaring variable Document_Sheet1_Page2_Orientation1
Identifier Document_Sheet1_Page2_Orientation1 = factory.newIdentifier("Document_Sheet1_Page2_Orientation1");
  			BinaryDomain Document_Sheet1_Page2_Orientation1Dom= new BinaryDomain();
Document_Sheet1_Page2_Orientation1.setDomain(Document_Sheet1_Page2_Orientation1Dom);	
variables.put("Document_Sheet1_Page2_Orientation1", Document_Sheet1_Page2_Orientation1); //including the variable in the map
//declaring variable Document_Sheet2_Page1_Orientation1
Identifier Document_Sheet2_Page1_Orientation1 = factory.newIdentifier("Document_Sheet2_Page1_Orientation1");
  			BinaryDomain Document_Sheet2_Page1_Orientation1Dom= new BinaryDomain();
Document_Sheet2_Page1_Orientation1.setDomain(Document_Sheet2_Page1_Orientation1Dom);	
variables.put("Document_Sheet2_Page1_Orientation1", Document_Sheet2_Page1_Orientation1); //including the variable in the map
//declaring variable Document_Sheet2_Page2_Orientation1
Identifier Document_Sheet2_Page2_Orientation1 = factory.newIdentifier("Document_Sheet2_Page2_Orientation1");
  			BinaryDomain Document_Sheet2_Page2_Orientation1Dom= new BinaryDomain();
Document_Sheet2_Page2_Orientation1.setDomain(Document_Sheet2_Page2_Orientation1Dom);	
variables.put("Document_Sheet2_Page2_Orientation1", Document_Sheet2_Page2_Orientation1); //including the variable in the map
//declaring variable Side
Identifier Side = factory.newIdentifier("Side");
  			BinaryDomain SideDom= new BinaryDomain();
Side.setDomain(SideDom);	
variables.put("Side", Side); //including the variable in the map
//declaring variable Side_card
Identifier Side_card = factory.newIdentifier("Side_card");
 				RangeDomain Side_cardDom= new RangeDomain(1, 4);
Side_card.setDomain(Side_cardDom);	
variables.put("Side_card", Side_card); //including the variable in the map
//declaring variable Document_Sheet1_Page1_Side1
Identifier Document_Sheet1_Page1_Side1 = factory.newIdentifier("Document_Sheet1_Page1_Side1");
  			BinaryDomain Document_Sheet1_Page1_Side1Dom= new BinaryDomain();
Document_Sheet1_Page1_Side1.setDomain(Document_Sheet1_Page1_Side1Dom);	
variables.put("Document_Sheet1_Page1_Side1", Document_Sheet1_Page1_Side1); //including the variable in the map
//declaring variable Document_Sheet1_Page2_Side1
Identifier Document_Sheet1_Page2_Side1 = factory.newIdentifier("Document_Sheet1_Page2_Side1");
  			BinaryDomain Document_Sheet1_Page2_Side1Dom= new BinaryDomain();
Document_Sheet1_Page2_Side1.setDomain(Document_Sheet1_Page2_Side1Dom);	
variables.put("Document_Sheet1_Page2_Side1", Document_Sheet1_Page2_Side1); //including the variable in the map
//declaring variable Document_Sheet2_Page1_Side1
Identifier Document_Sheet2_Page1_Side1 = factory.newIdentifier("Document_Sheet2_Page1_Side1");
  			BinaryDomain Document_Sheet2_Page1_Side1Dom= new BinaryDomain();
Document_Sheet2_Page1_Side1.setDomain(Document_Sheet2_Page1_Side1Dom);	
variables.put("Document_Sheet2_Page1_Side1", Document_Sheet2_Page1_Side1); //including the variable in the map
//declaring variable Document_Sheet2_Page2_Side1
Identifier Document_Sheet2_Page2_Side1 = factory.newIdentifier("Document_Sheet2_Page2_Side1");
  			BinaryDomain Document_Sheet2_Page2_Side1Dom= new BinaryDomain();
Document_Sheet2_Page2_Side1.setDomain(Document_Sheet2_Page2_Side1Dom);	
variables.put("Document_Sheet2_Page2_Side1", Document_Sheet2_Page2_Side1); //including the variable in the map
//declaring variable Type
Identifier Type = factory.newIdentifier("Type");
  			BinaryDomain TypeDom= new BinaryDomain();
Type.setDomain(TypeDom);	
variables.put("Type", Type); //including the variable in the map
//declaring variable Top
Identifier Top = factory.newIdentifier("Top");
  			BinaryDomain TopDom= new BinaryDomain();
Top.setDomain(TopDom);	
variables.put("Top", Top); //including the variable in the map
//declaring variable Back
Identifier Back = factory.newIdentifier("Back");
  			BinaryDomain BackDom= new BinaryDomain();
Back.setDomain(BackDom);	
variables.put("Back", Back); //including the variable in the map
//declaring variable Back_card
Identifier Back_card = factory.newIdentifier("Back_card");
 				RangeDomain Back_cardDom= new RangeDomain(1, 4);
Back_card.setDomain(Back_cardDom);	
variables.put("Back_card", Back_card); //including the variable in the map
//declaring variable Document_Sheet1_Page1_Side1_Back1
Identifier Document_Sheet1_Page1_Side1_Back1 = factory.newIdentifier("Document_Sheet1_Page1_Side1_Back1");
  			BinaryDomain Document_Sheet1_Page1_Side1_Back1Dom= new BinaryDomain();
Document_Sheet1_Page1_Side1_Back1.setDomain(Document_Sheet1_Page1_Side1_Back1Dom);	
variables.put("Document_Sheet1_Page1_Side1_Back1", Document_Sheet1_Page1_Side1_Back1); //including the variable in the map
//declaring variable Document_Sheet1_Page2_Side1_Back1
Identifier Document_Sheet1_Page2_Side1_Back1 = factory.newIdentifier("Document_Sheet1_Page2_Side1_Back1");
  			BinaryDomain Document_Sheet1_Page2_Side1_Back1Dom= new BinaryDomain();
Document_Sheet1_Page2_Side1_Back1.setDomain(Document_Sheet1_Page2_Side1_Back1Dom);	
variables.put("Document_Sheet1_Page2_Side1_Back1", Document_Sheet1_Page2_Side1_Back1); //including the variable in the map
//declaring variable Document_Sheet2_Page1_Side1_Back1
Identifier Document_Sheet2_Page1_Side1_Back1 = factory.newIdentifier("Document_Sheet2_Page1_Side1_Back1");
  			BinaryDomain Document_Sheet2_Page1_Side1_Back1Dom= new BinaryDomain();
Document_Sheet2_Page1_Side1_Back1.setDomain(Document_Sheet2_Page1_Side1_Back1Dom);	
variables.put("Document_Sheet2_Page1_Side1_Back1", Document_Sheet2_Page1_Side1_Back1); //including the variable in the map
//declaring variable Document_Sheet2_Page2_Side1_Back1
Identifier Document_Sheet2_Page2_Side1_Back1 = factory.newIdentifier("Document_Sheet2_Page2_Side1_Back1");
  			BinaryDomain Document_Sheet2_Page2_Side1_Back1Dom= new BinaryDomain();
Document_Sheet2_Page2_Side1_Back1.setDomain(Document_Sheet2_Page2_Side1_Back1Dom);	
variables.put("Document_Sheet2_Page2_Side1_Back1", Document_Sheet2_Page2_Side1_Back1); //including the variable in the map
//declaring variable Sheet
Identifier Sheet = factory.newIdentifier("Sheet");
  			BinaryDomain SheetDom= new BinaryDomain();
Sheet.setDomain(SheetDom);	
variables.put("Sheet", Sheet); //including the variable in the map
//declaring variable Sheet_card
Identifier Sheet_card = factory.newIdentifier("Sheet_card");
 				RangeDomain Sheet_cardDom= new RangeDomain(1, 2);
Sheet_card.setDomain(Sheet_cardDom);	
variables.put("Sheet_card", Sheet_card); //including the variable in the map
//declaring variable Document_Sheet1
Identifier Document_Sheet1 = factory.newIdentifier("Document_Sheet1");
  			BinaryDomain Document_Sheet1Dom= new BinaryDomain();
Document_Sheet1.setDomain(Document_Sheet1Dom);	
variables.put("Document_Sheet1", Document_Sheet1); //including the variable in the map
//declaring variable Document_Sheet2
Identifier Document_Sheet2 = factory.newIdentifier("Document_Sheet2");
  			BinaryDomain Document_Sheet2Dom= new BinaryDomain();
Document_Sheet2.setDomain(Document_Sheet2Dom);	
variables.put("Document_Sheet2", Document_Sheet2); //including the variable in the map
//declaring variable Folding
Identifier Folding = factory.newIdentifier("Folding");
  			BinaryDomain FoldingDom= new BinaryDomain();
Folding.setDomain(FoldingDom);	
variables.put("Folding", Folding); //including the variable in the map
//declaring variable Folding_card
Identifier Folding_card = factory.newIdentifier("Folding_card");
 				RangeDomain Folding_cardDom= new RangeDomain(1, 2);
Folding_card.setDomain(Folding_cardDom);	
variables.put("Folding_card", Folding_card); //including the variable in the map
//declaring variable Document_Sheet1_Folding1
Identifier Document_Sheet1_Folding1 = factory.newIdentifier("Document_Sheet1_Folding1");
  			BinaryDomain Document_Sheet1_Folding1Dom= new BinaryDomain();
Document_Sheet1_Folding1.setDomain(Document_Sheet1_Folding1Dom);	
variables.put("Document_Sheet1_Folding1", Document_Sheet1_Folding1); //including the variable in the map
//declaring variable Document_Sheet2_Folding1
Identifier Document_Sheet2_Folding1 = factory.newIdentifier("Document_Sheet2_Folding1");
  			BinaryDomain Document_Sheet2_Folding1Dom= new BinaryDomain();
Document_Sheet2_Folding1.setDomain(Document_Sheet2_Folding1Dom);	
variables.put("Document_Sheet2_Folding1", Document_Sheet2_Folding1); //including the variable in the map
	}
	public void transformConstraints() {
//
//declaring constraint C0


Identifier C0_left = variables.get("Document");

NumericIdentifier C0_right = getValue("1");
IntBooleanExpression C0=
factory.equals(C0_left, C0_right);
constraints.put("C0", C0);
hlclProgram.add(C0);
//
//declaring constraint ac_0


Identifier ac_0_left = variables.get("Sheet_card");


Identifier ac_0_right_left = variables.get("Document_Sheet1");

Identifier ac_0_right_right = variables.get("Document_Sheet2");
IntNumericExpression ac_0_right=factory.sum(ac_0_right_left, ac_0_right_right);	
IntBooleanExpression ac_0=
factory.equals(ac_0_left, ac_0_right);
constraints.put("ac_0", ac_0);
hlclProgram.add(ac_0);
//
//declaring constraint ac_1


NumericIdentifier ac_1_left = getValue("1");


Identifier ac_1_right_left = variables.get("Document_Sheet1");

Identifier ac_1_right_right = variables.get("Document_Sheet2");
IntNumericExpression ac_1_right=factory.sum(ac_1_right_left, ac_1_right_right);	
IntBooleanExpression ac_1=
factory.lessOrEqualsThan(ac_1_left, ac_1_right);
constraints.put("ac_1", ac_1);
hlclProgram.add(ac_1);
//
//declaring constraint ac_2


NumericIdentifier ac_2_left = getValue("2");


Identifier ac_2_right_left = variables.get("Document_Sheet1");

Identifier ac_2_right_right = variables.get("Document_Sheet2");
IntNumericExpression ac_2_right=factory.sum(ac_2_right_left, ac_2_right_right);	
IntBooleanExpression ac_2=
factory.greaterOrEqualsThan(ac_2_left, ac_2_right);
constraints.put("ac_2", ac_2);
hlclProgram.add(ac_2);
//
//declaring constraint ac_3


Identifier ac_3_left = variables.get("Sheet");


Identifier ac_3_right_left = variables.get("Sheet_card");

NumericIdentifier ac_3_right_right = getValue("0");
IntBooleanExpression ac_3_right=
factory.greaterThan(ac_3_right_left, ac_3_right_right);
IntBooleanExpression ac_3=factory.doubleImplies(ac_3_left, ac_3_right);		
constraints.put("ac_3", ac_3);
hlclProgram.add(ac_3);
//
//declaring constraint c1_1


Identifier c1_1_left = variables.get("Document");

Identifier c1_1_right = variables.get("Type");
IntBooleanExpression c1_1=
factory.equals(c1_1_left, c1_1_right);
constraints.put("c1_1", c1_1);
hlclProgram.add(c1_1);
//
//declaring constraint c1_2


Identifier c1_2_left = variables.get("Document");

Identifier c1_2_right = variables.get("Binding");
IntBooleanExpression c1_2=
factory.greaterOrEqualsThan(c1_2_left, c1_2_right);
constraints.put("c1_2", c1_2);
hlclProgram.add(c1_2);
//
//declaring constraint c2





Identifier c2_left_left_left_left = variables.get("Normal");

Identifier c2_left_left_left_right = variables.get("Type");
IntBooleanExpression c2_left_left_left=factory.implies(c2_left_left_left_left, c2_left_left_left_right);		


Identifier c2_left_left_right_left = variables.get("Booklet");

Identifier c2_left_left_right_right = variables.get("Type");
IntBooleanExpression c2_left_left_right=factory.implies(c2_left_left_right_left, c2_left_left_right_right);		
IntBooleanExpression c2_left_left=factory.and(c2_left_left_left, c2_left_left_right);		


Identifier c2_left_right_left = variables.get("Type");

NumericIdentifier c2_left_right_right = getValue("1");
IntBooleanExpression c2_left_right=
factory.greaterOrEqualsThan(c2_left_right_left, c2_left_right_right);
IntBooleanExpression c2_left=factory.and(c2_left_left, c2_left_right);		




Identifier c2_right_left_left_left = variables.get("Normal");

Identifier c2_right_left_left_right = variables.get("Booklet");
IntNumericExpression c2_right_left_left=factory.sum(c2_right_left_left_left, c2_right_left_left_right);	

NumericIdentifier c2_right_left_right = getValue("1");
IntBooleanExpression c2_right_left=
factory.lessOrEqualsThan(c2_right_left_left, c2_right_left_right);



Identifier c2_right_right_left_left = variables.get("Normal");

Identifier c2_right_right_left_right = variables.get("Booklet");
IntNumericExpression c2_right_right_left=factory.sum(c2_right_right_left_left, c2_right_right_left_right);	

NumericIdentifier c2_right_right_right = getValue("1");
IntBooleanExpression c2_right_right=
factory.greaterOrEqualsThan(c2_right_right_left, c2_right_right_right);
IntBooleanExpression c2_right=factory.and(c2_right_left, c2_right_right);		
IntBooleanExpression c2=factory.implies(c2_left, c2_right);		
constraints.put("c2", c2);
hlclProgram.add(c2);
//
//declaring constraint c3






Identifier c3_left_left_left_left_left = variables.get("Top");

Identifier c3_left_left_left_left_right = variables.get("Binding");
IntBooleanExpression c3_left_left_left_left=factory.implies(c3_left_left_left_left_left, c3_left_left_left_left_right);		


Identifier c3_left_left_left_right_left = variables.get("Left");

Identifier c3_left_left_left_right_right = variables.get("Binding");
IntBooleanExpression c3_left_left_left_right=factory.implies(c3_left_left_left_right_left, c3_left_left_left_right_right);		
IntBooleanExpression c3_left_left_left=factory.and(c3_left_left_left_left, c3_left_left_left_right);		


Identifier c3_left_left_right_left = variables.get("Right");

Identifier c3_left_left_right_right = variables.get("Binding");
IntBooleanExpression c3_left_left_right=factory.implies(c3_left_left_right_left, c3_left_left_right_right);		
IntBooleanExpression c3_left_left=factory.and(c3_left_left_left, c3_left_left_right);		


Identifier c3_left_right_left = variables.get("Binding");

NumericIdentifier c3_left_right_right = getValue("1");
IntBooleanExpression c3_left_right=
factory.greaterOrEqualsThan(c3_left_right_left, c3_left_right_right);
IntBooleanExpression c3_left=factory.and(c3_left_left, c3_left_right);		





Identifier c3_right_left_left_left_left = variables.get("Top");

Identifier c3_right_left_left_left_right = variables.get("Left");
IntNumericExpression c3_right_left_left_left=factory.sum(c3_right_left_left_left_left, c3_right_left_left_left_right);	

Identifier c3_right_left_left_right = variables.get("Right");
IntNumericExpression c3_right_left_left=factory.sum(c3_right_left_left_left, c3_right_left_left_right);	

NumericIdentifier c3_right_left_right = getValue("1");
IntBooleanExpression c3_right_left=
factory.lessOrEqualsThan(c3_right_left_left, c3_right_left_right);




Identifier c3_right_right_left_left_left = variables.get("Top");

Identifier c3_right_right_left_left_right = variables.get("Left");
IntNumericExpression c3_right_right_left_left=factory.sum(c3_right_right_left_left_left, c3_right_right_left_left_right);	

Identifier c3_right_right_left_right = variables.get("Right");
IntNumericExpression c3_right_right_left=factory.sum(c3_right_right_left_left, c3_right_right_left_right);	

NumericIdentifier c3_right_right_right = getValue("1");
IntBooleanExpression c3_right_right=
factory.greaterOrEqualsThan(c3_right_right_left, c3_right_right_right);
IntBooleanExpression c3_right=factory.and(c3_right_left, c3_right_right);		
IntBooleanExpression c3=factory.implies(c3_left, c3_right);		
constraints.put("c3", c3);
hlclProgram.add(c3);
//
//declaring constraint ac_4


Identifier ac_4_left = variables.get("Document_Sheet1");



NumericIdentifier ac_4_right_left_left = getValue("0");


Identifier ac_4_right_left_right_left = variables.get("Document_Sheet1_Page1");

Identifier ac_4_right_left_right_right = variables.get("Document_Sheet1_Page2");
IntNumericExpression ac_4_right_left_right=factory.sum(ac_4_right_left_right_left, ac_4_right_left_right_right);	
IntBooleanExpression ac_4_right_left=
factory.lessOrEqualsThan(ac_4_right_left_left, ac_4_right_left_right);


NumericIdentifier ac_4_right_right_left = getValue("2");


Identifier ac_4_right_right_right_left = variables.get("Document_Sheet1_Page1");

Identifier ac_4_right_right_right_right = variables.get("Document_Sheet1_Page2");
IntNumericExpression ac_4_right_right_right=factory.sum(ac_4_right_right_right_left, ac_4_right_right_right_right);	
IntBooleanExpression ac_4_right_right=
factory.greaterOrEqualsThan(ac_4_right_right_left, ac_4_right_right_right);
IntBooleanExpression ac_4_right=factory.and(ac_4_right_left, ac_4_right_right);		
IntBooleanExpression ac_4=factory.doubleImplies(ac_4_left, ac_4_right);		
constraints.put("ac_4", ac_4);
hlclProgram.add(ac_4);
//
//declaring constraint ac_5


Identifier ac_5_left = variables.get("Document_Sheet2");



NumericIdentifier ac_5_right_left_left = getValue("0");


Identifier ac_5_right_left_right_left = variables.get("Document_Sheet2_Page1");

Identifier ac_5_right_left_right_right = variables.get("Document_Sheet2_Page2");
IntNumericExpression ac_5_right_left_right=factory.sum(ac_5_right_left_right_left, ac_5_right_left_right_right);	
IntBooleanExpression ac_5_right_left=
factory.lessOrEqualsThan(ac_5_right_left_left, ac_5_right_left_right);


NumericIdentifier ac_5_right_right_left = getValue("2");


Identifier ac_5_right_right_right_left = variables.get("Document_Sheet2_Page1");

Identifier ac_5_right_right_right_right = variables.get("Document_Sheet2_Page2");
IntNumericExpression ac_5_right_right_right=factory.sum(ac_5_right_right_right_left, ac_5_right_right_right_right);	
IntBooleanExpression ac_5_right_right=
factory.greaterOrEqualsThan(ac_5_right_right_left, ac_5_right_right_right);
IntBooleanExpression ac_5_right=factory.and(ac_5_right_left, ac_5_right_right);		
IntBooleanExpression ac_5=factory.doubleImplies(ac_5_left, ac_5_right);		
constraints.put("ac_5", ac_5);
hlclProgram.add(ac_5);
//
//declaring constraint ac_6


Identifier ac_6_left = variables.get("Page_card");




Identifier ac_6_right_left_left_left = variables.get("Document_Sheet1_Page1");

Identifier ac_6_right_left_left_right = variables.get("Document_Sheet1_Page2");
IntNumericExpression ac_6_right_left_left=factory.sum(ac_6_right_left_left_left, ac_6_right_left_left_right);	

Identifier ac_6_right_left_right = variables.get("Document_Sheet2_Page1");
IntNumericExpression ac_6_right_left=factory.sum(ac_6_right_left_left, ac_6_right_left_right);	

Identifier ac_6_right_right = variables.get("Document_Sheet2_Page2");
IntNumericExpression ac_6_right=factory.sum(ac_6_right_left, ac_6_right_right);	
IntBooleanExpression ac_6=
factory.equals(ac_6_left, ac_6_right);
constraints.put("ac_6", ac_6);
hlclProgram.add(ac_6);
//
//declaring constraint ac_7


NumericIdentifier ac_7_left = getValue("0");




Identifier ac_7_right_left_left_left = variables.get("Document_Sheet1_Page1");

Identifier ac_7_right_left_left_right = variables.get("Document_Sheet1_Page2");
IntNumericExpression ac_7_right_left_left=factory.sum(ac_7_right_left_left_left, ac_7_right_left_left_right);	

Identifier ac_7_right_left_right = variables.get("Document_Sheet2_Page1");
IntNumericExpression ac_7_right_left=factory.sum(ac_7_right_left_left, ac_7_right_left_right);	

Identifier ac_7_right_right = variables.get("Document_Sheet2_Page2");
IntNumericExpression ac_7_right=factory.sum(ac_7_right_left, ac_7_right_right);	
IntBooleanExpression ac_7=
factory.lessOrEqualsThan(ac_7_left, ac_7_right);
constraints.put("ac_7", ac_7);
hlclProgram.add(ac_7);
//
//declaring constraint ac_8


NumericIdentifier ac_8_left = getValue("4");




Identifier ac_8_right_left_left_left = variables.get("Document_Sheet1_Page1");

Identifier ac_8_right_left_left_right = variables.get("Document_Sheet1_Page2");
IntNumericExpression ac_8_right_left_left=factory.sum(ac_8_right_left_left_left, ac_8_right_left_left_right);	

Identifier ac_8_right_left_right = variables.get("Document_Sheet2_Page1");
IntNumericExpression ac_8_right_left=factory.sum(ac_8_right_left_left, ac_8_right_left_right);	

Identifier ac_8_right_right = variables.get("Document_Sheet2_Page2");
IntNumericExpression ac_8_right=factory.sum(ac_8_right_left, ac_8_right_right);	
IntBooleanExpression ac_8=
factory.greaterOrEqualsThan(ac_8_left, ac_8_right);
constraints.put("ac_8", ac_8);
hlclProgram.add(ac_8);
//
//declaring constraint ac_9


Identifier ac_9_left = variables.get("Page");


Identifier ac_9_right_left = variables.get("Page_card");

NumericIdentifier ac_9_right_right = getValue("0");
IntBooleanExpression ac_9_right=
factory.greaterThan(ac_9_right_left, ac_9_right_right);
IntBooleanExpression ac_9=factory.doubleImplies(ac_9_left, ac_9_right);		
constraints.put("ac_9", ac_9);
hlclProgram.add(ac_9);
//
//declaring constraint ac_10


Identifier ac_10_left = variables.get("Document_Sheet1");



NumericIdentifier ac_10_right_left_left = getValue("1");

Identifier ac_10_right_left_right = variables.get("Document_Sheet1_Folding1");
IntBooleanExpression ac_10_right_left=
factory.lessOrEqualsThan(ac_10_right_left_left, ac_10_right_left_right);


NumericIdentifier ac_10_right_right_left = getValue("1");

Identifier ac_10_right_right_right = variables.get("Document_Sheet1_Folding1");
IntBooleanExpression ac_10_right_right=
factory.greaterOrEqualsThan(ac_10_right_right_left, ac_10_right_right_right);
IntBooleanExpression ac_10_right=factory.and(ac_10_right_left, ac_10_right_right);		
IntBooleanExpression ac_10=factory.doubleImplies(ac_10_left, ac_10_right);		
constraints.put("ac_10", ac_10);
hlclProgram.add(ac_10);
//
//declaring constraint ac_11


Identifier ac_11_left = variables.get("Document_Sheet2");



NumericIdentifier ac_11_right_left_left = getValue("1");

Identifier ac_11_right_left_right = variables.get("Document_Sheet2_Folding1");
IntBooleanExpression ac_11_right_left=
factory.lessOrEqualsThan(ac_11_right_left_left, ac_11_right_left_right);


NumericIdentifier ac_11_right_right_left = getValue("1");

Identifier ac_11_right_right_right = variables.get("Document_Sheet2_Folding1");
IntBooleanExpression ac_11_right_right=
factory.greaterOrEqualsThan(ac_11_right_right_left, ac_11_right_right_right);
IntBooleanExpression ac_11_right=factory.and(ac_11_right_left, ac_11_right_right);		
IntBooleanExpression ac_11=factory.doubleImplies(ac_11_left, ac_11_right);		
constraints.put("ac_11", ac_11);
hlclProgram.add(ac_11);
//
//declaring constraint ac_12


Identifier ac_12_left = variables.get("Folding_card");


Identifier ac_12_right_left = variables.get("Document_Sheet1_Folding1");

Identifier ac_12_right_right = variables.get("Document_Sheet2_Folding1");
IntNumericExpression ac_12_right=factory.sum(ac_12_right_left, ac_12_right_right);	
IntBooleanExpression ac_12=
factory.equals(ac_12_left, ac_12_right);
constraints.put("ac_12", ac_12);
hlclProgram.add(ac_12);
//
//declaring constraint ac_13


NumericIdentifier ac_13_left = getValue("1");


Identifier ac_13_right_left = variables.get("Document_Sheet1_Folding1");

Identifier ac_13_right_right = variables.get("Document_Sheet2_Folding1");
IntNumericExpression ac_13_right=factory.sum(ac_13_right_left, ac_13_right_right);	
IntBooleanExpression ac_13=
factory.lessOrEqualsThan(ac_13_left, ac_13_right);
constraints.put("ac_13", ac_13);
hlclProgram.add(ac_13);
//
//declaring constraint ac_14


NumericIdentifier ac_14_left = getValue("2");


Identifier ac_14_right_left = variables.get("Document_Sheet1_Folding1");

Identifier ac_14_right_right = variables.get("Document_Sheet2_Folding1");
IntNumericExpression ac_14_right=factory.sum(ac_14_right_left, ac_14_right_right);	
IntBooleanExpression ac_14=
factory.greaterOrEqualsThan(ac_14_left, ac_14_right);
constraints.put("ac_14", ac_14);
hlclProgram.add(ac_14);
//
//declaring constraint ac_15


Identifier ac_15_left = variables.get("Folding");


Identifier ac_15_right_left = variables.get("Folding_card");

NumericIdentifier ac_15_right_right = getValue("0");
IntBooleanExpression ac_15_right=
factory.greaterThan(ac_15_right_left, ac_15_right_right);
IntBooleanExpression ac_15=factory.doubleImplies(ac_15_left, ac_15_right);		
constraints.put("ac_15", ac_15);
hlclProgram.add(ac_15);
//
//declaring constraint c4_1


Identifier c4_1_left = variables.get("Sheet");

Identifier c4_1_right = variables.get("Folding");
IntBooleanExpression c4_1=
factory.greaterOrEqualsThan(c4_1_left, c4_1_right);
constraints.put("c4_1", c4_1);
hlclProgram.add(c4_1);
//
//declaring constraint c4_2


Identifier c4_2_left = variables.get("Sheet");

Identifier c4_2_right = variables.get("Page");
IntBooleanExpression c4_2=
factory.greaterOrEqualsThan(c4_2_left, c4_2_right);
constraints.put("c4_2", c4_2);
hlclProgram.add(c4_2);
//
//declaring constraint ac_16


Identifier ac_16_left = variables.get("Document_Sheet1_Page1");



NumericIdentifier ac_16_right_left_left = getValue("1");

Identifier ac_16_right_left_right = variables.get("Document_Sheet1_Page1_Orientation1");
IntBooleanExpression ac_16_right_left=
factory.lessOrEqualsThan(ac_16_right_left_left, ac_16_right_left_right);


NumericIdentifier ac_16_right_right_left = getValue("1");

Identifier ac_16_right_right_right = variables.get("Document_Sheet1_Page1_Orientation1");
IntBooleanExpression ac_16_right_right=
factory.greaterOrEqualsThan(ac_16_right_right_left, ac_16_right_right_right);
IntBooleanExpression ac_16_right=factory.and(ac_16_right_left, ac_16_right_right);		
IntBooleanExpression ac_16=factory.doubleImplies(ac_16_left, ac_16_right);		
constraints.put("ac_16", ac_16);
hlclProgram.add(ac_16);
//
//declaring constraint ac_17


Identifier ac_17_left = variables.get("Document_Sheet1_Page2");



NumericIdentifier ac_17_right_left_left = getValue("1");

Identifier ac_17_right_left_right = variables.get("Document_Sheet1_Page2_Orientation1");
IntBooleanExpression ac_17_right_left=
factory.lessOrEqualsThan(ac_17_right_left_left, ac_17_right_left_right);


NumericIdentifier ac_17_right_right_left = getValue("1");

Identifier ac_17_right_right_right = variables.get("Document_Sheet1_Page2_Orientation1");
IntBooleanExpression ac_17_right_right=
factory.greaterOrEqualsThan(ac_17_right_right_left, ac_17_right_right_right);
IntBooleanExpression ac_17_right=factory.and(ac_17_right_left, ac_17_right_right);		
IntBooleanExpression ac_17=factory.doubleImplies(ac_17_left, ac_17_right);		
constraints.put("ac_17", ac_17);
hlclProgram.add(ac_17);
//
//declaring constraint ac_18


Identifier ac_18_left = variables.get("Document_Sheet2_Page1");



NumericIdentifier ac_18_right_left_left = getValue("1");

Identifier ac_18_right_left_right = variables.get("Document_Sheet2_Page1_Orientation1");
IntBooleanExpression ac_18_right_left=
factory.lessOrEqualsThan(ac_18_right_left_left, ac_18_right_left_right);


NumericIdentifier ac_18_right_right_left = getValue("1");

Identifier ac_18_right_right_right = variables.get("Document_Sheet2_Page1_Orientation1");
IntBooleanExpression ac_18_right_right=
factory.greaterOrEqualsThan(ac_18_right_right_left, ac_18_right_right_right);
IntBooleanExpression ac_18_right=factory.and(ac_18_right_left, ac_18_right_right);		
IntBooleanExpression ac_18=factory.doubleImplies(ac_18_left, ac_18_right);		
constraints.put("ac_18", ac_18);
hlclProgram.add(ac_18);
//
//declaring constraint ac_19


Identifier ac_19_left = variables.get("Document_Sheet2_Page2");



NumericIdentifier ac_19_right_left_left = getValue("1");

Identifier ac_19_right_left_right = variables.get("Document_Sheet2_Page2_Orientation1");
IntBooleanExpression ac_19_right_left=
factory.lessOrEqualsThan(ac_19_right_left_left, ac_19_right_left_right);


NumericIdentifier ac_19_right_right_left = getValue("1");

Identifier ac_19_right_right_right = variables.get("Document_Sheet2_Page2_Orientation1");
IntBooleanExpression ac_19_right_right=
factory.greaterOrEqualsThan(ac_19_right_right_left, ac_19_right_right_right);
IntBooleanExpression ac_19_right=factory.and(ac_19_right_left, ac_19_right_right);		
IntBooleanExpression ac_19=factory.doubleImplies(ac_19_left, ac_19_right);		
constraints.put("ac_19", ac_19);
hlclProgram.add(ac_19);
//
//declaring constraint ac_20


Identifier ac_20_left = variables.get("Orientation_card");




Identifier ac_20_right_left_left_left = variables.get("Document_Sheet1_Page1_Orientation1");

Identifier ac_20_right_left_left_right = variables.get("Document_Sheet1_Page2_Orientation1");
IntNumericExpression ac_20_right_left_left=factory.sum(ac_20_right_left_left_left, ac_20_right_left_left_right);	

Identifier ac_20_right_left_right = variables.get("Document_Sheet2_Page1_Orientation1");
IntNumericExpression ac_20_right_left=factory.sum(ac_20_right_left_left, ac_20_right_left_right);	

Identifier ac_20_right_right = variables.get("Document_Sheet2_Page2_Orientation1");
IntNumericExpression ac_20_right=factory.sum(ac_20_right_left, ac_20_right_right);	
IntBooleanExpression ac_20=
factory.equals(ac_20_left, ac_20_right);
constraints.put("ac_20", ac_20);
hlclProgram.add(ac_20);
//
//declaring constraint ac_21


NumericIdentifier ac_21_left = getValue("1");




Identifier ac_21_right_left_left_left = variables.get("Document_Sheet1_Page1_Orientation1");

Identifier ac_21_right_left_left_right = variables.get("Document_Sheet1_Page2_Orientation1");
IntNumericExpression ac_21_right_left_left=factory.sum(ac_21_right_left_left_left, ac_21_right_left_left_right);	

Identifier ac_21_right_left_right = variables.get("Document_Sheet2_Page1_Orientation1");
IntNumericExpression ac_21_right_left=factory.sum(ac_21_right_left_left, ac_21_right_left_right);	

Identifier ac_21_right_right = variables.get("Document_Sheet2_Page2_Orientation1");
IntNumericExpression ac_21_right=factory.sum(ac_21_right_left, ac_21_right_right);	
IntBooleanExpression ac_21=
factory.lessOrEqualsThan(ac_21_left, ac_21_right);
constraints.put("ac_21", ac_21);
hlclProgram.add(ac_21);
//
//declaring constraint ac_22


NumericIdentifier ac_22_left = getValue("4");




Identifier ac_22_right_left_left_left = variables.get("Document_Sheet1_Page1_Orientation1");

Identifier ac_22_right_left_left_right = variables.get("Document_Sheet1_Page2_Orientation1");
IntNumericExpression ac_22_right_left_left=factory.sum(ac_22_right_left_left_left, ac_22_right_left_left_right);	

Identifier ac_22_right_left_right = variables.get("Document_Sheet2_Page1_Orientation1");
IntNumericExpression ac_22_right_left=factory.sum(ac_22_right_left_left, ac_22_right_left_right);	

Identifier ac_22_right_right = variables.get("Document_Sheet2_Page2_Orientation1");
IntNumericExpression ac_22_right=factory.sum(ac_22_right_left, ac_22_right_right);	
IntBooleanExpression ac_22=
factory.greaterOrEqualsThan(ac_22_left, ac_22_right);
constraints.put("ac_22", ac_22);
hlclProgram.add(ac_22);
//
//declaring constraint ac_23


Identifier ac_23_left = variables.get("Orientation");


Identifier ac_23_right_left = variables.get("Orientation_card");

NumericIdentifier ac_23_right_right = getValue("0");
IntBooleanExpression ac_23_right=
factory.greaterThan(ac_23_right_left, ac_23_right_right);
IntBooleanExpression ac_23=factory.doubleImplies(ac_23_left, ac_23_right);		
constraints.put("ac_23", ac_23);
hlclProgram.add(ac_23);
//
//declaring constraint ac_24


Identifier ac_24_left = variables.get("Document_Sheet1_Page1");



NumericIdentifier ac_24_right_left_left = getValue("1");

Identifier ac_24_right_left_right = variables.get("Document_Sheet1_Page1_Side1");
IntBooleanExpression ac_24_right_left=
factory.lessOrEqualsThan(ac_24_right_left_left, ac_24_right_left_right);


NumericIdentifier ac_24_right_right_left = getValue("1");

Identifier ac_24_right_right_right = variables.get("Document_Sheet1_Page1_Side1");
IntBooleanExpression ac_24_right_right=
factory.greaterOrEqualsThan(ac_24_right_right_left, ac_24_right_right_right);
IntBooleanExpression ac_24_right=factory.and(ac_24_right_left, ac_24_right_right);		
IntBooleanExpression ac_24=factory.doubleImplies(ac_24_left, ac_24_right);		
constraints.put("ac_24", ac_24);
hlclProgram.add(ac_24);
//
//declaring constraint ac_25


Identifier ac_25_left = variables.get("Document_Sheet1_Page2");



NumericIdentifier ac_25_right_left_left = getValue("1");

Identifier ac_25_right_left_right = variables.get("Document_Sheet1_Page2_Side1");
IntBooleanExpression ac_25_right_left=
factory.lessOrEqualsThan(ac_25_right_left_left, ac_25_right_left_right);


NumericIdentifier ac_25_right_right_left = getValue("1");

Identifier ac_25_right_right_right = variables.get("Document_Sheet1_Page2_Side1");
IntBooleanExpression ac_25_right_right=
factory.greaterOrEqualsThan(ac_25_right_right_left, ac_25_right_right_right);
IntBooleanExpression ac_25_right=factory.and(ac_25_right_left, ac_25_right_right);		
IntBooleanExpression ac_25=factory.doubleImplies(ac_25_left, ac_25_right);		
constraints.put("ac_25", ac_25);
hlclProgram.add(ac_25);
//
//declaring constraint ac_26


Identifier ac_26_left = variables.get("Document_Sheet2_Page1");



NumericIdentifier ac_26_right_left_left = getValue("1");

Identifier ac_26_right_left_right = variables.get("Document_Sheet2_Page1_Side1");
IntBooleanExpression ac_26_right_left=
factory.lessOrEqualsThan(ac_26_right_left_left, ac_26_right_left_right);


NumericIdentifier ac_26_right_right_left = getValue("1");

Identifier ac_26_right_right_right = variables.get("Document_Sheet2_Page1_Side1");
IntBooleanExpression ac_26_right_right=
factory.greaterOrEqualsThan(ac_26_right_right_left, ac_26_right_right_right);
IntBooleanExpression ac_26_right=factory.and(ac_26_right_left, ac_26_right_right);		
IntBooleanExpression ac_26=factory.doubleImplies(ac_26_left, ac_26_right);		
constraints.put("ac_26", ac_26);
hlclProgram.add(ac_26);
//
//declaring constraint ac_27


Identifier ac_27_left = variables.get("Document_Sheet2_Page2");



NumericIdentifier ac_27_right_left_left = getValue("1");

Identifier ac_27_right_left_right = variables.get("Document_Sheet2_Page2_Side1");
IntBooleanExpression ac_27_right_left=
factory.lessOrEqualsThan(ac_27_right_left_left, ac_27_right_left_right);


NumericIdentifier ac_27_right_right_left = getValue("1");

Identifier ac_27_right_right_right = variables.get("Document_Sheet2_Page2_Side1");
IntBooleanExpression ac_27_right_right=
factory.greaterOrEqualsThan(ac_27_right_right_left, ac_27_right_right_right);
IntBooleanExpression ac_27_right=factory.and(ac_27_right_left, ac_27_right_right);		
IntBooleanExpression ac_27=factory.doubleImplies(ac_27_left, ac_27_right);		
constraints.put("ac_27", ac_27);
hlclProgram.add(ac_27);
//
//declaring constraint ac_28


Identifier ac_28_left = variables.get("Side_card");




Identifier ac_28_right_left_left_left = variables.get("Document_Sheet1_Page1_Side1");

Identifier ac_28_right_left_left_right = variables.get("Document_Sheet1_Page2_Side1");
IntNumericExpression ac_28_right_left_left=factory.sum(ac_28_right_left_left_left, ac_28_right_left_left_right);	

Identifier ac_28_right_left_right = variables.get("Document_Sheet2_Page1_Side1");
IntNumericExpression ac_28_right_left=factory.sum(ac_28_right_left_left, ac_28_right_left_right);	

Identifier ac_28_right_right = variables.get("Document_Sheet2_Page2_Side1");
IntNumericExpression ac_28_right=factory.sum(ac_28_right_left, ac_28_right_right);	
IntBooleanExpression ac_28=
factory.equals(ac_28_left, ac_28_right);
constraints.put("ac_28", ac_28);
hlclProgram.add(ac_28);
//
//declaring constraint ac_29


NumericIdentifier ac_29_left = getValue("1");




Identifier ac_29_right_left_left_left = variables.get("Document_Sheet1_Page1_Side1");

Identifier ac_29_right_left_left_right = variables.get("Document_Sheet1_Page2_Side1");
IntNumericExpression ac_29_right_left_left=factory.sum(ac_29_right_left_left_left, ac_29_right_left_left_right);	

Identifier ac_29_right_left_right = variables.get("Document_Sheet2_Page1_Side1");
IntNumericExpression ac_29_right_left=factory.sum(ac_29_right_left_left, ac_29_right_left_right);	

Identifier ac_29_right_right = variables.get("Document_Sheet2_Page2_Side1");
IntNumericExpression ac_29_right=factory.sum(ac_29_right_left, ac_29_right_right);	
IntBooleanExpression ac_29=
factory.lessOrEqualsThan(ac_29_left, ac_29_right);
constraints.put("ac_29", ac_29);
hlclProgram.add(ac_29);
//
//declaring constraint ac_30


NumericIdentifier ac_30_left = getValue("4");




Identifier ac_30_right_left_left_left = variables.get("Document_Sheet1_Page1_Side1");

Identifier ac_30_right_left_left_right = variables.get("Document_Sheet1_Page2_Side1");
IntNumericExpression ac_30_right_left_left=factory.sum(ac_30_right_left_left_left, ac_30_right_left_left_right);	

Identifier ac_30_right_left_right = variables.get("Document_Sheet2_Page1_Side1");
IntNumericExpression ac_30_right_left=factory.sum(ac_30_right_left_left, ac_30_right_left_right);	

Identifier ac_30_right_right = variables.get("Document_Sheet2_Page2_Side1");
IntNumericExpression ac_30_right=factory.sum(ac_30_right_left, ac_30_right_right);	
IntBooleanExpression ac_30=
factory.greaterOrEqualsThan(ac_30_left, ac_30_right);
constraints.put("ac_30", ac_30);
hlclProgram.add(ac_30);
//
//declaring constraint ac_31


Identifier ac_31_left = variables.get("Side");


Identifier ac_31_right_left = variables.get("Side_card");

NumericIdentifier ac_31_right_right = getValue("0");
IntBooleanExpression ac_31_right=
factory.greaterThan(ac_31_right_left, ac_31_right_right);
IntBooleanExpression ac_31=factory.doubleImplies(ac_31_left, ac_31_right);		
constraints.put("ac_31", ac_31);
hlclProgram.add(ac_31);
//
//declaring constraint c5_1


Identifier c5_1_left = variables.get("Page");

Identifier c5_1_right = variables.get("Orientation");
IntBooleanExpression c5_1=
factory.equals(c5_1_left, c5_1_right);
constraints.put("c5_1", c5_1);
hlclProgram.add(c5_1);
//
//declaring constraint c5_2


Identifier c5_2_left = variables.get("Page");

Identifier c5_2_right = variables.get("Side");
IntBooleanExpression c5_2=
factory.greaterOrEqualsThan(c5_2_left, c5_2_right);
constraints.put("c5_2", c5_2);
hlclProgram.add(c5_2);
//
//declaring constraint ac_32


Identifier ac_32_left = variables.get("Document_Sheet1_Page1_Orientation1");



NumericIdentifier ac_32_right_left_left = getValue("1");

Identifier ac_32_right_left_right = variables.get("Document_Sheet1_Page1_Orientation1_Landscape1");
IntBooleanExpression ac_32_right_left=
factory.lessOrEqualsThan(ac_32_right_left_left, ac_32_right_left_right);


NumericIdentifier ac_32_right_right_left = getValue("1");

Identifier ac_32_right_right_right = variables.get("Document_Sheet1_Page1_Orientation1_Landscape1");
IntBooleanExpression ac_32_right_right=
factory.greaterOrEqualsThan(ac_32_right_right_left, ac_32_right_right_right);
IntBooleanExpression ac_32_right=factory.and(ac_32_right_left, ac_32_right_right);		
IntBooleanExpression ac_32=factory.doubleImplies(ac_32_left, ac_32_right);		
constraints.put("ac_32", ac_32);
hlclProgram.add(ac_32);
//
//declaring constraint ac_33


Identifier ac_33_left = variables.get("Document_Sheet1_Page2_Orientation1");



NumericIdentifier ac_33_right_left_left = getValue("1");

Identifier ac_33_right_left_right = variables.get("Document_Sheet1_Page2_Orientation1_Landscape1");
IntBooleanExpression ac_33_right_left=
factory.lessOrEqualsThan(ac_33_right_left_left, ac_33_right_left_right);


NumericIdentifier ac_33_right_right_left = getValue("1");

Identifier ac_33_right_right_right = variables.get("Document_Sheet1_Page2_Orientation1_Landscape1");
IntBooleanExpression ac_33_right_right=
factory.greaterOrEqualsThan(ac_33_right_right_left, ac_33_right_right_right);
IntBooleanExpression ac_33_right=factory.and(ac_33_right_left, ac_33_right_right);		
IntBooleanExpression ac_33=factory.doubleImplies(ac_33_left, ac_33_right);		
constraints.put("ac_33", ac_33);
hlclProgram.add(ac_33);
//
//declaring constraint ac_34


Identifier ac_34_left = variables.get("Document_Sheet2_Page1_Orientation1");



NumericIdentifier ac_34_right_left_left = getValue("1");

Identifier ac_34_right_left_right = variables.get("Document_Sheet2_Page1_Orientation1_Landscape1");
IntBooleanExpression ac_34_right_left=
factory.lessOrEqualsThan(ac_34_right_left_left, ac_34_right_left_right);


NumericIdentifier ac_34_right_right_left = getValue("1");

Identifier ac_34_right_right_right = variables.get("Document_Sheet2_Page1_Orientation1_Landscape1");
IntBooleanExpression ac_34_right_right=
factory.greaterOrEqualsThan(ac_34_right_right_left, ac_34_right_right_right);
IntBooleanExpression ac_34_right=factory.and(ac_34_right_left, ac_34_right_right);		
IntBooleanExpression ac_34=factory.doubleImplies(ac_34_left, ac_34_right);		
constraints.put("ac_34", ac_34);
hlclProgram.add(ac_34);
//
//declaring constraint ac_35


Identifier ac_35_left = variables.get("Document_Sheet2_Page2_Orientation1");



NumericIdentifier ac_35_right_left_left = getValue("1");

Identifier ac_35_right_left_right = variables.get("Document_Sheet2_Page2_Orientation1_Landscape1");
IntBooleanExpression ac_35_right_left=
factory.lessOrEqualsThan(ac_35_right_left_left, ac_35_right_left_right);


NumericIdentifier ac_35_right_right_left = getValue("1");

Identifier ac_35_right_right_right = variables.get("Document_Sheet2_Page2_Orientation1_Landscape1");
IntBooleanExpression ac_35_right_right=
factory.greaterOrEqualsThan(ac_35_right_right_left, ac_35_right_right_right);
IntBooleanExpression ac_35_right=factory.and(ac_35_right_left, ac_35_right_right);		
IntBooleanExpression ac_35=factory.doubleImplies(ac_35_left, ac_35_right);		
constraints.put("ac_35", ac_35);
hlclProgram.add(ac_35);
//
//declaring constraint ac_36


Identifier ac_36_left = variables.get("Landscape_card");




Identifier ac_36_right_left_left_left = variables.get("Document_Sheet1_Page1_Orientation1_Landscape1");

Identifier ac_36_right_left_left_right = variables.get("Document_Sheet1_Page2_Orientation1_Landscape1");
IntNumericExpression ac_36_right_left_left=factory.sum(ac_36_right_left_left_left, ac_36_right_left_left_right);	

Identifier ac_36_right_left_right = variables.get("Document_Sheet2_Page1_Orientation1_Landscape1");
IntNumericExpression ac_36_right_left=factory.sum(ac_36_right_left_left, ac_36_right_left_right);	

Identifier ac_36_right_right = variables.get("Document_Sheet2_Page2_Orientation1_Landscape1");
IntNumericExpression ac_36_right=factory.sum(ac_36_right_left, ac_36_right_right);	
IntBooleanExpression ac_36=
factory.equals(ac_36_left, ac_36_right);
constraints.put("ac_36", ac_36);
hlclProgram.add(ac_36);
//
//declaring constraint ac_37


NumericIdentifier ac_37_left = getValue("1");




Identifier ac_37_right_left_left_left = variables.get("Document_Sheet1_Page1_Orientation1_Landscape1");

Identifier ac_37_right_left_left_right = variables.get("Document_Sheet1_Page2_Orientation1_Landscape1");
IntNumericExpression ac_37_right_left_left=factory.sum(ac_37_right_left_left_left, ac_37_right_left_left_right);	

Identifier ac_37_right_left_right = variables.get("Document_Sheet2_Page1_Orientation1_Landscape1");
IntNumericExpression ac_37_right_left=factory.sum(ac_37_right_left_left, ac_37_right_left_right);	

Identifier ac_37_right_right = variables.get("Document_Sheet2_Page2_Orientation1_Landscape1");
IntNumericExpression ac_37_right=factory.sum(ac_37_right_left, ac_37_right_right);	
IntBooleanExpression ac_37=
factory.lessOrEqualsThan(ac_37_left, ac_37_right);
constraints.put("ac_37", ac_37);
hlclProgram.add(ac_37);
//
//declaring constraint ac_38


NumericIdentifier ac_38_left = getValue("4");




Identifier ac_38_right_left_left_left = variables.get("Document_Sheet1_Page1_Orientation1_Landscape1");

Identifier ac_38_right_left_left_right = variables.get("Document_Sheet1_Page2_Orientation1_Landscape1");
IntNumericExpression ac_38_right_left_left=factory.sum(ac_38_right_left_left_left, ac_38_right_left_left_right);	

Identifier ac_38_right_left_right = variables.get("Document_Sheet2_Page1_Orientation1_Landscape1");
IntNumericExpression ac_38_right_left=factory.sum(ac_38_right_left_left, ac_38_right_left_right);	

Identifier ac_38_right_right = variables.get("Document_Sheet2_Page2_Orientation1_Landscape1");
IntNumericExpression ac_38_right=factory.sum(ac_38_right_left, ac_38_right_right);	
IntBooleanExpression ac_38=
factory.greaterOrEqualsThan(ac_38_left, ac_38_right);
constraints.put("ac_38", ac_38);
hlclProgram.add(ac_38);
//
//declaring constraint ac_39


Identifier ac_39_left = variables.get("Landscape");


Identifier ac_39_right_left = variables.get("Landscape_card");

NumericIdentifier ac_39_right_right = getValue("0");
IntBooleanExpression ac_39_right=
factory.greaterThan(ac_39_right_left, ac_39_right_right);
IntBooleanExpression ac_39=factory.doubleImplies(ac_39_left, ac_39_right);		
constraints.put("ac_39", ac_39);
hlclProgram.add(ac_39);
//
//declaring constraint ac_40


Identifier ac_40_left = variables.get("Document_Sheet1_Page1_Orientation1");



NumericIdentifier ac_40_right_left_left = getValue("1");

Identifier ac_40_right_left_right = variables.get("Document_Sheet1_Page1_Orientation1_Portrait1");
IntBooleanExpression ac_40_right_left=
factory.lessOrEqualsThan(ac_40_right_left_left, ac_40_right_left_right);


NumericIdentifier ac_40_right_right_left = getValue("1");

Identifier ac_40_right_right_right = variables.get("Document_Sheet1_Page1_Orientation1_Portrait1");
IntBooleanExpression ac_40_right_right=
factory.greaterOrEqualsThan(ac_40_right_right_left, ac_40_right_right_right);
IntBooleanExpression ac_40_right=factory.and(ac_40_right_left, ac_40_right_right);		
IntBooleanExpression ac_40=factory.doubleImplies(ac_40_left, ac_40_right);		
constraints.put("ac_40", ac_40);
hlclProgram.add(ac_40);
//
//declaring constraint ac_41


Identifier ac_41_left = variables.get("Document_Sheet1_Page2_Orientation1");



NumericIdentifier ac_41_right_left_left = getValue("1");

Identifier ac_41_right_left_right = variables.get("Document_Sheet1_Page2_Orientation1_Portrait1");
IntBooleanExpression ac_41_right_left=
factory.lessOrEqualsThan(ac_41_right_left_left, ac_41_right_left_right);


NumericIdentifier ac_41_right_right_left = getValue("1");

Identifier ac_41_right_right_right = variables.get("Document_Sheet1_Page2_Orientation1_Portrait1");
IntBooleanExpression ac_41_right_right=
factory.greaterOrEqualsThan(ac_41_right_right_left, ac_41_right_right_right);
IntBooleanExpression ac_41_right=factory.and(ac_41_right_left, ac_41_right_right);		
IntBooleanExpression ac_41=factory.doubleImplies(ac_41_left, ac_41_right);		
constraints.put("ac_41", ac_41);
hlclProgram.add(ac_41);
//
//declaring constraint ac_42


Identifier ac_42_left = variables.get("Document_Sheet2_Page1_Orientation1");



NumericIdentifier ac_42_right_left_left = getValue("1");

Identifier ac_42_right_left_right = variables.get("Document_Sheet2_Page1_Orientation1_Portrait1");
IntBooleanExpression ac_42_right_left=
factory.lessOrEqualsThan(ac_42_right_left_left, ac_42_right_left_right);


NumericIdentifier ac_42_right_right_left = getValue("1");

Identifier ac_42_right_right_right = variables.get("Document_Sheet2_Page1_Orientation1_Portrait1");
IntBooleanExpression ac_42_right_right=
factory.greaterOrEqualsThan(ac_42_right_right_left, ac_42_right_right_right);
IntBooleanExpression ac_42_right=factory.and(ac_42_right_left, ac_42_right_right);		
IntBooleanExpression ac_42=factory.doubleImplies(ac_42_left, ac_42_right);		
constraints.put("ac_42", ac_42);
hlclProgram.add(ac_42);
//
//declaring constraint ac_43


Identifier ac_43_left = variables.get("Document_Sheet2_Page2_Orientation1");



NumericIdentifier ac_43_right_left_left = getValue("1");

Identifier ac_43_right_left_right = variables.get("Document_Sheet2_Page2_Orientation1_Portrait1");
IntBooleanExpression ac_43_right_left=
factory.lessOrEqualsThan(ac_43_right_left_left, ac_43_right_left_right);


NumericIdentifier ac_43_right_right_left = getValue("1");

Identifier ac_43_right_right_right = variables.get("Document_Sheet2_Page2_Orientation1_Portrait1");
IntBooleanExpression ac_43_right_right=
factory.greaterOrEqualsThan(ac_43_right_right_left, ac_43_right_right_right);
IntBooleanExpression ac_43_right=factory.and(ac_43_right_left, ac_43_right_right);		
IntBooleanExpression ac_43=factory.doubleImplies(ac_43_left, ac_43_right);		
constraints.put("ac_43", ac_43);
hlclProgram.add(ac_43);
//
//declaring constraint ac_44


Identifier ac_44_left = variables.get("Portrait_card");




Identifier ac_44_right_left_left_left = variables.get("Document_Sheet1_Page1_Orientation1_Portrait1");

Identifier ac_44_right_left_left_right = variables.get("Document_Sheet1_Page2_Orientation1_Portrait1");
IntNumericExpression ac_44_right_left_left=factory.sum(ac_44_right_left_left_left, ac_44_right_left_left_right);	

Identifier ac_44_right_left_right = variables.get("Document_Sheet2_Page1_Orientation1_Portrait1");
IntNumericExpression ac_44_right_left=factory.sum(ac_44_right_left_left, ac_44_right_left_right);	

Identifier ac_44_right_right = variables.get("Document_Sheet2_Page2_Orientation1_Portrait1");
IntNumericExpression ac_44_right=factory.sum(ac_44_right_left, ac_44_right_right);	
IntBooleanExpression ac_44=
factory.equals(ac_44_left, ac_44_right);
constraints.put("ac_44", ac_44);
hlclProgram.add(ac_44);
//
//declaring constraint ac_45


NumericIdentifier ac_45_left = getValue("1");




Identifier ac_45_right_left_left_left = variables.get("Document_Sheet1_Page1_Orientation1_Portrait1");

Identifier ac_45_right_left_left_right = variables.get("Document_Sheet1_Page2_Orientation1_Portrait1");
IntNumericExpression ac_45_right_left_left=factory.sum(ac_45_right_left_left_left, ac_45_right_left_left_right);	

Identifier ac_45_right_left_right = variables.get("Document_Sheet2_Page1_Orientation1_Portrait1");
IntNumericExpression ac_45_right_left=factory.sum(ac_45_right_left_left, ac_45_right_left_right);	

Identifier ac_45_right_right = variables.get("Document_Sheet2_Page2_Orientation1_Portrait1");
IntNumericExpression ac_45_right=factory.sum(ac_45_right_left, ac_45_right_right);	
IntBooleanExpression ac_45=
factory.lessOrEqualsThan(ac_45_left, ac_45_right);
constraints.put("ac_45", ac_45);
hlclProgram.add(ac_45);
//
//declaring constraint ac_46


NumericIdentifier ac_46_left = getValue("4");




Identifier ac_46_right_left_left_left = variables.get("Document_Sheet1_Page1_Orientation1_Portrait1");

Identifier ac_46_right_left_left_right = variables.get("Document_Sheet1_Page2_Orientation1_Portrait1");
IntNumericExpression ac_46_right_left_left=factory.sum(ac_46_right_left_left_left, ac_46_right_left_left_right);	

Identifier ac_46_right_left_right = variables.get("Document_Sheet2_Page1_Orientation1_Portrait1");
IntNumericExpression ac_46_right_left=factory.sum(ac_46_right_left_left, ac_46_right_left_right);	

Identifier ac_46_right_right = variables.get("Document_Sheet2_Page2_Orientation1_Portrait1");
IntNumericExpression ac_46_right=factory.sum(ac_46_right_left, ac_46_right_right);	
IntBooleanExpression ac_46=
factory.greaterOrEqualsThan(ac_46_left, ac_46_right);
constraints.put("ac_46", ac_46);
hlclProgram.add(ac_46);
//
//declaring constraint ac_47


Identifier ac_47_left = variables.get("Portrait");


Identifier ac_47_right_left = variables.get("Portrait_card");

NumericIdentifier ac_47_right_right = getValue("0");
IntBooleanExpression ac_47_right=
factory.greaterThan(ac_47_right_left, ac_47_right_right);
IntBooleanExpression ac_47=factory.doubleImplies(ac_47_left, ac_47_right);		
constraints.put("ac_47", ac_47);
hlclProgram.add(ac_47);
//
//declaring constraint ac_48


Identifier ac_48_left = variables.get("Document_Sheet1_Page1_Side1");



NumericIdentifier ac_48_right_left_left = getValue("1");

Identifier ac_48_right_left_right = variables.get("Document_Sheet1_Page1_Side1_Front1");
IntBooleanExpression ac_48_right_left=
factory.lessOrEqualsThan(ac_48_right_left_left, ac_48_right_left_right);


NumericIdentifier ac_48_right_right_left = getValue("1");

Identifier ac_48_right_right_right = variables.get("Document_Sheet1_Page1_Side1_Front1");
IntBooleanExpression ac_48_right_right=
factory.greaterOrEqualsThan(ac_48_right_right_left, ac_48_right_right_right);
IntBooleanExpression ac_48_right=factory.and(ac_48_right_left, ac_48_right_right);		
IntBooleanExpression ac_48=factory.doubleImplies(ac_48_left, ac_48_right);		
constraints.put("ac_48", ac_48);
hlclProgram.add(ac_48);
//
//declaring constraint ac_49


Identifier ac_49_left = variables.get("Document_Sheet1_Page2_Side1");



NumericIdentifier ac_49_right_left_left = getValue("1");

Identifier ac_49_right_left_right = variables.get("Document_Sheet1_Page2_Side1_Front1");
IntBooleanExpression ac_49_right_left=
factory.lessOrEqualsThan(ac_49_right_left_left, ac_49_right_left_right);


NumericIdentifier ac_49_right_right_left = getValue("1");

Identifier ac_49_right_right_right = variables.get("Document_Sheet1_Page2_Side1_Front1");
IntBooleanExpression ac_49_right_right=
factory.greaterOrEqualsThan(ac_49_right_right_left, ac_49_right_right_right);
IntBooleanExpression ac_49_right=factory.and(ac_49_right_left, ac_49_right_right);		
IntBooleanExpression ac_49=factory.doubleImplies(ac_49_left, ac_49_right);		
constraints.put("ac_49", ac_49);
hlclProgram.add(ac_49);
//
//declaring constraint ac_50


Identifier ac_50_left = variables.get("Document_Sheet2_Page1_Side1");



NumericIdentifier ac_50_right_left_left = getValue("1");

Identifier ac_50_right_left_right = variables.get("Document_Sheet2_Page1_Side1_Front1");
IntBooleanExpression ac_50_right_left=
factory.lessOrEqualsThan(ac_50_right_left_left, ac_50_right_left_right);


NumericIdentifier ac_50_right_right_left = getValue("1");

Identifier ac_50_right_right_right = variables.get("Document_Sheet2_Page1_Side1_Front1");
IntBooleanExpression ac_50_right_right=
factory.greaterOrEqualsThan(ac_50_right_right_left, ac_50_right_right_right);
IntBooleanExpression ac_50_right=factory.and(ac_50_right_left, ac_50_right_right);		
IntBooleanExpression ac_50=factory.doubleImplies(ac_50_left, ac_50_right);		
constraints.put("ac_50", ac_50);
hlclProgram.add(ac_50);
//
//declaring constraint ac_51


Identifier ac_51_left = variables.get("Document_Sheet2_Page2_Side1");



NumericIdentifier ac_51_right_left_left = getValue("1");

Identifier ac_51_right_left_right = variables.get("Document_Sheet2_Page2_Side1_Front1");
IntBooleanExpression ac_51_right_left=
factory.lessOrEqualsThan(ac_51_right_left_left, ac_51_right_left_right);


NumericIdentifier ac_51_right_right_left = getValue("1");

Identifier ac_51_right_right_right = variables.get("Document_Sheet2_Page2_Side1_Front1");
IntBooleanExpression ac_51_right_right=
factory.greaterOrEqualsThan(ac_51_right_right_left, ac_51_right_right_right);
IntBooleanExpression ac_51_right=factory.and(ac_51_right_left, ac_51_right_right);		
IntBooleanExpression ac_51=factory.doubleImplies(ac_51_left, ac_51_right);		
constraints.put("ac_51", ac_51);
hlclProgram.add(ac_51);
//
//declaring constraint ac_52


Identifier ac_52_left = variables.get("Front_card");




Identifier ac_52_right_left_left_left = variables.get("Document_Sheet1_Page1_Side1_Front1");

Identifier ac_52_right_left_left_right = variables.get("Document_Sheet1_Page2_Side1_Front1");
IntNumericExpression ac_52_right_left_left=factory.sum(ac_52_right_left_left_left, ac_52_right_left_left_right);	

Identifier ac_52_right_left_right = variables.get("Document_Sheet2_Page1_Side1_Front1");
IntNumericExpression ac_52_right_left=factory.sum(ac_52_right_left_left, ac_52_right_left_right);	

Identifier ac_52_right_right = variables.get("Document_Sheet2_Page2_Side1_Front1");
IntNumericExpression ac_52_right=factory.sum(ac_52_right_left, ac_52_right_right);	
IntBooleanExpression ac_52=
factory.equals(ac_52_left, ac_52_right);
constraints.put("ac_52", ac_52);
hlclProgram.add(ac_52);
//
//declaring constraint ac_53


NumericIdentifier ac_53_left = getValue("1");




Identifier ac_53_right_left_left_left = variables.get("Document_Sheet1_Page1_Side1_Front1");

Identifier ac_53_right_left_left_right = variables.get("Document_Sheet1_Page2_Side1_Front1");
IntNumericExpression ac_53_right_left_left=factory.sum(ac_53_right_left_left_left, ac_53_right_left_left_right);	

Identifier ac_53_right_left_right = variables.get("Document_Sheet2_Page1_Side1_Front1");
IntNumericExpression ac_53_right_left=factory.sum(ac_53_right_left_left, ac_53_right_left_right);	

Identifier ac_53_right_right = variables.get("Document_Sheet2_Page2_Side1_Front1");
IntNumericExpression ac_53_right=factory.sum(ac_53_right_left, ac_53_right_right);	
IntBooleanExpression ac_53=
factory.lessOrEqualsThan(ac_53_left, ac_53_right);
constraints.put("ac_53", ac_53);
hlclProgram.add(ac_53);
//
//declaring constraint ac_54


NumericIdentifier ac_54_left = getValue("4");




Identifier ac_54_right_left_left_left = variables.get("Document_Sheet1_Page1_Side1_Front1");

Identifier ac_54_right_left_left_right = variables.get("Document_Sheet1_Page2_Side1_Front1");
IntNumericExpression ac_54_right_left_left=factory.sum(ac_54_right_left_left_left, ac_54_right_left_left_right);	

Identifier ac_54_right_left_right = variables.get("Document_Sheet2_Page1_Side1_Front1");
IntNumericExpression ac_54_right_left=factory.sum(ac_54_right_left_left, ac_54_right_left_right);	

Identifier ac_54_right_right = variables.get("Document_Sheet2_Page2_Side1_Front1");
IntNumericExpression ac_54_right=factory.sum(ac_54_right_left, ac_54_right_right);	
IntBooleanExpression ac_54=
factory.greaterOrEqualsThan(ac_54_left, ac_54_right);
constraints.put("ac_54", ac_54);
hlclProgram.add(ac_54);
//
//declaring constraint ac_55


Identifier ac_55_left = variables.get("Front");


Identifier ac_55_right_left = variables.get("Front_card");

NumericIdentifier ac_55_right_right = getValue("0");
IntBooleanExpression ac_55_right=
factory.greaterThan(ac_55_right_left, ac_55_right_right);
IntBooleanExpression ac_55=factory.doubleImplies(ac_55_left, ac_55_right);		
constraints.put("ac_55", ac_55);
hlclProgram.add(ac_55);
//
//declaring constraint ac_56


Identifier ac_56_left = variables.get("Document_Sheet1_Page1_Side1");



NumericIdentifier ac_56_right_left_left = getValue("1");

Identifier ac_56_right_left_right = variables.get("Document_Sheet1_Page1_Side1_Back1");
IntBooleanExpression ac_56_right_left=
factory.lessOrEqualsThan(ac_56_right_left_left, ac_56_right_left_right);


NumericIdentifier ac_56_right_right_left = getValue("1");

Identifier ac_56_right_right_right = variables.get("Document_Sheet1_Page1_Side1_Back1");
IntBooleanExpression ac_56_right_right=
factory.greaterOrEqualsThan(ac_56_right_right_left, ac_56_right_right_right);
IntBooleanExpression ac_56_right=factory.and(ac_56_right_left, ac_56_right_right);		
IntBooleanExpression ac_56=factory.doubleImplies(ac_56_left, ac_56_right);		
constraints.put("ac_56", ac_56);
hlclProgram.add(ac_56);
//
//declaring constraint ac_57


Identifier ac_57_left = variables.get("Document_Sheet1_Page2_Side1");



NumericIdentifier ac_57_right_left_left = getValue("1");

Identifier ac_57_right_left_right = variables.get("Document_Sheet1_Page2_Side1_Back1");
IntBooleanExpression ac_57_right_left=
factory.lessOrEqualsThan(ac_57_right_left_left, ac_57_right_left_right);


NumericIdentifier ac_57_right_right_left = getValue("1");

Identifier ac_57_right_right_right = variables.get("Document_Sheet1_Page2_Side1_Back1");
IntBooleanExpression ac_57_right_right=
factory.greaterOrEqualsThan(ac_57_right_right_left, ac_57_right_right_right);
IntBooleanExpression ac_57_right=factory.and(ac_57_right_left, ac_57_right_right);		
IntBooleanExpression ac_57=factory.doubleImplies(ac_57_left, ac_57_right);		
constraints.put("ac_57", ac_57);
hlclProgram.add(ac_57);
//
//declaring constraint ac_58


Identifier ac_58_left = variables.get("Document_Sheet2_Page1_Side1");



NumericIdentifier ac_58_right_left_left = getValue("1");

Identifier ac_58_right_left_right = variables.get("Document_Sheet2_Page1_Side1_Back1");
IntBooleanExpression ac_58_right_left=
factory.lessOrEqualsThan(ac_58_right_left_left, ac_58_right_left_right);


NumericIdentifier ac_58_right_right_left = getValue("1");

Identifier ac_58_right_right_right = variables.get("Document_Sheet2_Page1_Side1_Back1");
IntBooleanExpression ac_58_right_right=
factory.greaterOrEqualsThan(ac_58_right_right_left, ac_58_right_right_right);
IntBooleanExpression ac_58_right=factory.and(ac_58_right_left, ac_58_right_right);		
IntBooleanExpression ac_58=factory.doubleImplies(ac_58_left, ac_58_right);		
constraints.put("ac_58", ac_58);
hlclProgram.add(ac_58);
//
//declaring constraint ac_59


Identifier ac_59_left = variables.get("Document_Sheet2_Page2_Side1");



NumericIdentifier ac_59_right_left_left = getValue("1");

Identifier ac_59_right_left_right = variables.get("Document_Sheet2_Page2_Side1_Back1");
IntBooleanExpression ac_59_right_left=
factory.lessOrEqualsThan(ac_59_right_left_left, ac_59_right_left_right);


NumericIdentifier ac_59_right_right_left = getValue("1");

Identifier ac_59_right_right_right = variables.get("Document_Sheet2_Page2_Side1_Back1");
IntBooleanExpression ac_59_right_right=
factory.greaterOrEqualsThan(ac_59_right_right_left, ac_59_right_right_right);
IntBooleanExpression ac_59_right=factory.and(ac_59_right_left, ac_59_right_right);		
IntBooleanExpression ac_59=factory.doubleImplies(ac_59_left, ac_59_right);		
constraints.put("ac_59", ac_59);
hlclProgram.add(ac_59);
//
//declaring constraint ac_60


Identifier ac_60_left = variables.get("Back_card");




Identifier ac_60_right_left_left_left = variables.get("Document_Sheet1_Page1_Side1_Back1");

Identifier ac_60_right_left_left_right = variables.get("Document_Sheet1_Page2_Side1_Back1");
IntNumericExpression ac_60_right_left_left=factory.sum(ac_60_right_left_left_left, ac_60_right_left_left_right);	

Identifier ac_60_right_left_right = variables.get("Document_Sheet2_Page1_Side1_Back1");
IntNumericExpression ac_60_right_left=factory.sum(ac_60_right_left_left, ac_60_right_left_right);	

Identifier ac_60_right_right = variables.get("Document_Sheet2_Page2_Side1_Back1");
IntNumericExpression ac_60_right=factory.sum(ac_60_right_left, ac_60_right_right);	
IntBooleanExpression ac_60=
factory.equals(ac_60_left, ac_60_right);
constraints.put("ac_60", ac_60);
hlclProgram.add(ac_60);
//
//declaring constraint ac_61


NumericIdentifier ac_61_left = getValue("1");




Identifier ac_61_right_left_left_left = variables.get("Document_Sheet1_Page1_Side1_Back1");

Identifier ac_61_right_left_left_right = variables.get("Document_Sheet1_Page2_Side1_Back1");
IntNumericExpression ac_61_right_left_left=factory.sum(ac_61_right_left_left_left, ac_61_right_left_left_right);	

Identifier ac_61_right_left_right = variables.get("Document_Sheet2_Page1_Side1_Back1");
IntNumericExpression ac_61_right_left=factory.sum(ac_61_right_left_left, ac_61_right_left_right);	

Identifier ac_61_right_right = variables.get("Document_Sheet2_Page2_Side1_Back1");
IntNumericExpression ac_61_right=factory.sum(ac_61_right_left, ac_61_right_right);	
IntBooleanExpression ac_61=
factory.lessOrEqualsThan(ac_61_left, ac_61_right);
constraints.put("ac_61", ac_61);
hlclProgram.add(ac_61);
//
//declaring constraint ac_62


NumericIdentifier ac_62_left = getValue("4");




Identifier ac_62_right_left_left_left = variables.get("Document_Sheet1_Page1_Side1_Back1");

Identifier ac_62_right_left_left_right = variables.get("Document_Sheet1_Page2_Side1_Back1");
IntNumericExpression ac_62_right_left_left=factory.sum(ac_62_right_left_left_left, ac_62_right_left_left_right);	

Identifier ac_62_right_left_right = variables.get("Document_Sheet2_Page1_Side1_Back1");
IntNumericExpression ac_62_right_left=factory.sum(ac_62_right_left_left, ac_62_right_left_right);	

Identifier ac_62_right_right = variables.get("Document_Sheet2_Page2_Side1_Back1");
IntNumericExpression ac_62_right=factory.sum(ac_62_right_left, ac_62_right_right);	
IntBooleanExpression ac_62=
factory.greaterOrEqualsThan(ac_62_left, ac_62_right);
constraints.put("ac_62", ac_62);
hlclProgram.add(ac_62);
//
//declaring constraint ac_63


Identifier ac_63_left = variables.get("Back");


Identifier ac_63_right_left = variables.get("Back_card");

NumericIdentifier ac_63_right_right = getValue("0");
IntBooleanExpression ac_63_right=
factory.greaterThan(ac_63_right_left, ac_63_right_right);
IntBooleanExpression ac_63=factory.doubleImplies(ac_63_left, ac_63_right);		
constraints.put("ac_63", ac_63);
hlclProgram.add(ac_63);
	}
	public boolean evaluateSatisfiability(){
		// the output
		boolean evaluation= false;
		// //to transform the hllcl program into a prolog  file, 
		// //these lines are commented because they are useful for debugging 
		Hlcl2SWIProlog swiPrologTransformer = new Hlcl2SWIProlog(); 
		prologProgram = swiPrologTransformer.transform(hlclProgram);
				
		// an instance of the solver for Swiprolog 
		swiSolver= new SWIPrologSolver();
		swiSolver.setHLCLProgram(hlclProgram); //passing the hlcl program to the solver
		swiSolver.solve(); // This methhod prepares the solver 
		List<SolverSolution> solutions = swiSolver.getAllSolutions(); // Consulting if the solver has one solution
			evaluation= solutions.size()>0;
			for (SolverSolution solverSolution : solutions) {
				System.out.println(solverSolution.toString());
			}	return evaluation;
	}
	/** 
	* To obtain the NumericIdentifier representation of a value 
	* @param id the string with the value 
	* @return the NumericIdentifier 
	*/
	public NumericIdentifier getValue(String id) {	NumericIdentifier value= numbers.get(id); 
	 	if (value==null) { 
	 		if (id.equals("selected")) { 
	 			value= numbers.get("1"); 
	 		} 
	 		else if(id.equals("unselected")) {
				value= numbers.get("0"); 
			} 
			else { 
				value= factory.number(Integer.parseInt(id)); 
				numbers.put(id, value);
			}
	 	} 
	 	return value; 
	 } 
		public String getModelName() {
			return modelName;
		}
		public void setModelName(String modelName) {
			this.modelName = modelName;
		}
		public HlclFactory getFactory() {
			return factory;
		}
		public void setFactory(HlclFactory factory) {
			this.factory = factory;
		}
		public HlclProgram getHlclProgram() {
			return hlclProgram;
		}
		public void setHlclProgram(HlclProgram hlclProgram) {
			this.hlclProgram = hlclProgram;
		}
} 	