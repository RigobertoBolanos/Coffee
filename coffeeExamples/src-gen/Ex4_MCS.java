//Java imports
import java.util.HashMap;
import java.util.List;
//imports for hlcl 
import com.variamos.hlcl.core.HlclProgram; 
import com.variamos.hlcl.model.expressions.HlclFactory; 
import com.variamos.hlcl.model.domains.BinaryDomain;
import com.variamos.hlcl.model.domains.IntervalDomain;
import com.variamos.hlcl.model.domains.RangeDomain;
import com.variamos.hlcl.model.domains.StringDomain;
import com.variamos.hlcl.model.expressions.Identifier;
import com.variamos.hlcl.model.expressions.IntBooleanExpression;
import com.variamos.hlcl.model.expressions.NumericIdentifier;
import com.variamos.hlcl.model.expressions.SymbolicExpression;
import com.variamos.hlcl.model.expressions.IntNumericExpression;

//imports for solver
import com.variamos.solver.core.SWIPrologSolver;
import com.variamos.solver.core.compiler.Hlcl2SWIProlog;
import com.variamos.solver.model.SolverSolution;

/**
* This class is automatically generated from a product line model described in 
* constraint programming HLCL
* @author Angela Villota 
* @version CP-HLCL Version1
*
*/
public class Ex4_MCS { 			
	
	private String modelName;
	private HlclFactory factory;
	private HlclProgram hlclProgram;
	private SWIPrologSolver swiSolver;
	private String prologProgram;
	private HashMap<String,IntBooleanExpression> constraints;
	private HashMap<String,Identifier> variables;
	private HashMap<String,NumericIdentifier> numbers;
	/**
	* This is an autogenerated method* Constructor method
	* @param modelName is the name of the model in the  CP-HLCL specification
	*/
	public Ex4_MCS(String modelName){ 				
		
		this.modelName= modelName;
		hlclProgram= new HlclProgram();
		factory = new HlclFactory();
		variables= new HashMap<String,Identifier>();
		constraints= new HashMap<String,IntBooleanExpression>();
		numbers= new HashMap<String,NumericIdentifier>();
		NumericIdentifier one = factory.number(1);
		NumericIdentifier zero= factory.number(0);
		numbers.put("1", one);
		numbers.put("0", zero);
	} 			
	public static void main(String[] args) {
		Ex4_MCS obj = new Ex4_MCS("Ex4_MCS");
		obj.run();
	}
	public void run(){
		// first obtain a HlclProgram from the specification
		transformVars();
		transformConstraints(); 
		// use the solver to solve the constraint program
		evaluateSatisfiability();
		//show the output
		System.out.println(prologProgram);
	}
	public void transformVars() {
//declaring variable MCS
Identifier MCS = factory.newIdentifier("MCS");
  			BinaryDomain MCSDom= new BinaryDomain();
MCS.setDomain(MCSDom);	
variables.put("MCS", MCS); //including the variable in the map
//declaring variable FeedBack
Identifier FeedBack = factory.newIdentifier("FeedBack");
  			BinaryDomain FeedBackDom= new BinaryDomain();
FeedBack.setDomain(FeedBackDom);	
variables.put("FeedBack", FeedBack); //including the variable in the map
//declaring variable Memory
Identifier Memory = factory.newIdentifier("Memory");
  			BinaryDomain MemoryDom= new BinaryDomain();
Memory.setDomain(MemoryDom);	
variables.put("Memory", Memory); //including the variable in the map
//declaring variable Size
Identifier Size = factory.newIdentifier("Size");
 				RangeDomain SizeDom= new RangeDomain(0, 32);
Size.setDomain(SizeDom);	
variables.put("Size", Size); //including the variable in the map
//declaring variable Processor
Identifier Processor = factory.newIdentifier("Processor");
  			BinaryDomain ProcessorDom= new BinaryDomain();
Processor.setDomain(ProcessorDom);	
variables.put("Processor", Processor); //including the variable in the map
//declaring variable Cores
Identifier Cores = factory.newIdentifier("Cores");
 				RangeDomain CoresDom= new RangeDomain(0, 7);
Cores.setDomain(CoresDom);	
variables.put("Cores", Cores); //including the variable in the map
//declaring variable PosSensor
Identifier PosSensor = factory.newIdentifier("PosSensor");
  			BinaryDomain PosSensorDom= new BinaryDomain();
PosSensor.setDomain(PosSensorDom);	
variables.put("PosSensor", PosSensor); //including the variable in the map
//declaring variable SpeedSensor
Identifier SpeedSensor = factory.newIdentifier("SpeedSensor");
  			BinaryDomain SpeedSensorDom= new BinaryDomain();
SpeedSensor.setDomain(SpeedSensorDom);	
variables.put("SpeedSensor", SpeedSensor); //including the variable in the map
//declaring variable Visual
Identifier Visual = factory.newIdentifier("Visual");
  			BinaryDomain VisualDom= new BinaryDomain();
Visual.setDomain(VisualDom);	
variables.put("Visual", Visual); //including the variable in the map
//declaring variable Audio
Identifier Audio = factory.newIdentifier("Audio");
  			BinaryDomain AudioDom= new BinaryDomain();
Audio.setDomain(AudioDom);	
variables.put("Audio", Audio); //including the variable in the map
//declaring variable Vibration
Identifier Vibration = factory.newIdentifier("Vibration");
  			BinaryDomain VibrationDom= new BinaryDomain();
Vibration.setDomain(VibrationDom);	
variables.put("Vibration", Vibration); //including the variable in the map
	}
	public void transformConstraints() {
//
//declaring constraint c0


Identifier c0_left = variables.get("MCS");

NumericIdentifier c0_right = getValue("1");
IntBooleanExpression c0=
factory.equals(c0_left, c0_right);
constraints.put("c0", c0);
hlclProgram.add(c0);
//
//declaring constraint c2


Identifier c2_left = variables.get("MCS");

Identifier c2_right = variables.get("Processor");
IntBooleanExpression c2=
factory.greaterOrEqualsThan(c2_left, c2_right);
constraints.put("c2", c2);
hlclProgram.add(c2);
//
//declaring constraint c3


Identifier c3_left = variables.get("MCS");

Identifier c3_right = variables.get("SpeedSensor");
IntBooleanExpression c3=
factory.greaterOrEqualsThan(c3_left, c3_right);
constraints.put("c3", c3);
hlclProgram.add(c3);
//
//declaring constraint c4


Identifier c4_left = variables.get("MCS");

Identifier c4_right = variables.get("Memory");
IntBooleanExpression c4=
factory.greaterOrEqualsThan(c4_left, c4_right);
constraints.put("c4", c4);
hlclProgram.add(c4);
//
//declaring constraint c5


Identifier c5_left = variables.get("MCS");

Identifier c5_right = variables.get("PosSensor");
IntBooleanExpression c5=
factory.greaterOrEqualsThan(c5_left, c5_right);
constraints.put("c5", c5);
hlclProgram.add(c5);
//
//declaring constraint c6


Identifier c6_left = variables.get("MCS");

Identifier c6_right = variables.get("FeedBack");
IntBooleanExpression c6=
factory.greaterOrEqualsThan(c6_left, c6_right);
constraints.put("c6", c6);
hlclProgram.add(c6);
	}
	public boolean evaluateSatisfiability(){
		// the output
		boolean evaluation= false;
		// //to transform the hllcl program into a prolog  file, 
		// //these lines are commented because they are useful for debugging 
		Hlcl2SWIProlog swiPrologTransformer = new Hlcl2SWIProlog(); 
		prologProgram = swiPrologTransformer.transform(hlclProgram);
				
		// an instance of the solver for Swiprolog 
		swiSolver= new SWIPrologSolver();
		swiSolver.setHLCLProgram(hlclProgram); //passing the hlcl program to the solver
		swiSolver.solve(); // This methhod prepares the solver 
		List<SolverSolution> solutions = swiSolver.getAllSolutions(); // Consulting if the solver has one solution
			evaluation= solutions.size()>0;
			for (SolverSolution solverSolution : solutions) {
				System.out.println(solverSolution.toString());
			}	return evaluation;
	}
	/** 
	* To obtain the NumericIdentifier representation of a value 
	* @param id the string with the value 
	* @return the NumericIdentifier 
	*/
	public NumericIdentifier getValue(String id) {	NumericIdentifier value= numbers.get(id); 
	 	if (value==null) { 
	 		if (id.equals("selected")) { 
	 			value= numbers.get("1"); 
	 		} 
	 		else if(id.equals("unselected")) {
				value= numbers.get("0"); 
			} 
			else { 
				value= factory.number(Integer.parseInt(id)); 
				numbers.put(id, value);
			}
	 	} 
	 	return value; 
	 } 
		public String getModelName() {
			return modelName;
		}
		public void setModelName(String modelName) {
			this.modelName = modelName;
		}
		public HlclFactory getFactory() {
			return factory;
		}
		public void setFactory(HlclFactory factory) {
			this.factory = factory;
		}
		public HlclProgram getHlclProgram() {
			return hlclProgram;
		}
		public void setHlclProgram(HlclProgram hlclProgram) {
			this.hlclProgram = hlclProgram;
		}
} 	